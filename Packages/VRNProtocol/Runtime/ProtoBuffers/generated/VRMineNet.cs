// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: VRMineNet.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from VRMineNet.proto</summary>
public static partial class VRMineNetReflection {

  #region Descriptor
  /// <summary>File descriptor for VRMineNet.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static VRMineNetReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "Cg9WUk1pbmVOZXQucHJvdG8aH2dvb2dsZS9wcm90b2J1Zi90aW1lc3RhbXAu",
          "cHJvdG8iOwoNVlJOUXVhdGVybmlvbhIJCgF3GAEgASgCEgkKAXgYAiABKAIS",
          "CQoBeRgDIAEoAhIJCgF6GAQgASgCIi0KClZSTlZlY3RvcjMSCQoBeBgBIAEo",
          "AhIJCgF5GAIgASgCEgkKAXoYAyABKAIiIgoKVlJOVmVjdG9yMhIJCgF4GAEg",
          "ASgCEgkKAXkYAiABKAIiKwoIVlJOQ29sb3ISCQoBchgBIAEoAhIJCgFnGAIg",
          "ASgCEgkKAWIYAyABKAIi4QEKCVZSTkhlYWRlchIiCgpwYWNrZXRUeXBlGAEg",
          "ASgOMg4uVlJOUGFja2V0VHlwZRIpCgpwYWNrZXREZXN0GAIgASgOMhUuVlJO",
          "UGFja2V0RGVzdGluYXRpb24SDwoHbWVzc2FnZRgDIAEoCRIRCgl0aWNrQ291",
          "bnQYBCABKAMSEgoKc2VydmVyVGltZRgFIAEoAhINCgVycGNJRBgGIAEoBBIU",
          "CgxkZXN0Q2xpZW50SUQYByABKAUSEgoKcGFja2V0U2l6ZRgIIAEoBRIUCgxm",
          "cm9tQ2xpZW50SUQYCSABKAUiOQoSVlJOUmVsYXlDbGllbnRJbmZvEhAKCGNs",
          "aWVudElEGAEgASgFEhEKCWlwQWRkcmVzcxgCIAEoCSI9ChJWUk5SZWxheUNs",
          "aWVudExpc3QSJwoKY2xpZW50TGlzdBgBIAMoCzITLlZSTlJlbGF5Q2xpZW50",
          "SW5mbyK8AQoOVlJOQ2xpZW50U3RhdHMSEAoIY2xpZW50SUQYASABKAUSEwoL",
          "Y29ubmVjdFRpbWUYAiABKAISEgoKYXZnQml0UmF0ZRgDIAEoAhISCgphdmdQ",
          "aW5nUlRUGAQgASgCEhsKE3JlbGlhYmxlUGlwZWxpbmVSVFQYBSABKAISHgoW",
          "cmVsaWFibGVQaXBlbGluZVJUVFZhchgGIAEoAhIeChZyZWxpYWJsZVNlbmRR",
          "dWV1ZUNvdW50GAcgASgFIj8KF1ZSTlJlbGF5Q2xpZW50U3RhdHNMaXN0EiQK",
          "C2NsaWVudFN0YXRzGAEgAygLMg8uVlJOQ2xpZW50U3RhdHMiNgoQVlJOTmV0",
          "T2JqTWVzc2FnZRINCgVvYmpJRBgBIAEoDBITCgttZXNzYWdlVHlwZRgCIAEo",
          "CSJOChRWUk5BbnRpbGF0ZW5jeVN0YXR1cxIQCghjbGllbnRJRBgBIAEoBRIQ",
          "CghwbGF5ZXJJRBgCIAEoBRISCgpzdGF0dXNUZXh0GAMgASgJIiMKD1ZSTlBp",
          "bmdSZXNwb25zZRIQCghjbGllbnRJRBgBIAEoBSLEAgoQVlJOUGxheWVyTWVz",
          "c2FnZRIQCghwbGF5ZXJJRBgBIAEoBRIqCgttZXNzYWdlVHlwZRgCIAEoDjIV",
          "LlZSTlBsYXllck1lc3NhZ2VUeXBlEhIKCHRleHREYXRhGAMgASgJSAASEwoJ",
          "ZmxvYXREYXRhGAQgASgCSAASEQoHaW50RGF0YRgFIAEoBUgAEhIKCGJvb2xE",
          "YXRhGAYgASgISAASHwoIdmVjMkRhdGEYByABKAsyCy5WUk5WZWN0b3IySAAS",
          "HwoIdmVjM0RhdGEYCCABKAsyCy5WUk5WZWN0b3IzSAASKAoOcXVhdGVybmlv",
          "bkRhdGEYCSABKAsyDi5WUk5RdWF0ZXJuaW9uSAASIQoHYmc0RGF0YRgKIAEo",
          "CzIOLlZSTkJHNFNpbURhdGFIAEITChFwbGF5ZXJNZXNzYWdlRGF0YSI3ChBW",
          "Uk5Nc2dEYW1hZ2VGaXJlEhEKCWRtZ0Ftb3VudBgBIAEoAhIQCghwbGF5ZXJJ",
          "RBgCIAEoBSIxCgxWUk5EaXNjb3ZlcnkSEgoKc2VydmVyTmFtZRgBIAEoCRIN",
          "CgVub3RlcxhkIAMoCSIoChRWUk5SZXF1ZXN0V29ybGRTdGF0ZRIQCghjbGll",
          "bnRJRBgBIAEoBSKBAQoYVlJOQ2FsaWJyYXRpb25PZmZzZXREYXRhEhAKCGNs",
          "aWVudElEGAEgASgFEhAKCHBsYXllcklEGAIgASgFEh4KCW9mZnNldFBvcxgD",
          "IAEoCzILLlZSTlZlY3RvcjMSIQoJb2Zmc2V0Um90GAQgASgLMg4uVlJOUXVh",
          "dGVybmlvbiKJAQoWVlJOQ2FsVmVyaWZpY2F0aW9uRGF0YRIQCghjbGllbnRJ",
          "RBgBIAEoBRIQCghwbGF5ZXJJRBgCIAEoBRIjCg5yZWZlcmVuY2VQb2ludBgD",
          "IAEoCzILLlZSTlZlY3RvcjMSJgoRdmVyaWZpY2F0aW9uUG9pbnQYBCABKAsy",
          "Cy5WUk5WZWN0b3IzIlAKElZSTlN0YXRlRGF0YVVwZGF0ZRIPCgdzdGF0ZUlE",
          "GAEgASgJEhYKDmNsaWVudElEU291cmNlGAIgASgFEhEKCXN0YXRlRGF0YRgD",
          "IAEoDCIsChJWUk5OZXRPYmpTeW5jTXVsdGkSFgoObnVtT2JqZWN0U3luY3MY",
          "ASABKAUiLwoNVlJOTmV0T2JqU3luYxINCgVvYmpJRBgBIAEoDBIPCgdvd25l",
          "cklEGAIgASgFIjwKE1ZSTkxpbmtMaW5lU3luY0RhdGESFAoMUGxheWVyU291",
          "cmNlGAEgASgFEg8KB0NsaXBwZWQYAiABKAgiwwEKElZSTlBoeXNpY3NTeW5j",
          "RGF0YRIdCghwb3NpdGlvbhgBIAEoCzILLlZSTlZlY3RvcjMSIAoIcm90YXRp",
          "b24YAiABKAsyDi5WUk5RdWF0ZXJuaW9uEh0KCHZlbG9jaXR5GAMgASgLMgsu",
          "VlJOVmVjdG9yMxIkCg9hbmd1bGFyVmVsb2NpdHkYBCABKAsyCy5WUk5WZWN0",
          "b3IzEhMKC2lzS2luZW1hdGljGAUgASgIEhIKCnVzZUdyYXZpdHkYBiABKAgi",
          "XwoUVlJOTGFzZXJQb2ludGVyU3RhdGUSFgoOaXNMYXNlckVuYWJsZWQYASAB",
          "KAgSEQoJbGFzZXJNb2RlGAIgASgFEhwKFGxhc2VyQWN0aXZhdGlvbkxldmVs",
          "GAMgASgCIjwKElZSTkludGVyYWN0aW9uRGF0YRImCgtJbnRlcmFjdGlvbhgB",
          "IAEoDjIRLlZSTlZSSW50ZXJhY3Rpb24iKQoTVlJOUmVxdWVzdEpvaW5Xb3Js",
          "ZBISCgpwbGF5ZXJOYW1lGAEgASgJIioKFFZSTlJlcXVlc3RKb2luU2VydmVy",
          "EhIKCmNsaWVudE5hbWUYASABKAkiPQoVVlJOUmVxdWVzdE5ld1BsYXllcklE",
          "EhAKCGNsaWVudElEGAEgASgFEhIKCnBsYXllck5hbWUYAiABKAkiNgoTVlJO",
          "UmVxdWVzdE93bmVyc2hpcBINCgVvYmpJRBgBIAEoDBIQCghjbGllbnRJRBgC",
          "IAEoBSI5ChhWUk5SZXF1ZXN0TWluZUF0bW9zcGhlcmUSHQoIcG9zaXRpb24Y",
          "ASABKAsyCy5WUk5WZWN0b3IzIogBChVWUk5TZW5kTWluZUF0bW9zcGhlcmUS",
          "HQoIcG9zaXRpb24YASABKAsyCy5WUk5WZWN0b3IzEg4KBk94eWdlbhgCIAEo",
          "AhIWCg5DYXJib25Nb25veGlkZRgDIAEoAhIPCgdNZXRoYW5lGAQgASgCEhcK",
          "D0h5ZHJvZ2VuU3VsZmlkZRgFIAEoAiKsAQoOVlJOU3Bhd25PYmplY3QSDQoF",
          "b2JqSUQYASABKAwSDwoHb3duZXJJRBgCIAEoBRIPCgdhc3NldElEGAMgASgJ",
          "EhYKDnNwYXduQWN0aXZhdGVkGAQgASgIEigKDXN0YXJ0UG9zaXRpb24YBSAB",
          "KAsyES5WUk5UcmFuc2Zvcm1EYXRhEg8KB3NjZW5lSUQYBiABKAUSFgoOb3du",
          "ZXJFeGNsdXNpdmUYByABKAgiRgoUVlJOTmV0d29ya1VwZGF0ZVJhdGUSGAoQ",
          "T2JqZWN0VXBkYXRlUmF0ZRgCIAEoAhIUCgxWUlVwZGF0ZVJhdGUYAyABKAIi",
          "bQoWVlJOTmV0d29ya2VkT2JqZWN0TGlzdBIPCgdzY2VuZUlEGAEgASgFEiMK",
          "Ck9iamVjdExpc3QYAyADKAsyDy5WUk5TcGF3bk9iamVjdBIdChVEZXN0cm95",
          "ZWRTY2VuZU9iamVjdHMYBCADKAwiIQoQVlJORGVzdHJveU9iamVjdBINCgVv",
          "YmpJRBgBIAEoDCIzCgtWUk5TZXRPd25lchINCgVvYmpJRBgBIAEoDBIVCg1v",
          "d25lckNsaWVudElEGAIgASgFIicKE1ZSTkFzc2lnbkNsaWVudEluZm8SEAoI",
          "Y2xpZW50SUQYASABKAUiNwoRVlJOQXNzaWduUGxheWVySUQSEAoIY2xpZW50",
          "SUQYASABKAUSEAoIcGxheWVySUQYAiABKAUiXwoTVlJOQXNzaWduUGxheWVy",
          "Um9sZRIQCghwbGF5ZXJJRBgBIAEoBRIcCgRSb2xlGAIgASgOMg4uVlJOUGxh",
          "eWVyUm9sZRIYChBsZWZ0SGFuZERvbWluYW50GAMgASgIIlMKEFZSTlRyYW5z",
          "Zm9ybURhdGESIAoIcm90YXRpb24YASABKAsyDi5WUk5RdWF0ZXJuaW9uEh0K",
          "CHBvc2l0aW9uGAIgASgLMgsuVlJOVmVjdG9yMyIhCg5WUk5UZXh0TWVzc2Fn",
          "ZRIPCgdtZXNzYWdlGAEgASgJIiEKDFZSTkZsb2F0RGF0YRIRCglmbG9hdERh",
          "dGEYASABKAIiHwoLVlJOQm9vbERhdGESEAoIYm9vbERhdGEYASABKAgiNQoN",
          "VlJOUGxheWVyTGlzdBIkCgpQbGF5ZXJMaXN0GAEgAygLMhAuVlJOVlJQbGF5",
          "ZXJJbmZvIqEDCg9WUk5WUlBsYXllckluZm8SEAoIY2xpZW50SUQYASABKAUS",
          "EAoIcGxheWVySUQYAiABKAUSDAoEbmFtZRgGIAEoCRIcCgRSb2xlGAcgASgO",
          "Mg4uVlJOUGxheWVyUm9sZRISCgpvbkxpbmtMaW5lGAggASgIEh8KBGhlYWQY",
          "AyABKAsyES5WUk5UcmFuc2Zvcm1EYXRhEikKDmxlZnRDb250cm9sbGVyGAQg",
          "ASgLMhEuVlJOVHJhbnNmb3JtRGF0YRIqCg9yaWdodENvbnRyb2xsZXIYBSAB",
          "KAsyES5WUk5UcmFuc2Zvcm1EYXRhEh0KFWxlZnRDb250cm9sbGVyVHJhY2tl",
          "ZBgOIAEoCBIeChZyaWdodENvbnRyb2xsZXJUcmFja2VkGA8gASgIEiQKCXJp",
          "Z09mZnNldBgJIAEoCzIRLlZSTlRyYW5zZm9ybURhdGESFAoMcGxheWVySGVp",
          "Z2h0GAogASgCEhAKCGxlZnRHcmlwGAsgASgIEhEKCXJpZ2h0R3JpcBgMIAEo",
          "CBISCgpwbGF5ZXJNb2RlGA0gASgFIukBCg1WUk5CRzRTaW1EYXRhEhAKCGNs",
          "aWVudElEGAEgASgFEhAKCHBsYXllcklEGAIgASgFEiUKCmFsYXJtU3RhdGUY",
          "AyABKA4yES5WUk5CRzRBbGFybVN0YXRlEhYKDm94eWdlblByZXNzdXJlGAQg",
          "ASgFEhgKEGJhc2VsaW5lUHJlc3N1cmUYBSABKAUSFQoNcmVtYWluaW5nVGlt",
          "ZRgGIAEoBRITCgtsb3dQcmVzc3VyZRgHIAEoCBIYChBjcml0aWNhbFByZXNz",
          "dXJlGAggASgIEhUKDW94eWdlbkN5bE9wZW4YCSABKAgiNQoPVlJOU2VudGlu",
          "ZWxJbmZvEhAKCHBsYXllcklEGAEgASgFEhAKCHByZXNzdXJlGAIgASgCIkUK",
          "EFZSTlNwZWN0YXRvckluZm8SEAoIY2xpZW50SUQYASABKAUSEQoJaXBBZGRy",
          "ZXNzGAUgASgJEgwKBG5hbWUYBiABKAkiUAoMVlJOTG9hZFNjZW5lEhEKCXNj",
          "ZW5lTmFtZRgBIAEoCRIcChRhbGxvd1NjZW5lQWN0aXZhdGlvbhgCIAEoCBIP",
          "CgdzY2VuZUlEGAMgASgFIkAKGVZSTkNsaWVudENvbm5lY3Rpb25TdGF0dXMS",
          "EAoIY2xpZW50SUQYASABKAUSEQoJY29ubmVjdGVkGAIgASgIInUKDlZSTkNs",
          "aWVudFN0YXRlEhAKCGNsaWVudElEGAEgASgFEhIKCnBsYXllck5hbWUYAyAB",
          "KAkSKgoOc2NlbmVMb2FkU3RhdGUYBCABKA4yEi5WUk5TY2VuZUxvYWRTdGF0",
          "ZRIRCglzY2VuZU5hbWUYBSABKAkiQgoSVlJOQWN0aXZhdGlvblN0YXRlEhEK",
          "CWFjdGl2YXRlZBgBIAEoCBIZChFhY3RpdmF0YXRpb25MZXZlbBgCIAEoAiI+",
          "Cg5WUk5UZWxlcG9ydEFsbBIWCg50ZWxlcG9ydFRhcmdldBgBIAEoCRIUCgx0",
          "ZWxlcG9ydFRpbWUYAiABKAIiUQoLVlJOU2ltU3RhdGUSEwoLYWN0aXZlU2Nl",
          "bmUYASABKAkSFgoOdGVsZXBvcnRUYXJnZXQYAiABKAkSFQoNYWN0aXZlU2Nl",
          "bmVJRBgDIAEoBSKQAQoVVlJOU3ltYm9sTWFuYWdlclN0YXRlEhkKEXN5bWJv",
          "bE1hbmFnZXJOYW1lGAEgASgJEh8KB3N5bWJvbHMYAiADKAsyDi5WUk5TeW1i",
          "b2xEYXRhEhcKD3N5bWJvbE1hbmFnZXJJRBgDIAEoDBIQCghwbGF5ZXJJRBgE",
          "IAEoBRIQCghjbGllbnRJRBgFIAEoBSK2AgoNVlJOU3ltYm9sRGF0YRIQCghz",
          "eW1ib2xJRBgBIAEoAxITCgtzeW1ib2xDbGFzcxgCIAEoCRITCgthZGRyZXNz",
          "YWJsZRgDIAEoCRIZCgRzaXplGAQgASgLMgsuVlJOVmVjdG9yMhIYCgVjb2xv",
          "chgFIAEoCzIJLlZSTkNvbG9yEhYKDmlnbm9yZVJvdGF0aW9uGAYgASgIEhEK",
          "CXNwYW5FbnRyeRgHIAEoCBIWCg5wcmVzZXJ2ZUFzcGVjdBgIIAEoCBISCgpz",
          "eW1ib2xUZXh0GAkgASgJEiIKDVdvcmxkUG9zaXRpb24YDCABKAsyCy5WUk5W",
          "ZWN0b3IzEiUKDVdvcmxkUm90YXRpb24YDSABKAsyDi5WUk5RdWF0ZXJuaW9u",
          "EhIKCnN5bWJvbERhdGEYZCABKAwiPwoTVlJORGlzc29uYW5jZVBhY2tldBIQ",
          "CghjbGllbnRJRBgBIAEoBRIWCg5kaXNzb25hbmNlRGF0YRgCIAEoDCK1AQoU",
          "VlJOVmVudFZpc3VhbGl6YXRpb24SJgoMVG9nZ2xlQWN0aW9uGAEgASgOMhAu",
          "VlJOVG9nZ2xlQWN0aW9uEhcKD1Zpc0VmZmVjdFByZWZhYhgEIAEoCRIPCgdW",
          "aXNEYXRhGAUgASgJEhQKDFZpc0VuYWJsZWRETRgGIAEoCBIYChBWaXNFbmFi",
          "bGVkUGxheWVyGAcgASgIEhsKE1Zpc0VuYWJsZWRTcGVjdGF0b3IYCCABKAgi",
          "cQoMVlJOVmVudEdyYXBoEiMKCUp1bmN0aW9ucxgKIAMoCzIQLlZSTlZlbnRK",
          "dW5jdGlvbhIfCgdBaXJ3YXlzGAsgAygLMg4uVlJOVmVudEFpcndheRIbCgVG",
          "aXJlcxgMIAMoCzIMLlZSTlZlbnRGaXJlIsYDCg9WUk5WZW50SnVuY3Rpb24S",
          "EgoKSnVuY3Rpb25JRBgBIAEoBRIPCgdNRmlyZUlEGAIgASgFEhcKD0lzU3Rh",
          "cnRKdW5jdGlvbhgDIAEoCBIWCg5Jc0luQXRtb3NwaGVyZRgEIAEoCBIiCg1X",
          "b3JsZFBvc2l0aW9uGAUgASgLMgsuVlJOVmVjdG9yMxIYChBDSDRDb25jZW50",
          "cmF0aW9uGAYgASgCEhQKDFRvdGFsQWlyRmxvdxgHIAEoAhIYChBUb3RhbENv",
          "bnRhbWluYW50GAggASgCEhAKCFRvdGFsQ0g0GAkgASgCEhsKE0NvbnRhbUNv",
          "bmNlbnRyYXRpb24YCiABKAISGAoQVGVtcGVyYXR1cmVJbnRlchgLIAEoAhIR",
          "CglUb3RhbEhlYXQYDCABKAISGAoQQ29uZGl0aW9uQ2hhbmdlZBgNIAEoCBIT",
          "CgtUZW1wZXJhdHVyZRgOIAEoAhIRCglFbGV2YXRpb24YDyABKAISFgoOQ0g0",
          "SW5pdGlhbENvbmMYECABKAISGgoSQXRtb3NwaGVyZUp1bmNUeXBlGBEgASgF",
          "Eh0KFUF0bW9zcGhlcmVUZW1wZXJhdHVyZRgSIAEoAiK6AwoNVlJOVmVudEFp",
          "cndheRIQCghBaXJ3YXlJRBgBIAEoBRIPCgdNRmlyZUlEGAIgASgFEhIKClJl",
          "c2lzdGFuY2UYAyABKAISFwoPQWRkZWRSZXNpc3RhbmNlGAQgASgCEhkKEUNv",
          "bnRyb2xSZXNpc3RhbmNlGAUgASgCEhcKD0NINEVtaXNzaW9uUmF0ZRgGIAEo",
          "AhIVCg1TdGFydEp1bmN0aW9uGAcgASgFEhMKC0VuZEp1bmN0aW9uGAggASgF",
          "EhoKEkNyb3NzU2VjdGlvbmFsQXJlYRgJIAEoAhIVCg1GbG93RGlyZWN0aW9u",
          "GAogASgFEhAKCEZsb3dSYXRlGAsgASgCEhYKDkZyaWN0aW9uRmFjdG9yGAwg",
          "ASgCEg4KBkxlbmd0aBgNIAEoAhIRCglQZXJpbWV0ZXIYDiABKAISFwoPUm9j",
          "a1RlbXBlcmF0dXJlGBAgASgCEhsKE1RoZXJtYWxDb25kdWN0aXZpdHkYESAB",
          "KAISGQoRVGhlcm1hbERlZnVzaXZpdHkYEiABKAISDAoEVHlwZRgTIAEoBRIa",
          "ChJPdmVycmlkZVJlc2lzdGFuY2UYFCABKAIiZAoLVlJOVmVudEZpcmUSDgoG",
          "RmlyZUlEGAEgASgFEg8KB01GaXJlSUQYAiABKAUSEAoIQWlyd2F5SUQYAyAB",
          "KAUSIgoNV29ybGRQb3NpdGlvbhgEIAEoCzILLlZSTlZlY3RvcjMiNQoNVlJO",
          "RmlyZVN0YXR1cxISCgpGaXJlSGVhbHRoGAEgASgCEhAKCHBsYXllcklEGAIg",
          "ASgFIkIKGVZSTkZpcmVFeHRpbmd1aXNoZXJTdGF0dXMSEwoLUGVyY2VudEZ1",
          "bGwYASABKAISEAoISXNBY3RpdmUYAiABKAgiOwoQVlJOQmF0dGVyeVN0YXR1",
          "cxIQCghjbGllbnRJRBgBIAEoBRIVCg1zdGF0dXNNZXNzYWdlGAogASgJIl0K",
          "D1ZSTlN5c3RlbVN0YXR1cxIQCghjbGllbnRJRBgBIAEoBRIRCglmcmFtZVJh",
          "dGUYCiABKAISEgoKYXBwRm9jdXNlZBgLIAEoCBIRCglhcHBQYXVzZWQYDCAB",
          "KAgiggEKDFZSTkxvZ0hlYWRlchITCgthY3RpdmVTY2VuZRgBIAEoCRIWCg50",
          "ZWxlcG9ydFRhcmdldBgCIAEoCRITCgtzZXNzaW9uTmFtZRgDIAEoCRIwCgxs",
          "b2dTdGFydFRpbWUYBCABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1w",
          "IjwKDFZSTkxvZ0Zvb3RlchITCgtudW1NZXNzYWdlcxgBIAEoBRIXCg9zZXNz",
          "aW9uRHVyYXRpb24YAiABKAIivAIKC1ZSTkxvZ0V2ZW50Eg8KB2V2ZW50SUQY",
          "ASABKAUSIwoJZXZlbnRUeXBlGAIgASgOMhAuVlJOTG9nRXZlbnRUeXBlEhEK",
          "CXRpbWVzdGFtcBgDIAEoAhIdCghwb3NpdGlvbhgEIAEoCzILLlZSTlZlY3Rv",
          "cjMSIAoIcm90YXRpb24YBSABKAsyDi5WUk5RdWF0ZXJuaW9uEhgKEHBvc2l0",
          "aW9uTWV0YWRhdGEYBiABKAkSJQoKb2JqZWN0VHlwZRgKIAEoDjIRLlZSTkxv",
          "Z09iamVjdFR5cGUSDQoFb2JqSUQYCyABKAwSEgoKb2JqZWN0TmFtZRgMIAEo",
          "CRIWCg5zb3VyY2VQbGF5ZXJJRBgUIAEoBRIWCg50YXJnZXRQbGF5ZXJJRBgV",
          "IAEoBRIPCgdtZXNzYWdlGGQgASgJIksKDVZSTlNvY2tldERhdGESEAoIc29j",
          "a2V0SUQYASABKAkSEAoIb2JqZWN0SUQYBCABKAwSFgoOb2JqZWN0SURTdHJp",
          "bmcYAiABKAkiUgoSVlJOT2JqZWN0SGVsZFN0YXRlEhAKCG9iamVjdElEGAEg",
          "ASgMEhIKCm9iamVjdEhlbGQYAiABKAgSFgoOaGVsZEJ5Q2xpZW50SUQYAyAB",
          "KAUi+AIKClZSTk5QQ0RhdGESFgoOdGFyZ2V0UGxheWVySUQYASABKAUSEgoK",
          "aXNTdGFuZGluZxgCIAEoCBITCgtpc0ZvbGxvd2luZxgDIAEoCBIgCgtucGNQ",
          "b3NpdGlvbhgEIAEoCzILLlZSTlZlY3RvcjMSIwoLbnBjUm90YXRpb24YDiAB",
          "KAsyDi5WUk5RdWF0ZXJuaW9uEiMKDm5hdkRlc3RpbmF0aW9uGA0gASgLMgsu",
          "VlJOVmVjdG9yMxIVCg1hbmltYXRvclN0YXRlGAUgASgFEhAKCGFuaW1UaW1l",
          "GAYgASgCEg8KB3dhbGtpbmcYByABKAgSFQoNYXREZXN0aW5hdGlvbhgIIAEo",
          "CBIPCgdydW5uaW5nGAkgASgIEhEKCWNyb3VjaGluZxgKIAEoCBIWCg5lcXVp",
          "cG1lbnRGbGFncxgPIAEoDRIXCg9Gb3J3YXJkVmVsb2NpdHkYCyABKAISFwoP",
          "TGF0ZXJhbFZlbG9jaXR5GAwgASgCIo4BChVWUk5BdWRpb0NvbGxpc2lvbkRh",
          "dGESHQoIcG9zaXRpb24YASABKAsyCy5WUk5WZWN0b3IzEhEKCWF1ZGlvTmFt",
          "ZRgCIAEoCRIRCgljbGlwSW5kZXgYAyABKAUSEQoJYXVkaW9UeXBlGAQgASgF",
          "Eg4KBnZvbHVtZRgFIAEoAhINCgVwaXRjaBgGIAEoAiIhChFWUk5SYW5kb21T",
          "ZWVkRGF0YRIMCgRzZWVkGAEgASgFIkgKElZSTkhhbGZDdXJ0YWluRGF0YRIP",
          "CgdncmFiYmVkGAEgASgIEiEKDGhhbmdQb3NpdGlvbhgCIAEoCzILLlZSTlZl",
          "Y3RvcjMiWwoQVlJOU3RyZXRjaGVyRGF0YRIRCglucGNBY3RpdmUYASABKAgS",
          "EQoJYmc0QWN0aXZlGAIgASgIEhAKCG5wY0FsaXZlGAMgASgIEg8KB25wY05h",
          "bWUYBCABKAkq+wsKDVZSTlBhY2tldFR5cGUSCwoHVW5rbm93bhAAEg0KCURp",
          "c2NvdmVyeRABEhEKDU5ldE9iamVjdFN5bmMQAhIVChFSZXF1ZXN0V29ybGRT",
          "dGF0ZRADEhYKEk5ldE9iamVjdFN5bmNNdWx0aRAEEhUKEVJlcXVlc3RKb2lu",
          "U2VydmVyEBYSGAoUUmVxdWVzdEpvaW5TcGVjdGF0b3IQFxIWChJSZXF1ZXN0",
          "TmV3UGxheWVySUQQGBIUChBSZXF1ZXN0T3duZXJzaGlwEAUSDwoLU3Bhd25P",
          "YmplY3QQBhIRCg1EZXN0cm95T2JqZWN0EAcSEwoPU3RhdGVEYXRhVXBkYXRl",
          "EAgSFgoSUmVxdWVzdENsaWVudFN0YXRlEBQSFQoRUmVxdWVzdENsaWVudExp",
          "c3QQFRIUChBOZXRPYmplY3RNZXNzYWdlEBkSEQoNUGxheWVyTWVzc2FnZRAa",
          "EhYKElJlcXVlc3RTcGF3bk9iamVjdBAbEhgKFFNldE5ldHdvcmtVcGRhdGVS",
          "YXRlEBwSFwoTQ2FsVmVyaWZpY2F0aW9uRGF0YRAdEhcKE0NhbFZlcmlmaWNh",
          "dGlvblRlc3QQHhIQCgxOZXR3b3JrUmVzZXQQHxIICgRQaW5nECASEAoMUGlu",
          "Z1Jlc3BvbnNlECESDAoIU2V0T3duZXIQZBINCglMb2FkU2NlbmUQZRIPCgtU",
          "ZWxlcG9ydEFsbBBmEhAKDFBsYXllckpvaW5lZBBnEg4KClBsYXllckxlZnQQ",
          "aBITCg9DbGllbnRDb25uZWN0ZWQQaRIWChJDbGllbnREaXNjb25uZWN0ZWQQ",
          "ahIVChFDbGllbnRMb2FkZWRTY2VuZRBrEhgKFFNldFZlbnRWaXN1YWxpemF0",
          "aW9uEGwSEQoNUGxheUF1ZGlvQ2xpcBBtEg4KClJhbmRvbVNlZWQQbhIUCg9T",
          "ZW5kQ2xpZW50U3RhdGUQyAESEwoOU2VuZENsaWVudExpc3QQyQESEwoOU2Vu",
          "ZFBsYXllckxpc3QQygESFgoRU2VuZFNwZWN0YXRvckluZm8QywESEwoOU2Vu",
          "ZEJHNFNpbURhdGEQzAESEgoNU2VuZEFsdFN0YXR1cxDNARIYChNTZW5kQ2Fs",
          "aWJyYXRpb25EYXRhEM4BEhIKDVNlbmRWZW50R3JhcGgQzwESGwoWU2VuZFN5",
          "bWJvbE1hbmFnZXJTdGF0ZRDQARIcChdTZW5kTmV0d29ya2VkT2JqZWN0TGlz",
          "dBDRARIWChFTZW5kQmF0dGVyeVN0YXR1cxDSARIVChBTZW5kU3lzdGVtU3Rh",
          "dHVzENMBEhcKElNlbmRBdWRpb0NvbGxpc2lvbhDUARIWChFWZW50aWxhdGlv",
          "blVwZGF0ZRCtAhIaChVSZXF1ZXN0TWluZUF0bW9zcGhlcmUQrgISFwoSU2Vu",
          "ZE1pbmVBdG1vc3BoZXJlEK8CEhAKC1RleHRNZXNzYWdlEOgHEhUKEEFzc2ln",
          "bkNsaWVudEluZm8Q6QcSEwoOQXNzaWduUGxheWVySUQQ7AcSFQoQQXNzaWdu",
          "UGxheWVyUm9sZRDrBxIRCgxWUlBsYXllckluZm8Q6gcSDQoIVlJTb2NrZXQQ",
          "3AsSGgoVVlJTb2NrZXRBc3NpZ25SZXF1ZXN0EN0LEhUKEFZSU29ja2V0QXNz",
          "aWduZWQQ3gsSGgoVVlJTb2NrZXRWYWNhdGVSZXF1ZXN0EN8LEhMKDlZSU29j",
          "a2V0VmFjYXRlEOALEhsKFlZSUmVxdWVzdFNldEhlbGRTdGF0dXMQwAwSFAoP",
          "VlJTZXRIZWxkU3RhdHVzEMEMEhUKEERpc3NvbmFuY2VQYWNrZXQQ0Q8SDgoJ",
          "TG9nRm9vdGVyELkXEg0KCExvZ0V2ZW50ELoXEhYKEVJlbGF5Q2xpZW50Sm9p",
          "bmVkEKEfEhQKD1JlbGF5Q2xpZW50TGVmdBCiHxIbChZSZWxheUNsaWVudExp",
          "c3RDaGFuZ2VkEKMfEhQKD1JlbGF5Q2xpZW50S2ljaxCkHxIVChBSZWxheUNs",
          "aWVudFN0YXRzEKUfKtwBCg1WUk5QbGF5ZXJSb2xlEg8KC1Vua25vd25Sb2xl",
          "EAASCwoHQ2FwdGFpbhABEgoKBkdhc01hbhACEgoKBk1hcE1hbhADEhAKDFNl",
          "Y29uZEdhc01hbhAEEg8KC1RhaWxDYXB0YWluEAUSCgoGVlJUZWNoEAYSCQoF",
          "QWx0XzEQZRIJCgVBbHRfMhBmEgkKBUFsdF8zEGcSCQoFQWx0XzQQaBIJCgVB",
          "bHRfNRBpEgkKBUFsdF82EGoSCQoFQWx0XzcQaxIJCgVBbHRfOBBsEg4KCUlu",
          "dmlzaWJsZRDoByrUAgoWVlJOUGxheWVyRXF1aXBtZW50VHlwZRIhCh1WUk5Q",
          "bGF5ZXJFcXVpcG1lbnRUeXBlVW5rbm93bhAAEiIKHlZSTlBsYXllckVxdWlw",
          "bWVudFR5cGVHYXNNZXRlchABEicKI1ZSTlBsYXllckVxdWlwbWVudFR5cGVT",
          "b3VuZGluZ1N0aWNrEAISIgoeVlJOUGxheWVyRXF1aXBtZW50VHlwZVNlbnRp",
          "bmVsEAMSHwobVlJOUGxheWVyRXF1aXBtZW50VHlwZUNoYWxrEAQSHwobVlJO",
          "UGxheWVyRXF1aXBtZW50VHlwZVJhZGlvEAUSHQoZVlJOUGxheWVyRXF1aXBt",
          "ZW50VHlwZU1hcBAGEh8KG1ZSTlBsYXllckVxdWlwbWVudFR5cGVTbW9rZRAH",
          "EiQKIFZSTlBsYXllckVxdWlwbWVudFR5cGVMYXNlckNoYWxrEAgqQAoPVlJO",
          "VG9nZ2xlQWN0aW9uEg0KCVRvZ2dsZU9mZhAAEgwKCFRvZ2dsZU9uEAESEAoM",
          "VG9nZ2xlU3dpdGNoEAIqrwcKFFZSTlBsYXllck1lc3NhZ2VUeXBlEg4KClBN",
          "X1Vua25vd24QABIWChJQTV9TZXREb21pbmFudEhhbmQQARIVChFQTV9TZXRC",
          "RzRQcmVzc3VyZRACEhYKElBNX1NpbGVuY2VCRzRBbGFybRADEhUKEVBNX1Jl",
          "c2V0RXF1aXBtZW50EAQSFgoSUE1fVG9nZ2xlRGVidWdNb2RlEAUSGAoUUE1f",
          "VG9nZ2xlVHJhbnNsYXRpb24QBhIVChFQTV9Ub2dnbGVSb3RhdGlvbhAHEhYK",
          "ElBNX1Jlc2V0VG9UZWxlcG9ydBAIEiEKHVBNX1JlY29tcHV0ZUNhbGlicmF0",
          "aW9uT2Zmc2V0EAkSHQoZUE1fUmVzZXRDYWxpYnJhdGlvbk9mZnNldBAKEh0K",
          "GVBNX1NldENhbGlicmF0aW9uUm90YXRpb24QCxIeChpQTV9UdW5lQ2FsaWJy",
          "YXRpb25Sb3RhdGlvbhAMEhoKFlBNX1NldEZsb29yQ2FsaWJyYXRpb24QDRIf",
          "ChtQTV9Ud29Db250cm9sbGVyQ2FsaWJyYXRpb24QDhIZChVQTV9Ub2dnbGVV",
          "c2VyVGVsZXBvcnQQDxIUChBQTV9Gb3JjZUxpbmtMaW5lEBMSEwoPUE1fRGVh",
          "ZmVuUGxheWVyEBQSEQoNUE1fTXV0ZVBsYXllchAVEhAKDFBNX0xfR3JpcF9P",
          "bhAWEhAKDFBNX1JfR3JpcF9PbhAXEhYKElBNX1NldFBsYXllckhlaWdodBAY",
          "EhQKEFBNX1NldFBsYXllck1vZGUQGRIcChhQTV9SZXNldEZsb29yQ2FsaWJy",
          "YXRpb24QGhIXChNQTV9SZXNwYXduRXF1aXBtZW50EBsSFgoSUE1fU2V0TWFz",
          "dGVyVm9sdW1lEGQSHwobUE1fU2V0Q29sbGlzaW9uTWFzdGVyVm9sdW1lEGUS",
          "GgoWUE1fU2V0RmlyZU1hc3RlclZvbHVtZRBmEhkKFVBNX1NldEZvb3RmYWxs",
          "c1ZvbHVtZRBnEhsKF1BNX1NldEZpcmVCdXJuaW5nVm9sdW1lEGgSGgoWUE1f",
          "U2V0RmlyZUV4dGluZ3Vpc2hlZBBpEhoKFlBNX1NldEZpcmVFeHRpbmd1aXNo",
          "ZXIQahIhCh1QTV9TZXRHZW5lcmFsQ29sbGlzaW9uc1ZvbHVtZRBrEiIKHlBN",
          "X1NldFN0cmV0Y2hlckNvbGxpc2lvblZvbHVtZRBsEhwKF1BNX1NldFZlbnRW",
          "aXN1YWxpemF0aW9uEMgBKsIBChBWUk5WUkludGVyYWN0aW9uEgwKCFZSSV9O",
          "b25lEAASEQoNVlJJX0FjdGl2YXRlZBABEhMKD1ZSSV9EZWFjdGl2YXRlZBAC",
          "EhAKDFZSSV9QaWNrZWRVcBADEg8KC1ZSSV9Ecm9wcGVkEAQSHAoYVlJJX1By",
          "aW1hcnlCdXR0b25QcmVzc2VkEAUSHgoaVlJJX1NlY29uZGFyeUJ1dHRvblBy",
          "ZXNzZWQQBhIXChNWUklfSm95c3RpY2tQcmVzc2VkEAcqMQoUVlJOUGFja2V0",
          "RGVzdGluYXRpb24SCgoGRGlyZWN0EAASDQoJQnJvYWRjYXN0EAEqSwoRVlJO",
          "U2NlbmVMb2FkU3RhdGUSCAoETm9uZRAAEgsKB0xvYWRpbmcQARITCg9SZWFk",
          "eVRvQWN0aXZhdGUQAhIKCgZBY3RpdmUQAypaChBWUk5CRzRBbGFybVN0YXRl",
          "EgcKA09mZhAAEgwKCFNpbGVuY2VkEAESFAoQTG93UHJlc3N1cmVBbGFybRAC",
          "EhkKFUNyaXRpY2FsUHJlc3N1cmVBbGFybRADKlIKFFZSTkNhbGlicmF0aW9u",
          "U291cmNlEgsKB0NhbEhlYWQQABIWChJDYWxSaWdodENvbnRyb2xsZXIQARIV",
          "ChFDYWxMZWZ0Q29udHJvbGxlchACKosBChBWUk5WZW50VmlzRWZmZWN0EhgK",
          "FFZSTlZlbnRWaXNFZmZlY3ROb25lEAASGgoWVlJOVmVudFZpc0VmZmVjdEFy",
          "cm93cxABEiUKIVZSTlZlbnRWaXNFZmZlY3RGaXJzdFBlcnNvbkFycm93cxAC",
          "EhoKFlZSTlZlbnRWaXNFZmZlY3RUcmFpbHMQAyqBAQoPVlJOVmVudFZpc0Nv",
          "bG9yEhcKE1ZSTlZlbnRWaXNDb2xvck5vbmUQABIZChVWUk5WZW50VmlzQ29s",
          "b3JDb250YW0QARIaChZWUk5WZW50VmlzQ29sb3JNZXRoYW5lEAISHgoaVlJO",
          "VmVudFZpc0NvbG9yVGVtcGVyYXR1cmUQAyqhCwoPVlJOTG9nRXZlbnRUeXBl",
          "EhoKFlZSTkxvZ0V2ZW50VHlwZU1lc3NhZ2UQABIcChhWUk5Mb2dFdmVudFR5",
          "cGVQaWNrdXBPYmoQChIaChZWUk5Mb2dFdmVudFR5cGVEcm9wT2JqEAsSIQod",
          "VlJOTG9nRXZlbnRUeXBlTGlua0xpbmVBdHRhY2gQDBIhCh1WUk5Mb2dFdmVu",
          "dFR5cGVMaW5rTGluZURldGFjaBANEiEKHVZSTkxvZ0V2ZW50VHlwZURhdGVB",
          "bmRJbml0aWFsEBQSGwoXVlJOTG9nRXZlbnRUeXBlRG9vck9wZW4QHhIcChhW",
          "Uk5Mb2dFdmVudFR5cGVEb29yQ2xvc2UQHxIcChhWUk5Mb2dFdmVudFR5cGVE",
          "b29yS25vY2sQIBIcChhWUk5Mb2dFdmVudFR5cGVSb29mQ2hlY2sQKBIbChdW",
          "Uk5Mb2dFdmVudFR5cGVSaWJDaGVjaxApEiIKHlZSTkxvZ0V2ZW50VHlwZUN1",
          "cnRhaW5IYWxmSGFuZxAyEiIKHlZSTkxvZ0V2ZW50VHlwZUN1cnRhaW5GdWxs",
          "SGFuZxAzEiAKHFZSTkxvZ0V2ZW50VHlwZUN1cnRhaW5SZW1vdmUQNRIoCiRW",
          "Uk5Mb2dFdmVudFR5cGVSb2xsZWRDdXJ0YWluUGlja2VkVXAQNhInCiNWUk5M",
          "b2dFdmVudFR5cGVSb2xsZWRDdXJ0YWluRHJvcHBlZBA3EhsKF1ZSTkxvZ0V2",
          "ZW50VHlwZUdhc0NoZWNrEDwSIgoeVlJOTG9nRXZlbnRUeXBlU2VudGluZWxJ",
          "bnNwZWN0ED0SHgoaVlJOTG9nRXZlbnRUeXBlRmlyZVN0YXJ0ZWQQRhIjCh9W",
          "Uk5Mb2dFdmVudFR5cGVGaXJlRXh0aW5ndWlzaGVkEEcSLAooVlJOTG9nRXZl",
          "bnRUeXBlRmlyZUV4dGluZ3Vpc2hlckRpc2NoYXJnZRBIEisKJ1ZSTkxvZ0V2",
          "ZW50VHlwZUZpcmVFeHRpbmd1aXNoZXJQaWNrZWRVcBBJEioKJlZSTkxvZ0V2",
          "ZW50VHlwZUZpcmVFeHRpbmd1aXNoZXJEcm9wcGVkEEoSIQodVlJOTG9nRXZl",
          "bnRUeXBlTlBDU3RhcnRGb2xsb3cQUBIgChxWUk5Mb2dFdmVudFR5cGVOUENT",
          "dG9wRm9sbG93EFESIgoeVlJOTG9nRXZlbnRUeXBlTlBDU3RhdHVzVXBkYXRl",
          "EFISHgoaVlJOTG9nRXZlbnRUeXBlU2VudGluZWxMb3cQUxIgChxWUk5Mb2dF",
          "dmVudFR5cGVTZW50aW5lbEVtcHR5EFQSHAoYVlJOTG9nRXZlbnRUeXBlU21v",
          "a2VUdWJlEFoSHgoaVlJOTG9nRXZlbnRUeXBlUG9zdEluc3RhbGwQZBIeChpW",
          "Uk5Mb2dFdmVudFR5cGVQb3N0UmVtb3ZlZBBlEiIKHVZSTkxvZ0V2ZW50VHlw",
          "ZUVxdWlwbWVudEFkZGVkEMgBEiQKH1ZSTkxvZ0V2ZW50VHlwZUVxdWlwbWVu",
          "dFJlbW92ZWQQyQESKAojVlJOTG9nRXZlbnRUeXBlTlBDUGxhY2VkT25TdHJl",
          "dGNoZXIQrAISKwomVlJOTG9nRXZlbnRUeXBlTlBDUmVtb3ZlZEZyb21TdHJl",
          "dGNoZXIQrQISIQocVlJOTG9nRXZlbnRUeXBlTWluZUV4cGxvc2lvbhCQAxIh",
          "ChxWUk5Mb2dFdmVudFR5cGVab25lVmlvbGF0aW9uEJEDEhwKF1ZSTkxvZ0V2",
          "ZW50VHlwZURNQWN0aW9uEOgHEiEKHFZSTkxvZ0V2ZW50VHlwZURNU3Bhd25P",
          "YmplY3QQ6QcSHAoXVlJOTG9nRXZlbnRUeXBlTlBDRGVhdGgQ6gcSIgodVlJO",
          "TG9nRXZlbnRUeXBlTlBDVW5jb25zY2lvdXMQ6wcq6AIKEFZSTkxvZ09iamVj",
          "dFR5cGUSGwoXVlJOTG9nT2JqZWN0VHlwZVVua25vd24QABIbChdWUk5Mb2dP",
          "YmplY3RUeXBlR2VuZXJpYxABEiQKIFZSTkxvZ09iamVjdFR5cGVGaXJlRXh0",
          "aW5ndWlzaGVyEAISGwoXVlJOTG9nT2JqZWN0VHlwZUN1cnRhaW4QAxIcChhW",
          "Uk5Mb2dPYmplY3RUeXBlR2FzTWV0ZXIQBBIcChhWUk5Mb2dPYmplY3RUeXBl",
          "U2VudGluZWwQBRIZChVWUk5Mb2dPYmplY3RUeXBlQ2hhbGsQBhIhCh1WUk5M",
          "b2dPYmplY3RUeXBlU291bmRpbmdTdGljaxAHEiUKIVZSTkxvZ09iamVjdFR5",
          "cGVMaW5rTGluZUNhcmFiaW5lchAIEh0KGVZSTkxvZ09iamVjdFR5cGVTbW9r",
          "ZVR1YmUQCRIXChNWUk5Mb2dPYmplY3RUeXBlQkc0EApiBnByb3RvMw=="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, },
        new pbr::GeneratedClrTypeInfo(new[] {typeof(global::VRNPacketType), typeof(global::VRNPlayerRole), typeof(global::VRNPlayerEquipmentType), typeof(global::VRNToggleAction), typeof(global::VRNPlayerMessageType), typeof(global::VRNVRInteraction), typeof(global::VRNPacketDestination), typeof(global::VRNSceneLoadState), typeof(global::VRNBG4AlarmState), typeof(global::VRNCalibrationSource), typeof(global::VRNVentVisEffect), typeof(global::VRNVentVisColor), typeof(global::VRNLogEventType), typeof(global::VRNLogObjectType), }, null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::VRNQuaternion), global::VRNQuaternion.Parser, new[]{ "W", "X", "Y", "Z" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::VRNVector3), global::VRNVector3.Parser, new[]{ "X", "Y", "Z" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::VRNVector2), global::VRNVector2.Parser, new[]{ "X", "Y" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::VRNColor), global::VRNColor.Parser, new[]{ "R", "G", "B" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::VRNHeader), global::VRNHeader.Parser, new[]{ "PacketType", "PacketDest", "Message", "TickCount", "ServerTime", "RpcID", "DestClientID", "PacketSize", "FromClientID" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::VRNRelayClientInfo), global::VRNRelayClientInfo.Parser, new[]{ "ClientID", "IpAddress" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::VRNRelayClientList), global::VRNRelayClientList.Parser, new[]{ "ClientList" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::VRNClientStats), global::VRNClientStats.Parser, new[]{ "ClientID", "ConnectTime", "AvgBitRate", "AvgPingRTT", "ReliablePipelineRTT", "ReliablePipelineRTTVar", "ReliableSendQueueCount" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::VRNRelayClientStatsList), global::VRNRelayClientStatsList.Parser, new[]{ "ClientStats" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::VRNNetObjMessage), global::VRNNetObjMessage.Parser, new[]{ "ObjID", "MessageType" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::VRNAntilatencyStatus), global::VRNAntilatencyStatus.Parser, new[]{ "ClientID", "PlayerID", "StatusText" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::VRNPingResponse), global::VRNPingResponse.Parser, new[]{ "ClientID" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::VRNPlayerMessage), global::VRNPlayerMessage.Parser, new[]{ "PlayerID", "MessageType", "TextData", "FloatData", "IntData", "BoolData", "Vec2Data", "Vec3Data", "QuaternionData", "Bg4Data" }, new[]{ "PlayerMessageData" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::VRNMsgDamageFire), global::VRNMsgDamageFire.Parser, new[]{ "DmgAmount", "PlayerID" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::VRNDiscovery), global::VRNDiscovery.Parser, new[]{ "ServerName", "Notes" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::VRNRequestWorldState), global::VRNRequestWorldState.Parser, new[]{ "ClientID" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::VRNCalibrationOffsetData), global::VRNCalibrationOffsetData.Parser, new[]{ "ClientID", "PlayerID", "OffsetPos", "OffsetRot" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::VRNCalVerificationData), global::VRNCalVerificationData.Parser, new[]{ "ClientID", "PlayerID", "ReferencePoint", "VerificationPoint" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::VRNStateDataUpdate), global::VRNStateDataUpdate.Parser, new[]{ "StateID", "ClientIDSource", "StateData" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::VRNNetObjSyncMulti), global::VRNNetObjSyncMulti.Parser, new[]{ "NumObjectSyncs" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::VRNNetObjSync), global::VRNNetObjSync.Parser, new[]{ "ObjID", "OwnerID" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::VRNLinkLineSyncData), global::VRNLinkLineSyncData.Parser, new[]{ "PlayerSource", "Clipped" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::VRNPhysicsSyncData), global::VRNPhysicsSyncData.Parser, new[]{ "Position", "Rotation", "Velocity", "AngularVelocity", "IsKinematic", "UseGravity" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::VRNLaserPointerState), global::VRNLaserPointerState.Parser, new[]{ "IsLaserEnabled", "LaserMode", "LaserActivationLevel" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::VRNInteractionData), global::VRNInteractionData.Parser, new[]{ "Interaction" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::VRNRequestJoinWorld), global::VRNRequestJoinWorld.Parser, new[]{ "PlayerName" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::VRNRequestJoinServer), global::VRNRequestJoinServer.Parser, new[]{ "ClientName" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::VRNRequestNewPlayerID), global::VRNRequestNewPlayerID.Parser, new[]{ "ClientID", "PlayerName" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::VRNRequestOwnership), global::VRNRequestOwnership.Parser, new[]{ "ObjID", "ClientID" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::VRNRequestMineAtmosphere), global::VRNRequestMineAtmosphere.Parser, new[]{ "Position" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::VRNSendMineAtmosphere), global::VRNSendMineAtmosphere.Parser, new[]{ "Position", "Oxygen", "CarbonMonoxide", "Methane", "HydrogenSulfide" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::VRNSpawnObject), global::VRNSpawnObject.Parser, new[]{ "ObjID", "OwnerID", "AssetID", "SpawnActivated", "StartPosition", "SceneID", "OwnerExclusive" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::VRNNetworkUpdateRate), global::VRNNetworkUpdateRate.Parser, new[]{ "ObjectUpdateRate", "VRUpdateRate" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::VRNNetworkedObjectList), global::VRNNetworkedObjectList.Parser, new[]{ "SceneID", "ObjectList", "DestroyedSceneObjects" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::VRNDestroyObject), global::VRNDestroyObject.Parser, new[]{ "ObjID" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::VRNSetOwner), global::VRNSetOwner.Parser, new[]{ "ObjID", "OwnerClientID" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::VRNAssignClientInfo), global::VRNAssignClientInfo.Parser, new[]{ "ClientID" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::VRNAssignPlayerID), global::VRNAssignPlayerID.Parser, new[]{ "ClientID", "PlayerID" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::VRNAssignPlayerRole), global::VRNAssignPlayerRole.Parser, new[]{ "PlayerID", "Role", "LeftHandDominant" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::VRNTransformData), global::VRNTransformData.Parser, new[]{ "Rotation", "Position" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::VRNTextMessage), global::VRNTextMessage.Parser, new[]{ "Message" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::VRNFloatData), global::VRNFloatData.Parser, new[]{ "FloatData" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::VRNBoolData), global::VRNBoolData.Parser, new[]{ "BoolData" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::VRNPlayerList), global::VRNPlayerList.Parser, new[]{ "PlayerList" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::VRNVRPlayerInfo), global::VRNVRPlayerInfo.Parser, new[]{ "ClientID", "PlayerID", "Name", "Role", "OnLinkLine", "Head", "LeftController", "RightController", "LeftControllerTracked", "RightControllerTracked", "RigOffset", "PlayerHeight", "LeftGrip", "RightGrip", "PlayerMode" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::VRNBG4SimData), global::VRNBG4SimData.Parser, new[]{ "ClientID", "PlayerID", "AlarmState", "OxygenPressure", "BaselinePressure", "RemainingTime", "LowPressure", "CriticalPressure", "OxygenCylOpen" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::VRNSentinelInfo), global::VRNSentinelInfo.Parser, new[]{ "PlayerID", "Pressure" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::VRNSpectatorInfo), global::VRNSpectatorInfo.Parser, new[]{ "ClientID", "IpAddress", "Name" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::VRNLoadScene), global::VRNLoadScene.Parser, new[]{ "SceneName", "AllowSceneActivation", "SceneID" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::VRNClientConnectionStatus), global::VRNClientConnectionStatus.Parser, new[]{ "ClientID", "Connected" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::VRNClientState), global::VRNClientState.Parser, new[]{ "ClientID", "PlayerName", "SceneLoadState", "SceneName" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::VRNActivationState), global::VRNActivationState.Parser, new[]{ "Activated", "ActivatationLevel" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::VRNTeleportAll), global::VRNTeleportAll.Parser, new[]{ "TeleportTarget", "TeleportTime" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::VRNSimState), global::VRNSimState.Parser, new[]{ "ActiveScene", "TeleportTarget", "ActiveSceneID" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::VRNSymbolManagerState), global::VRNSymbolManagerState.Parser, new[]{ "SymbolManagerName", "Symbols", "SymbolManagerID", "PlayerID", "ClientID" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::VRNSymbolData), global::VRNSymbolData.Parser, new[]{ "SymbolID", "SymbolClass", "Addressable", "Size", "Color", "IgnoreRotation", "SpanEntry", "PreserveAspect", "SymbolText", "WorldPosition", "WorldRotation", "SymbolData" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::VRNDissonancePacket), global::VRNDissonancePacket.Parser, new[]{ "ClientID", "DissonanceData" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::VRNVentVisualization), global::VRNVentVisualization.Parser, new[]{ "ToggleAction", "VisEffectPrefab", "VisData", "VisEnabledDM", "VisEnabledPlayer", "VisEnabledSpectator" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::VRNVentGraph), global::VRNVentGraph.Parser, new[]{ "Junctions", "Airways", "Fires" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::VRNVentJunction), global::VRNVentJunction.Parser, new[]{ "JunctionID", "MFireID", "IsStartJunction", "IsInAtmosphere", "WorldPosition", "CH4Concentration", "TotalAirFlow", "TotalContaminant", "TotalCH4", "ContamConcentration", "TemperatureInter", "TotalHeat", "ConditionChanged", "Temperature", "Elevation", "CH4InitialConc", "AtmosphereJuncType", "AtmosphereTemperature" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::VRNVentAirway), global::VRNVentAirway.Parser, new[]{ "AirwayID", "MFireID", "Resistance", "AddedResistance", "ControlResistance", "CH4EmissionRate", "StartJunction", "EndJunction", "CrossSectionalArea", "FlowDirection", "FlowRate", "FrictionFactor", "Length", "Perimeter", "RockTemperature", "ThermalConductivity", "ThermalDefusivity", "Type", "OverrideResistance" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::VRNVentFire), global::VRNVentFire.Parser, new[]{ "FireID", "MFireID", "AirwayID", "WorldPosition" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::VRNFireStatus), global::VRNFireStatus.Parser, new[]{ "FireHealth", "PlayerID" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::VRNFireExtinguisherStatus), global::VRNFireExtinguisherStatus.Parser, new[]{ "PercentFull", "IsActive" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::VRNBatteryStatus), global::VRNBatteryStatus.Parser, new[]{ "ClientID", "StatusMessage" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::VRNSystemStatus), global::VRNSystemStatus.Parser, new[]{ "ClientID", "FrameRate", "AppFocused", "AppPaused" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::VRNLogHeader), global::VRNLogHeader.Parser, new[]{ "ActiveScene", "TeleportTarget", "SessionName", "LogStartTime" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::VRNLogFooter), global::VRNLogFooter.Parser, new[]{ "NumMessages", "SessionDuration" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::VRNLogEvent), global::VRNLogEvent.Parser, new[]{ "EventID", "EventType", "Timestamp", "Position", "Rotation", "PositionMetadata", "ObjectType", "ObjID", "ObjectName", "SourcePlayerID", "TargetPlayerID", "Message" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::VRNSocketData), global::VRNSocketData.Parser, new[]{ "SocketID", "ObjectID", "ObjectIDString" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::VRNObjectHeldState), global::VRNObjectHeldState.Parser, new[]{ "ObjectID", "ObjectHeld", "HeldByClientID" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::VRNNPCData), global::VRNNPCData.Parser, new[]{ "TargetPlayerID", "IsStanding", "IsFollowing", "NpcPosition", "NpcRotation", "NavDestination", "AnimatorState", "AnimTime", "Walking", "AtDestination", "Running", "Crouching", "EquipmentFlags", "ForwardVelocity", "LateralVelocity" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::VRNAudioCollisionData), global::VRNAudioCollisionData.Parser, new[]{ "Position", "AudioName", "ClipIndex", "AudioType", "Volume", "Pitch" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::VRNRandomSeedData), global::VRNRandomSeedData.Parser, new[]{ "Seed" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::VRNHalfCurtainData), global::VRNHalfCurtainData.Parser, new[]{ "Grabbed", "HangPosition" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::VRNStretcherData), global::VRNStretcherData.Parser, new[]{ "NpcActive", "Bg4Active", "NpcAlive", "NpcName" }, null, null, null, null)
        }));
  }
  #endregion

}
#region Enums
public enum VRNPacketType {
  [pbr::OriginalName("Unknown")] Unknown = 0,
  [pbr::OriginalName("Discovery")] Discovery = 1,
  [pbr::OriginalName("NetObjectSync")] NetObjectSync = 2,
  [pbr::OriginalName("RequestWorldState")] RequestWorldState = 3,
  [pbr::OriginalName("NetObjectSyncMulti")] NetObjectSyncMulti = 4,
  /// <summary>
  ///RequestJoinWorld = 4;
  /// </summary>
  [pbr::OriginalName("RequestJoinServer")] RequestJoinServer = 22,
  [pbr::OriginalName("RequestJoinSpectator")] RequestJoinSpectator = 23,
  [pbr::OriginalName("RequestNewPlayerID")] RequestNewPlayerId = 24,
  [pbr::OriginalName("RequestOwnership")] RequestOwnership = 5,
  [pbr::OriginalName("SpawnObject")] SpawnObject = 6,
  [pbr::OriginalName("DestroyObject")] DestroyObject = 7,
  [pbr::OriginalName("StateDataUpdate")] StateDataUpdate = 8,
  [pbr::OriginalName("RequestClientState")] RequestClientState = 20,
  [pbr::OriginalName("RequestClientList")] RequestClientList = 21,
  [pbr::OriginalName("NetObjectMessage")] NetObjectMessage = 25,
  [pbr::OriginalName("PlayerMessage")] PlayerMessage = 26,
  [pbr::OriginalName("RequestSpawnObject")] RequestSpawnObject = 27,
  [pbr::OriginalName("SetNetworkUpdateRate")] SetNetworkUpdateRate = 28,
  [pbr::OriginalName("CalVerificationData")] CalVerificationData = 29,
  [pbr::OriginalName("CalVerificationTest")] CalVerificationTest = 30,
  [pbr::OriginalName("NetworkReset")] NetworkReset = 31,
  [pbr::OriginalName("Ping")] Ping = 32,
  [pbr::OriginalName("PingResponse")] PingResponse = 33,
  [pbr::OriginalName("SetOwner")] SetOwner = 100,
  [pbr::OriginalName("LoadScene")] LoadScene = 101,
  [pbr::OriginalName("TeleportAll")] TeleportAll = 102,
  [pbr::OriginalName("PlayerJoined")] PlayerJoined = 103,
  [pbr::OriginalName("PlayerLeft")] PlayerLeft = 104,
  [pbr::OriginalName("ClientConnected")] ClientConnected = 105,
  [pbr::OriginalName("ClientDisconnected")] ClientDisconnected = 106,
  [pbr::OriginalName("ClientLoadedScene")] ClientLoadedScene = 107,
  [pbr::OriginalName("SetVentVisualization")] SetVentVisualization = 108,
  [pbr::OriginalName("PlayAudioClip")] PlayAudioClip = 109,
  [pbr::OriginalName("RandomSeed")] RandomSeed = 110,
  [pbr::OriginalName("SendClientState")] SendClientState = 200,
  [pbr::OriginalName("SendClientList")] SendClientList = 201,
  [pbr::OriginalName("SendPlayerList")] SendPlayerList = 202,
  [pbr::OriginalName("SendSpectatorInfo")] SendSpectatorInfo = 203,
  [pbr::OriginalName("SendBG4SimData")] SendBg4SimData = 204,
  [pbr::OriginalName("SendAltStatus")] SendAltStatus = 205,
  [pbr::OriginalName("SendCalibrationData")] SendCalibrationData = 206,
  [pbr::OriginalName("SendVentGraph")] SendVentGraph = 207,
  [pbr::OriginalName("SendSymbolManagerState")] SendSymbolManagerState = 208,
  [pbr::OriginalName("SendNetworkedObjectList")] SendNetworkedObjectList = 209,
  [pbr::OriginalName("SendBatteryStatus")] SendBatteryStatus = 210,
  [pbr::OriginalName("SendSystemStatus")] SendSystemStatus = 211,
  [pbr::OriginalName("SendAudioCollision")] SendAudioCollision = 212,
  [pbr::OriginalName("VentilationUpdate")] VentilationUpdate = 301,
  [pbr::OriginalName("RequestMineAtmosphere")] RequestMineAtmosphere = 302,
  [pbr::OriginalName("SendMineAtmosphere")] SendMineAtmosphere = 303,
  [pbr::OriginalName("TextMessage")] TextMessage = 1000,
  [pbr::OriginalName("AssignClientInfo")] AssignClientInfo = 1001,
  [pbr::OriginalName("AssignPlayerID")] AssignPlayerId = 1004,
  [pbr::OriginalName("AssignPlayerRole")] AssignPlayerRole = 1003,
  [pbr::OriginalName("VRPlayerInfo")] VrplayerInfo = 1002,
  [pbr::OriginalName("VRSocket")] Vrsocket = 1500,
  [pbr::OriginalName("VRSocketAssignRequest")] VrsocketAssignRequest = 1501,
  [pbr::OriginalName("VRSocketAssigned")] VrsocketAssigned = 1502,
  [pbr::OriginalName("VRSocketVacateRequest")] VrsocketVacateRequest = 1503,
  [pbr::OriginalName("VRSocketVacate")] VrsocketVacate = 1504,
  [pbr::OriginalName("VRRequestSetHeldStatus")] VrrequestSetHeldStatus = 1600,
  [pbr::OriginalName("VRSetHeldStatus")] VrsetHeldStatus = 1601,
  [pbr::OriginalName("DissonancePacket")] DissonancePacket = 2001,
  [pbr::OriginalName("LogFooter")] LogFooter = 3001,
  [pbr::OriginalName("LogEvent")] LogEvent = 3002,
  [pbr::OriginalName("RelayClientJoined")] RelayClientJoined = 4001,
  [pbr::OriginalName("RelayClientLeft")] RelayClientLeft = 4002,
  [pbr::OriginalName("RelayClientListChanged")] RelayClientListChanged = 4003,
  [pbr::OriginalName("RelayClientKick")] RelayClientKick = 4004,
  [pbr::OriginalName("RelayClientStats")] RelayClientStats = 4005,
}

public enum VRNPlayerRole {
  [pbr::OriginalName("UnknownRole")] UnknownRole = 0,
  [pbr::OriginalName("Captain")] Captain = 1,
  [pbr::OriginalName("GasMan")] GasMan = 2,
  [pbr::OriginalName("MapMan")] MapMan = 3,
  [pbr::OriginalName("SecondGasMan")] SecondGasMan = 4,
  [pbr::OriginalName("TailCaptain")] TailCaptain = 5,
  [pbr::OriginalName("VRTech")] Vrtech = 6,
  [pbr::OriginalName("Alt_1")] Alt1 = 101,
  [pbr::OriginalName("Alt_2")] Alt2 = 102,
  [pbr::OriginalName("Alt_3")] Alt3 = 103,
  [pbr::OriginalName("Alt_4")] Alt4 = 104,
  [pbr::OriginalName("Alt_5")] Alt5 = 105,
  [pbr::OriginalName("Alt_6")] Alt6 = 106,
  [pbr::OriginalName("Alt_7")] Alt7 = 107,
  [pbr::OriginalName("Alt_8")] Alt8 = 108,
  [pbr::OriginalName("Invisible")] Invisible = 1000,
}

public enum VRNPlayerEquipmentType {
  [pbr::OriginalName("VRNPlayerEquipmentTypeUnknown")] Unknown = 0,
  [pbr::OriginalName("VRNPlayerEquipmentTypeGasMeter")] GasMeter = 1,
  [pbr::OriginalName("VRNPlayerEquipmentTypeSoundingStick")] SoundingStick = 2,
  [pbr::OriginalName("VRNPlayerEquipmentTypeSentinel")] Sentinel = 3,
  [pbr::OriginalName("VRNPlayerEquipmentTypeChalk")] Chalk = 4,
  [pbr::OriginalName("VRNPlayerEquipmentTypeRadio")] Radio = 5,
  [pbr::OriginalName("VRNPlayerEquipmentTypeMap")] Map = 6,
  [pbr::OriginalName("VRNPlayerEquipmentTypeSmoke")] Smoke = 7,
  [pbr::OriginalName("VRNPlayerEquipmentTypeLaserChalk")] LaserChalk = 8,
}

public enum VRNToggleAction {
  [pbr::OriginalName("ToggleOff")] ToggleOff = 0,
  [pbr::OriginalName("ToggleOn")] ToggleOn = 1,
  [pbr::OriginalName("ToggleSwitch")] ToggleSwitch = 2,
}

public enum VRNPlayerMessageType {
  [pbr::OriginalName("PM_Unknown")] PmUnknown = 0,
  [pbr::OriginalName("PM_SetDominantHand")] PmSetDominantHand = 1,
  [pbr::OriginalName("PM_SetBG4Pressure")] PmSetBg4Pressure = 2,
  [pbr::OriginalName("PM_SilenceBG4Alarm")] PmSilenceBg4Alarm = 3,
  [pbr::OriginalName("PM_ResetEquipment")] PmResetEquipment = 4,
  [pbr::OriginalName("PM_ToggleDebugMode")] PmToggleDebugMode = 5,
  [pbr::OriginalName("PM_ToggleTranslation")] PmToggleTranslation = 6,
  [pbr::OriginalName("PM_ToggleRotation")] PmToggleRotation = 7,
  [pbr::OriginalName("PM_ResetToTeleport")] PmResetToTeleport = 8,
  [pbr::OriginalName("PM_RecomputeCalibrationOffset")] PmRecomputeCalibrationOffset = 9,
  [pbr::OriginalName("PM_ResetCalibrationOffset")] PmResetCalibrationOffset = 10,
  [pbr::OriginalName("PM_SetCalibrationRotation")] PmSetCalibrationRotation = 11,
  [pbr::OriginalName("PM_TuneCalibrationRotation")] PmTuneCalibrationRotation = 12,
  [pbr::OriginalName("PM_SetFloorCalibration")] PmSetFloorCalibration = 13,
  [pbr::OriginalName("PM_TwoControllerCalibration")] PmTwoControllerCalibration = 14,
  [pbr::OriginalName("PM_ToggleUserTeleport")] PmToggleUserTeleport = 15,
  [pbr::OriginalName("PM_ForceLinkLine")] PmForceLinkLine = 19,
  [pbr::OriginalName("PM_DeafenPlayer")] PmDeafenPlayer = 20,
  [pbr::OriginalName("PM_MutePlayer")] PmMutePlayer = 21,
  [pbr::OriginalName("PM_L_Grip_On")] PmLGripOn = 22,
  [pbr::OriginalName("PM_R_Grip_On")] PmRGripOn = 23,
  [pbr::OriginalName("PM_SetPlayerHeight")] PmSetPlayerHeight = 24,
  [pbr::OriginalName("PM_SetPlayerMode")] PmSetPlayerMode = 25,
  [pbr::OriginalName("PM_ResetFloorCalibration")] PmResetFloorCalibration = 26,
  [pbr::OriginalName("PM_RespawnEquipment")] PmRespawnEquipment = 27,
  [pbr::OriginalName("PM_SetMasterVolume")] PmSetMasterVolume = 100,
  [pbr::OriginalName("PM_SetCollisionMasterVolume")] PmSetCollisionMasterVolume = 101,
  [pbr::OriginalName("PM_SetFireMasterVolume")] PmSetFireMasterVolume = 102,
  [pbr::OriginalName("PM_SetFootfallsVolume")] PmSetFootfallsVolume = 103,
  [pbr::OriginalName("PM_SetFireBurningVolume")] PmSetFireBurningVolume = 104,
  [pbr::OriginalName("PM_SetFireExtinguished")] PmSetFireExtinguished = 105,
  [pbr::OriginalName("PM_SetFireExtinguisher")] PmSetFireExtinguisher = 106,
  [pbr::OriginalName("PM_SetGeneralCollisionsVolume")] PmSetGeneralCollisionsVolume = 107,
  [pbr::OriginalName("PM_SetStretcherCollisionVolume")] PmSetStretcherCollisionVolume = 108,
  [pbr::OriginalName("PM_SetVentVisualization")] PmSetVentVisualization = 200,
}

public enum VRNVRInteraction {
  [pbr::OriginalName("VRI_None")] VriNone = 0,
  [pbr::OriginalName("VRI_Activated")] VriActivated = 1,
  [pbr::OriginalName("VRI_Deactivated")] VriDeactivated = 2,
  [pbr::OriginalName("VRI_PickedUp")] VriPickedUp = 3,
  [pbr::OriginalName("VRI_Dropped")] VriDropped = 4,
  [pbr::OriginalName("VRI_PrimaryButtonPressed")] VriPrimaryButtonPressed = 5,
  [pbr::OriginalName("VRI_SecondaryButtonPressed")] VriSecondaryButtonPressed = 6,
  [pbr::OriginalName("VRI_JoystickPressed")] VriJoystickPressed = 7,
}

public enum VRNPacketDestination {
  [pbr::OriginalName("Direct")] Direct = 0,
  [pbr::OriginalName("Broadcast")] Broadcast = 1,
}

public enum VRNSceneLoadState {
  [pbr::OriginalName("None")] None = 0,
  [pbr::OriginalName("Loading")] Loading = 1,
  [pbr::OriginalName("ReadyToActivate")] ReadyToActivate = 2,
  [pbr::OriginalName("Active")] Active = 3,
}

public enum VRNBG4AlarmState {
  [pbr::OriginalName("Off")] Off = 0,
  [pbr::OriginalName("Silenced")] Silenced = 1,
  [pbr::OriginalName("LowPressureAlarm")] LowPressureAlarm = 2,
  [pbr::OriginalName("CriticalPressureAlarm")] CriticalPressureAlarm = 3,
}

public enum VRNCalibrationSource {
  [pbr::OriginalName("CalHead")] CalHead = 0,
  [pbr::OriginalName("CalRightController")] CalRightController = 1,
  [pbr::OriginalName("CalLeftController")] CalLeftController = 2,
}

public enum VRNVentVisEffect {
  [pbr::OriginalName("VRNVentVisEffectNone")] None = 0,
  [pbr::OriginalName("VRNVentVisEffectArrows")] Arrows = 1,
  [pbr::OriginalName("VRNVentVisEffectFirstPersonArrows")] FirstPersonArrows = 2,
  [pbr::OriginalName("VRNVentVisEffectTrails")] Trails = 3,
}

public enum VRNVentVisColor {
  [pbr::OriginalName("VRNVentVisColorNone")] None = 0,
  [pbr::OriginalName("VRNVentVisColorContam")] Contam = 1,
  [pbr::OriginalName("VRNVentVisColorMethane")] Methane = 2,
  [pbr::OriginalName("VRNVentVisColorTemperature")] Temperature = 3,
}

public enum VRNLogEventType {
  [pbr::OriginalName("VRNLogEventTypeMessage")] Message = 0,
  [pbr::OriginalName("VRNLogEventTypePickupObj")] PickupObj = 10,
  [pbr::OriginalName("VRNLogEventTypeDropObj")] DropObj = 11,
  [pbr::OriginalName("VRNLogEventTypeLinkLineAttach")] LinkLineAttach = 12,
  [pbr::OriginalName("VRNLogEventTypeLinkLineDetach")] LinkLineDetach = 13,
  [pbr::OriginalName("VRNLogEventTypeDateAndInitial")] DateAndInitial = 20,
  [pbr::OriginalName("VRNLogEventTypeDoorOpen")] DoorOpen = 30,
  [pbr::OriginalName("VRNLogEventTypeDoorClose")] DoorClose = 31,
  [pbr::OriginalName("VRNLogEventTypeDoorKnock")] DoorKnock = 32,
  [pbr::OriginalName("VRNLogEventTypeRoofCheck")] RoofCheck = 40,
  [pbr::OriginalName("VRNLogEventTypeRibCheck")] RibCheck = 41,
  [pbr::OriginalName("VRNLogEventTypeCurtainHalfHang")] CurtainHalfHang = 50,
  [pbr::OriginalName("VRNLogEventTypeCurtainFullHang")] CurtainFullHang = 51,
  /// <summary>
  ///VRNLogEventTypeCurtainDrop = 52;
  /// </summary>
  [pbr::OriginalName("VRNLogEventTypeCurtainRemove")] CurtainRemove = 53,
  [pbr::OriginalName("VRNLogEventTypeRolledCurtainPickedUp")] RolledCurtainPickedUp = 54,
  [pbr::OriginalName("VRNLogEventTypeRolledCurtainDropped")] RolledCurtainDropped = 55,
  [pbr::OriginalName("VRNLogEventTypeGasCheck")] GasCheck = 60,
  [pbr::OriginalName("VRNLogEventTypeSentinelInspect")] SentinelInspect = 61,
  [pbr::OriginalName("VRNLogEventTypeFireStarted")] FireStarted = 70,
  [pbr::OriginalName("VRNLogEventTypeFireExtinguished")] FireExtinguished = 71,
  [pbr::OriginalName("VRNLogEventTypeFireExtinguisherDischarge")] FireExtinguisherDischarge = 72,
  [pbr::OriginalName("VRNLogEventTypeFireExtinguisherPickedUp")] FireExtinguisherPickedUp = 73,
  [pbr::OriginalName("VRNLogEventTypeFireExtinguisherDropped")] FireExtinguisherDropped = 74,
  [pbr::OriginalName("VRNLogEventTypeNPCStartFollow")] NpcstartFollow = 80,
  [pbr::OriginalName("VRNLogEventTypeNPCStopFollow")] NpcstopFollow = 81,
  [pbr::OriginalName("VRNLogEventTypeNPCStatusUpdate")] NpcstatusUpdate = 82,
  [pbr::OriginalName("VRNLogEventTypeSentinelLow")] SentinelLow = 83,
  [pbr::OriginalName("VRNLogEventTypeSentinelEmpty")] SentinelEmpty = 84,
  [pbr::OriginalName("VRNLogEventTypeSmokeTube")] SmokeTube = 90,
  [pbr::OriginalName("VRNLogEventTypePostInstall")] PostInstall = 100,
  [pbr::OriginalName("VRNLogEventTypePostRemoved")] PostRemoved = 101,
  [pbr::OriginalName("VRNLogEventTypeEquipmentAdded")] EquipmentAdded = 200,
  [pbr::OriginalName("VRNLogEventTypeEquipmentRemoved")] EquipmentRemoved = 201,
  [pbr::OriginalName("VRNLogEventTypeNPCPlacedOnStretcher")] NpcplacedOnStretcher = 300,
  [pbr::OriginalName("VRNLogEventTypeNPCRemovedFromStretcher")] NpcremovedFromStretcher = 301,
  [pbr::OriginalName("VRNLogEventTypeMineExplosion")] MineExplosion = 400,
  [pbr::OriginalName("VRNLogEventTypeZoneViolation")] ZoneViolation = 401,
  [pbr::OriginalName("VRNLogEventTypeDMAction")] Dmaction = 1000,
  [pbr::OriginalName("VRNLogEventTypeDMSpawnObject")] DmspawnObject = 1001,
  [pbr::OriginalName("VRNLogEventTypeNPCDeath")] Npcdeath = 1002,
  [pbr::OriginalName("VRNLogEventTypeNPCUnconscious")] Npcunconscious = 1003,
}

public enum VRNLogObjectType {
  [pbr::OriginalName("VRNLogObjectTypeUnknown")] Unknown = 0,
  [pbr::OriginalName("VRNLogObjectTypeGeneric")] Generic = 1,
  [pbr::OriginalName("VRNLogObjectTypeFireExtinguisher")] FireExtinguisher = 2,
  [pbr::OriginalName("VRNLogObjectTypeCurtain")] Curtain = 3,
  [pbr::OriginalName("VRNLogObjectTypeGasMeter")] GasMeter = 4,
  [pbr::OriginalName("VRNLogObjectTypeSentinel")] Sentinel = 5,
  [pbr::OriginalName("VRNLogObjectTypeChalk")] Chalk = 6,
  [pbr::OriginalName("VRNLogObjectTypeSoundingStick")] SoundingStick = 7,
  [pbr::OriginalName("VRNLogObjectTypeLinkLineCarabiner")] LinkLineCarabiner = 8,
  [pbr::OriginalName("VRNLogObjectTypeSmokeTube")] SmokeTube = 9,
  [pbr::OriginalName("VRNLogObjectTypeBG4")] Bg4 = 10,
}

#endregion

#region Messages
public sealed partial class VRNQuaternion : pb::IMessage<VRNQuaternion> {
  private static readonly pb::MessageParser<VRNQuaternion> _parser = new pb::MessageParser<VRNQuaternion>(() => new VRNQuaternion());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<VRNQuaternion> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::VRMineNetReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNQuaternion() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNQuaternion(VRNQuaternion other) : this() {
    w_ = other.w_;
    x_ = other.x_;
    y_ = other.y_;
    z_ = other.z_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNQuaternion Clone() {
    return new VRNQuaternion(this);
  }

  /// <summary>Field number for the "w" field.</summary>
  public const int WFieldNumber = 1;
  private float w_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float W {
    get { return w_; }
    set {
      w_ = value;
    }
  }

  /// <summary>Field number for the "x" field.</summary>
  public const int XFieldNumber = 2;
  private float x_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float X {
    get { return x_; }
    set {
      x_ = value;
    }
  }

  /// <summary>Field number for the "y" field.</summary>
  public const int YFieldNumber = 3;
  private float y_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Y {
    get { return y_; }
    set {
      y_ = value;
    }
  }

  /// <summary>Field number for the "z" field.</summary>
  public const int ZFieldNumber = 4;
  private float z_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Z {
    get { return z_; }
    set {
      z_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as VRNQuaternion);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(VRNQuaternion other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(W, other.W)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Z, other.Z)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (W != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(W);
    if (X != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
    if (Y != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
    if (Z != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Z);
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (W != 0F) {
      output.WriteRawTag(13);
      output.WriteFloat(W);
    }
    if (X != 0F) {
      output.WriteRawTag(21);
      output.WriteFloat(X);
    }
    if (Y != 0F) {
      output.WriteRawTag(29);
      output.WriteFloat(Y);
    }
    if (Z != 0F) {
      output.WriteRawTag(37);
      output.WriteFloat(Z);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (W != 0F) {
      size += 1 + 4;
    }
    if (X != 0F) {
      size += 1 + 4;
    }
    if (Y != 0F) {
      size += 1 + 4;
    }
    if (Z != 0F) {
      size += 1 + 4;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(VRNQuaternion other) {
    if (other == null) {
      return;
    }
    if (other.W != 0F) {
      W = other.W;
    }
    if (other.X != 0F) {
      X = other.X;
    }
    if (other.Y != 0F) {
      Y = other.Y;
    }
    if (other.Z != 0F) {
      Z = other.Z;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 13: {
          W = input.ReadFloat();
          break;
        }
        case 21: {
          X = input.ReadFloat();
          break;
        }
        case 29: {
          Y = input.ReadFloat();
          break;
        }
        case 37: {
          Z = input.ReadFloat();
          break;
        }
      }
    }
  }

}

public sealed partial class VRNVector3 : pb::IMessage<VRNVector3> {
  private static readonly pb::MessageParser<VRNVector3> _parser = new pb::MessageParser<VRNVector3>(() => new VRNVector3());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<VRNVector3> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::VRMineNetReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNVector3() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNVector3(VRNVector3 other) : this() {
    x_ = other.x_;
    y_ = other.y_;
    z_ = other.z_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNVector3 Clone() {
    return new VRNVector3(this);
  }

  /// <summary>Field number for the "x" field.</summary>
  public const int XFieldNumber = 1;
  private float x_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float X {
    get { return x_; }
    set {
      x_ = value;
    }
  }

  /// <summary>Field number for the "y" field.</summary>
  public const int YFieldNumber = 2;
  private float y_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Y {
    get { return y_; }
    set {
      y_ = value;
    }
  }

  /// <summary>Field number for the "z" field.</summary>
  public const int ZFieldNumber = 3;
  private float z_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Z {
    get { return z_; }
    set {
      z_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as VRNVector3);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(VRNVector3 other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Z, other.Z)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (X != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
    if (Y != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
    if (Z != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Z);
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (X != 0F) {
      output.WriteRawTag(13);
      output.WriteFloat(X);
    }
    if (Y != 0F) {
      output.WriteRawTag(21);
      output.WriteFloat(Y);
    }
    if (Z != 0F) {
      output.WriteRawTag(29);
      output.WriteFloat(Z);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (X != 0F) {
      size += 1 + 4;
    }
    if (Y != 0F) {
      size += 1 + 4;
    }
    if (Z != 0F) {
      size += 1 + 4;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(VRNVector3 other) {
    if (other == null) {
      return;
    }
    if (other.X != 0F) {
      X = other.X;
    }
    if (other.Y != 0F) {
      Y = other.Y;
    }
    if (other.Z != 0F) {
      Z = other.Z;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 13: {
          X = input.ReadFloat();
          break;
        }
        case 21: {
          Y = input.ReadFloat();
          break;
        }
        case 29: {
          Z = input.ReadFloat();
          break;
        }
      }
    }
  }

}

public sealed partial class VRNVector2 : pb::IMessage<VRNVector2> {
  private static readonly pb::MessageParser<VRNVector2> _parser = new pb::MessageParser<VRNVector2>(() => new VRNVector2());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<VRNVector2> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::VRMineNetReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNVector2() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNVector2(VRNVector2 other) : this() {
    x_ = other.x_;
    y_ = other.y_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNVector2 Clone() {
    return new VRNVector2(this);
  }

  /// <summary>Field number for the "x" field.</summary>
  public const int XFieldNumber = 1;
  private float x_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float X {
    get { return x_; }
    set {
      x_ = value;
    }
  }

  /// <summary>Field number for the "y" field.</summary>
  public const int YFieldNumber = 2;
  private float y_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Y {
    get { return y_; }
    set {
      y_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as VRNVector2);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(VRNVector2 other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (X != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
    if (Y != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (X != 0F) {
      output.WriteRawTag(13);
      output.WriteFloat(X);
    }
    if (Y != 0F) {
      output.WriteRawTag(21);
      output.WriteFloat(Y);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (X != 0F) {
      size += 1 + 4;
    }
    if (Y != 0F) {
      size += 1 + 4;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(VRNVector2 other) {
    if (other == null) {
      return;
    }
    if (other.X != 0F) {
      X = other.X;
    }
    if (other.Y != 0F) {
      Y = other.Y;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 13: {
          X = input.ReadFloat();
          break;
        }
        case 21: {
          Y = input.ReadFloat();
          break;
        }
      }
    }
  }

}

public sealed partial class VRNColor : pb::IMessage<VRNColor> {
  private static readonly pb::MessageParser<VRNColor> _parser = new pb::MessageParser<VRNColor>(() => new VRNColor());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<VRNColor> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::VRMineNetReflection.Descriptor.MessageTypes[3]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNColor() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNColor(VRNColor other) : this() {
    r_ = other.r_;
    g_ = other.g_;
    b_ = other.b_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNColor Clone() {
    return new VRNColor(this);
  }

  /// <summary>Field number for the "r" field.</summary>
  public const int RFieldNumber = 1;
  private float r_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float R {
    get { return r_; }
    set {
      r_ = value;
    }
  }

  /// <summary>Field number for the "g" field.</summary>
  public const int GFieldNumber = 2;
  private float g_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float G {
    get { return g_; }
    set {
      g_ = value;
    }
  }

  /// <summary>Field number for the "b" field.</summary>
  public const int BFieldNumber = 3;
  private float b_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float B {
    get { return b_; }
    set {
      b_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as VRNColor);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(VRNColor other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(R, other.R)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(G, other.G)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(B, other.B)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (R != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(R);
    if (G != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(G);
    if (B != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(B);
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (R != 0F) {
      output.WriteRawTag(13);
      output.WriteFloat(R);
    }
    if (G != 0F) {
      output.WriteRawTag(21);
      output.WriteFloat(G);
    }
    if (B != 0F) {
      output.WriteRawTag(29);
      output.WriteFloat(B);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (R != 0F) {
      size += 1 + 4;
    }
    if (G != 0F) {
      size += 1 + 4;
    }
    if (B != 0F) {
      size += 1 + 4;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(VRNColor other) {
    if (other == null) {
      return;
    }
    if (other.R != 0F) {
      R = other.R;
    }
    if (other.G != 0F) {
      G = other.G;
    }
    if (other.B != 0F) {
      B = other.B;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 13: {
          R = input.ReadFloat();
          break;
        }
        case 21: {
          G = input.ReadFloat();
          break;
        }
        case 29: {
          B = input.ReadFloat();
          break;
        }
      }
    }
  }

}

public sealed partial class VRNHeader : pb::IMessage<VRNHeader> {
  private static readonly pb::MessageParser<VRNHeader> _parser = new pb::MessageParser<VRNHeader>(() => new VRNHeader());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<VRNHeader> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::VRMineNetReflection.Descriptor.MessageTypes[4]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNHeader() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNHeader(VRNHeader other) : this() {
    packetType_ = other.packetType_;
    packetDest_ = other.packetDest_;
    message_ = other.message_;
    tickCount_ = other.tickCount_;
    serverTime_ = other.serverTime_;
    rpcID_ = other.rpcID_;
    destClientID_ = other.destClientID_;
    packetSize_ = other.packetSize_;
    fromClientID_ = other.fromClientID_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNHeader Clone() {
    return new VRNHeader(this);
  }

  /// <summary>Field number for the "packetType" field.</summary>
  public const int PacketTypeFieldNumber = 1;
  private global::VRNPacketType packetType_ = global::VRNPacketType.Unknown;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::VRNPacketType PacketType {
    get { return packetType_; }
    set {
      packetType_ = value;
    }
  }

  /// <summary>Field number for the "packetDest" field.</summary>
  public const int PacketDestFieldNumber = 2;
  private global::VRNPacketDestination packetDest_ = global::VRNPacketDestination.Direct;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::VRNPacketDestination PacketDest {
    get { return packetDest_; }
    set {
      packetDest_ = value;
    }
  }

  /// <summary>Field number for the "message" field.</summary>
  public const int MessageFieldNumber = 3;
  private string message_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Message {
    get { return message_; }
    set {
      message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "tickCount" field.</summary>
  public const int TickCountFieldNumber = 4;
  private long tickCount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long TickCount {
    get { return tickCount_; }
    set {
      tickCount_ = value;
    }
  }

  /// <summary>Field number for the "serverTime" field.</summary>
  public const int ServerTimeFieldNumber = 5;
  private float serverTime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float ServerTime {
    get { return serverTime_; }
    set {
      serverTime_ = value;
    }
  }

  /// <summary>Field number for the "rpcID" field.</summary>
  public const int RpcIDFieldNumber = 6;
  private ulong rpcID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong RpcID {
    get { return rpcID_; }
    set {
      rpcID_ = value;
    }
  }

  /// <summary>Field number for the "destClientID" field.</summary>
  public const int DestClientIDFieldNumber = 7;
  private int destClientID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int DestClientID {
    get { return destClientID_; }
    set {
      destClientID_ = value;
    }
  }

  /// <summary>Field number for the "packetSize" field.</summary>
  public const int PacketSizeFieldNumber = 8;
  private int packetSize_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int PacketSize {
    get { return packetSize_; }
    set {
      packetSize_ = value;
    }
  }

  /// <summary>Field number for the "fromClientID" field.</summary>
  public const int FromClientIDFieldNumber = 9;
  private int fromClientID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int FromClientID {
    get { return fromClientID_; }
    set {
      fromClientID_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as VRNHeader);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(VRNHeader other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PacketType != other.PacketType) return false;
    if (PacketDest != other.PacketDest) return false;
    if (Message != other.Message) return false;
    if (TickCount != other.TickCount) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ServerTime, other.ServerTime)) return false;
    if (RpcID != other.RpcID) return false;
    if (DestClientID != other.DestClientID) return false;
    if (PacketSize != other.PacketSize) return false;
    if (FromClientID != other.FromClientID) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PacketType != global::VRNPacketType.Unknown) hash ^= PacketType.GetHashCode();
    if (PacketDest != global::VRNPacketDestination.Direct) hash ^= PacketDest.GetHashCode();
    if (Message.Length != 0) hash ^= Message.GetHashCode();
    if (TickCount != 0L) hash ^= TickCount.GetHashCode();
    if (ServerTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ServerTime);
    if (RpcID != 0UL) hash ^= RpcID.GetHashCode();
    if (DestClientID != 0) hash ^= DestClientID.GetHashCode();
    if (PacketSize != 0) hash ^= PacketSize.GetHashCode();
    if (FromClientID != 0) hash ^= FromClientID.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PacketType != global::VRNPacketType.Unknown) {
      output.WriteRawTag(8);
      output.WriteEnum((int) PacketType);
    }
    if (PacketDest != global::VRNPacketDestination.Direct) {
      output.WriteRawTag(16);
      output.WriteEnum((int) PacketDest);
    }
    if (Message.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(Message);
    }
    if (TickCount != 0L) {
      output.WriteRawTag(32);
      output.WriteInt64(TickCount);
    }
    if (ServerTime != 0F) {
      output.WriteRawTag(45);
      output.WriteFloat(ServerTime);
    }
    if (RpcID != 0UL) {
      output.WriteRawTag(48);
      output.WriteUInt64(RpcID);
    }
    if (DestClientID != 0) {
      output.WriteRawTag(56);
      output.WriteInt32(DestClientID);
    }
    if (PacketSize != 0) {
      output.WriteRawTag(64);
      output.WriteInt32(PacketSize);
    }
    if (FromClientID != 0) {
      output.WriteRawTag(72);
      output.WriteInt32(FromClientID);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PacketType != global::VRNPacketType.Unknown) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PacketType);
    }
    if (PacketDest != global::VRNPacketDestination.Direct) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PacketDest);
    }
    if (Message.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
    }
    if (TickCount != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(TickCount);
    }
    if (ServerTime != 0F) {
      size += 1 + 4;
    }
    if (RpcID != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RpcID);
    }
    if (DestClientID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(DestClientID);
    }
    if (PacketSize != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(PacketSize);
    }
    if (FromClientID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(FromClientID);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(VRNHeader other) {
    if (other == null) {
      return;
    }
    if (other.PacketType != global::VRNPacketType.Unknown) {
      PacketType = other.PacketType;
    }
    if (other.PacketDest != global::VRNPacketDestination.Direct) {
      PacketDest = other.PacketDest;
    }
    if (other.Message.Length != 0) {
      Message = other.Message;
    }
    if (other.TickCount != 0L) {
      TickCount = other.TickCount;
    }
    if (other.ServerTime != 0F) {
      ServerTime = other.ServerTime;
    }
    if (other.RpcID != 0UL) {
      RpcID = other.RpcID;
    }
    if (other.DestClientID != 0) {
      DestClientID = other.DestClientID;
    }
    if (other.PacketSize != 0) {
      PacketSize = other.PacketSize;
    }
    if (other.FromClientID != 0) {
      FromClientID = other.FromClientID;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PacketType = (global::VRNPacketType) input.ReadEnum();
          break;
        }
        case 16: {
          PacketDest = (global::VRNPacketDestination) input.ReadEnum();
          break;
        }
        case 26: {
          Message = input.ReadString();
          break;
        }
        case 32: {
          TickCount = input.ReadInt64();
          break;
        }
        case 45: {
          ServerTime = input.ReadFloat();
          break;
        }
        case 48: {
          RpcID = input.ReadUInt64();
          break;
        }
        case 56: {
          DestClientID = input.ReadInt32();
          break;
        }
        case 64: {
          PacketSize = input.ReadInt32();
          break;
        }
        case 72: {
          FromClientID = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class VRNRelayClientInfo : pb::IMessage<VRNRelayClientInfo> {
  private static readonly pb::MessageParser<VRNRelayClientInfo> _parser = new pb::MessageParser<VRNRelayClientInfo>(() => new VRNRelayClientInfo());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<VRNRelayClientInfo> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::VRMineNetReflection.Descriptor.MessageTypes[5]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNRelayClientInfo() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNRelayClientInfo(VRNRelayClientInfo other) : this() {
    clientID_ = other.clientID_;
    ipAddress_ = other.ipAddress_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNRelayClientInfo Clone() {
    return new VRNRelayClientInfo(this);
  }

  /// <summary>Field number for the "clientID" field.</summary>
  public const int ClientIDFieldNumber = 1;
  private int clientID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ClientID {
    get { return clientID_; }
    set {
      clientID_ = value;
    }
  }

  /// <summary>Field number for the "ipAddress" field.</summary>
  public const int IpAddressFieldNumber = 2;
  private string ipAddress_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string IpAddress {
    get { return ipAddress_; }
    set {
      ipAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as VRNRelayClientInfo);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(VRNRelayClientInfo other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ClientID != other.ClientID) return false;
    if (IpAddress != other.IpAddress) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (ClientID != 0) hash ^= ClientID.GetHashCode();
    if (IpAddress.Length != 0) hash ^= IpAddress.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (ClientID != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(ClientID);
    }
    if (IpAddress.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(IpAddress);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (ClientID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ClientID);
    }
    if (IpAddress.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(IpAddress);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(VRNRelayClientInfo other) {
    if (other == null) {
      return;
    }
    if (other.ClientID != 0) {
      ClientID = other.ClientID;
    }
    if (other.IpAddress.Length != 0) {
      IpAddress = other.IpAddress;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          ClientID = input.ReadInt32();
          break;
        }
        case 18: {
          IpAddress = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class VRNRelayClientList : pb::IMessage<VRNRelayClientList> {
  private static readonly pb::MessageParser<VRNRelayClientList> _parser = new pb::MessageParser<VRNRelayClientList>(() => new VRNRelayClientList());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<VRNRelayClientList> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::VRMineNetReflection.Descriptor.MessageTypes[6]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNRelayClientList() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNRelayClientList(VRNRelayClientList other) : this() {
    clientList_ = other.clientList_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNRelayClientList Clone() {
    return new VRNRelayClientList(this);
  }

  /// <summary>Field number for the "clientList" field.</summary>
  public const int ClientListFieldNumber = 1;
  private static readonly pb::FieldCodec<global::VRNRelayClientInfo> _repeated_clientList_codec
      = pb::FieldCodec.ForMessage(10, global::VRNRelayClientInfo.Parser);
  private readonly pbc::RepeatedField<global::VRNRelayClientInfo> clientList_ = new pbc::RepeatedField<global::VRNRelayClientInfo>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::VRNRelayClientInfo> ClientList {
    get { return clientList_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as VRNRelayClientList);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(VRNRelayClientList other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!clientList_.Equals(other.clientList_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= clientList_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    clientList_.WriteTo(output, _repeated_clientList_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += clientList_.CalculateSize(_repeated_clientList_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(VRNRelayClientList other) {
    if (other == null) {
      return;
    }
    clientList_.Add(other.clientList_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          clientList_.AddEntriesFrom(input, _repeated_clientList_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class VRNClientStats : pb::IMessage<VRNClientStats> {
  private static readonly pb::MessageParser<VRNClientStats> _parser = new pb::MessageParser<VRNClientStats>(() => new VRNClientStats());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<VRNClientStats> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::VRMineNetReflection.Descriptor.MessageTypes[7]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNClientStats() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNClientStats(VRNClientStats other) : this() {
    clientID_ = other.clientID_;
    connectTime_ = other.connectTime_;
    avgBitRate_ = other.avgBitRate_;
    avgPingRTT_ = other.avgPingRTT_;
    reliablePipelineRTT_ = other.reliablePipelineRTT_;
    reliablePipelineRTTVar_ = other.reliablePipelineRTTVar_;
    reliableSendQueueCount_ = other.reliableSendQueueCount_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNClientStats Clone() {
    return new VRNClientStats(this);
  }

  /// <summary>Field number for the "clientID" field.</summary>
  public const int ClientIDFieldNumber = 1;
  private int clientID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ClientID {
    get { return clientID_; }
    set {
      clientID_ = value;
    }
  }

  /// <summary>Field number for the "connectTime" field.</summary>
  public const int ConnectTimeFieldNumber = 2;
  private float connectTime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float ConnectTime {
    get { return connectTime_; }
    set {
      connectTime_ = value;
    }
  }

  /// <summary>Field number for the "avgBitRate" field.</summary>
  public const int AvgBitRateFieldNumber = 3;
  private float avgBitRate_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float AvgBitRate {
    get { return avgBitRate_; }
    set {
      avgBitRate_ = value;
    }
  }

  /// <summary>Field number for the "avgPingRTT" field.</summary>
  public const int AvgPingRTTFieldNumber = 4;
  private float avgPingRTT_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float AvgPingRTT {
    get { return avgPingRTT_; }
    set {
      avgPingRTT_ = value;
    }
  }

  /// <summary>Field number for the "reliablePipelineRTT" field.</summary>
  public const int ReliablePipelineRTTFieldNumber = 5;
  private float reliablePipelineRTT_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float ReliablePipelineRTT {
    get { return reliablePipelineRTT_; }
    set {
      reliablePipelineRTT_ = value;
    }
  }

  /// <summary>Field number for the "reliablePipelineRTTVar" field.</summary>
  public const int ReliablePipelineRTTVarFieldNumber = 6;
  private float reliablePipelineRTTVar_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float ReliablePipelineRTTVar {
    get { return reliablePipelineRTTVar_; }
    set {
      reliablePipelineRTTVar_ = value;
    }
  }

  /// <summary>Field number for the "reliableSendQueueCount" field.</summary>
  public const int ReliableSendQueueCountFieldNumber = 7;
  private int reliableSendQueueCount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ReliableSendQueueCount {
    get { return reliableSendQueueCount_; }
    set {
      reliableSendQueueCount_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as VRNClientStats);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(VRNClientStats other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ClientID != other.ClientID) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ConnectTime, other.ConnectTime)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AvgBitRate, other.AvgBitRate)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AvgPingRTT, other.AvgPingRTT)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ReliablePipelineRTT, other.ReliablePipelineRTT)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ReliablePipelineRTTVar, other.ReliablePipelineRTTVar)) return false;
    if (ReliableSendQueueCount != other.ReliableSendQueueCount) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (ClientID != 0) hash ^= ClientID.GetHashCode();
    if (ConnectTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ConnectTime);
    if (AvgBitRate != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AvgBitRate);
    if (AvgPingRTT != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AvgPingRTT);
    if (ReliablePipelineRTT != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ReliablePipelineRTT);
    if (ReliablePipelineRTTVar != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ReliablePipelineRTTVar);
    if (ReliableSendQueueCount != 0) hash ^= ReliableSendQueueCount.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (ClientID != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(ClientID);
    }
    if (ConnectTime != 0F) {
      output.WriteRawTag(21);
      output.WriteFloat(ConnectTime);
    }
    if (AvgBitRate != 0F) {
      output.WriteRawTag(29);
      output.WriteFloat(AvgBitRate);
    }
    if (AvgPingRTT != 0F) {
      output.WriteRawTag(37);
      output.WriteFloat(AvgPingRTT);
    }
    if (ReliablePipelineRTT != 0F) {
      output.WriteRawTag(45);
      output.WriteFloat(ReliablePipelineRTT);
    }
    if (ReliablePipelineRTTVar != 0F) {
      output.WriteRawTag(53);
      output.WriteFloat(ReliablePipelineRTTVar);
    }
    if (ReliableSendQueueCount != 0) {
      output.WriteRawTag(56);
      output.WriteInt32(ReliableSendQueueCount);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (ClientID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ClientID);
    }
    if (ConnectTime != 0F) {
      size += 1 + 4;
    }
    if (AvgBitRate != 0F) {
      size += 1 + 4;
    }
    if (AvgPingRTT != 0F) {
      size += 1 + 4;
    }
    if (ReliablePipelineRTT != 0F) {
      size += 1 + 4;
    }
    if (ReliablePipelineRTTVar != 0F) {
      size += 1 + 4;
    }
    if (ReliableSendQueueCount != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReliableSendQueueCount);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(VRNClientStats other) {
    if (other == null) {
      return;
    }
    if (other.ClientID != 0) {
      ClientID = other.ClientID;
    }
    if (other.ConnectTime != 0F) {
      ConnectTime = other.ConnectTime;
    }
    if (other.AvgBitRate != 0F) {
      AvgBitRate = other.AvgBitRate;
    }
    if (other.AvgPingRTT != 0F) {
      AvgPingRTT = other.AvgPingRTT;
    }
    if (other.ReliablePipelineRTT != 0F) {
      ReliablePipelineRTT = other.ReliablePipelineRTT;
    }
    if (other.ReliablePipelineRTTVar != 0F) {
      ReliablePipelineRTTVar = other.ReliablePipelineRTTVar;
    }
    if (other.ReliableSendQueueCount != 0) {
      ReliableSendQueueCount = other.ReliableSendQueueCount;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          ClientID = input.ReadInt32();
          break;
        }
        case 21: {
          ConnectTime = input.ReadFloat();
          break;
        }
        case 29: {
          AvgBitRate = input.ReadFloat();
          break;
        }
        case 37: {
          AvgPingRTT = input.ReadFloat();
          break;
        }
        case 45: {
          ReliablePipelineRTT = input.ReadFloat();
          break;
        }
        case 53: {
          ReliablePipelineRTTVar = input.ReadFloat();
          break;
        }
        case 56: {
          ReliableSendQueueCount = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class VRNRelayClientStatsList : pb::IMessage<VRNRelayClientStatsList> {
  private static readonly pb::MessageParser<VRNRelayClientStatsList> _parser = new pb::MessageParser<VRNRelayClientStatsList>(() => new VRNRelayClientStatsList());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<VRNRelayClientStatsList> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::VRMineNetReflection.Descriptor.MessageTypes[8]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNRelayClientStatsList() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNRelayClientStatsList(VRNRelayClientStatsList other) : this() {
    clientStats_ = other.clientStats_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNRelayClientStatsList Clone() {
    return new VRNRelayClientStatsList(this);
  }

  /// <summary>Field number for the "clientStats" field.</summary>
  public const int ClientStatsFieldNumber = 1;
  private static readonly pb::FieldCodec<global::VRNClientStats> _repeated_clientStats_codec
      = pb::FieldCodec.ForMessage(10, global::VRNClientStats.Parser);
  private readonly pbc::RepeatedField<global::VRNClientStats> clientStats_ = new pbc::RepeatedField<global::VRNClientStats>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::VRNClientStats> ClientStats {
    get { return clientStats_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as VRNRelayClientStatsList);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(VRNRelayClientStatsList other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!clientStats_.Equals(other.clientStats_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= clientStats_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    clientStats_.WriteTo(output, _repeated_clientStats_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += clientStats_.CalculateSize(_repeated_clientStats_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(VRNRelayClientStatsList other) {
    if (other == null) {
      return;
    }
    clientStats_.Add(other.clientStats_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          clientStats_.AddEntriesFrom(input, _repeated_clientStats_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class VRNNetObjMessage : pb::IMessage<VRNNetObjMessage> {
  private static readonly pb::MessageParser<VRNNetObjMessage> _parser = new pb::MessageParser<VRNNetObjMessage>(() => new VRNNetObjMessage());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<VRNNetObjMessage> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::VRMineNetReflection.Descriptor.MessageTypes[9]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNNetObjMessage() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNNetObjMessage(VRNNetObjMessage other) : this() {
    objID_ = other.objID_;
    messageType_ = other.messageType_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNNetObjMessage Clone() {
    return new VRNNetObjMessage(this);
  }

  /// <summary>Field number for the "objID" field.</summary>
  public const int ObjIDFieldNumber = 1;
  private pb::ByteString objID_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString ObjID {
    get { return objID_; }
    set {
      objID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "messageType" field.</summary>
  public const int MessageTypeFieldNumber = 2;
  private string messageType_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string MessageType {
    get { return messageType_; }
    set {
      messageType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as VRNNetObjMessage);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(VRNNetObjMessage other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ObjID != other.ObjID) return false;
    if (MessageType != other.MessageType) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (ObjID.Length != 0) hash ^= ObjID.GetHashCode();
    if (MessageType.Length != 0) hash ^= MessageType.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (ObjID.Length != 0) {
      output.WriteRawTag(10);
      output.WriteBytes(ObjID);
    }
    if (MessageType.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(MessageType);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (ObjID.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(ObjID);
    }
    if (MessageType.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(MessageType);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(VRNNetObjMessage other) {
    if (other == null) {
      return;
    }
    if (other.ObjID.Length != 0) {
      ObjID = other.ObjID;
    }
    if (other.MessageType.Length != 0) {
      MessageType = other.MessageType;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          ObjID = input.ReadBytes();
          break;
        }
        case 18: {
          MessageType = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class VRNAntilatencyStatus : pb::IMessage<VRNAntilatencyStatus> {
  private static readonly pb::MessageParser<VRNAntilatencyStatus> _parser = new pb::MessageParser<VRNAntilatencyStatus>(() => new VRNAntilatencyStatus());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<VRNAntilatencyStatus> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::VRMineNetReflection.Descriptor.MessageTypes[10]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNAntilatencyStatus() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNAntilatencyStatus(VRNAntilatencyStatus other) : this() {
    clientID_ = other.clientID_;
    playerID_ = other.playerID_;
    statusText_ = other.statusText_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNAntilatencyStatus Clone() {
    return new VRNAntilatencyStatus(this);
  }

  /// <summary>Field number for the "clientID" field.</summary>
  public const int ClientIDFieldNumber = 1;
  private int clientID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ClientID {
    get { return clientID_; }
    set {
      clientID_ = value;
    }
  }

  /// <summary>Field number for the "playerID" field.</summary>
  public const int PlayerIDFieldNumber = 2;
  private int playerID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int PlayerID {
    get { return playerID_; }
    set {
      playerID_ = value;
    }
  }

  /// <summary>Field number for the "statusText" field.</summary>
  public const int StatusTextFieldNumber = 3;
  private string statusText_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string StatusText {
    get { return statusText_; }
    set {
      statusText_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as VRNAntilatencyStatus);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(VRNAntilatencyStatus other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ClientID != other.ClientID) return false;
    if (PlayerID != other.PlayerID) return false;
    if (StatusText != other.StatusText) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (ClientID != 0) hash ^= ClientID.GetHashCode();
    if (PlayerID != 0) hash ^= PlayerID.GetHashCode();
    if (StatusText.Length != 0) hash ^= StatusText.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (ClientID != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(ClientID);
    }
    if (PlayerID != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(PlayerID);
    }
    if (StatusText.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(StatusText);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (ClientID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ClientID);
    }
    if (PlayerID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerID);
    }
    if (StatusText.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(StatusText);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(VRNAntilatencyStatus other) {
    if (other == null) {
      return;
    }
    if (other.ClientID != 0) {
      ClientID = other.ClientID;
    }
    if (other.PlayerID != 0) {
      PlayerID = other.PlayerID;
    }
    if (other.StatusText.Length != 0) {
      StatusText = other.StatusText;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          ClientID = input.ReadInt32();
          break;
        }
        case 16: {
          PlayerID = input.ReadInt32();
          break;
        }
        case 26: {
          StatusText = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class VRNPingResponse : pb::IMessage<VRNPingResponse> {
  private static readonly pb::MessageParser<VRNPingResponse> _parser = new pb::MessageParser<VRNPingResponse>(() => new VRNPingResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<VRNPingResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::VRMineNetReflection.Descriptor.MessageTypes[11]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNPingResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNPingResponse(VRNPingResponse other) : this() {
    clientID_ = other.clientID_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNPingResponse Clone() {
    return new VRNPingResponse(this);
  }

  /// <summary>Field number for the "clientID" field.</summary>
  public const int ClientIDFieldNumber = 1;
  private int clientID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ClientID {
    get { return clientID_; }
    set {
      clientID_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as VRNPingResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(VRNPingResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ClientID != other.ClientID) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (ClientID != 0) hash ^= ClientID.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (ClientID != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(ClientID);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (ClientID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ClientID);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(VRNPingResponse other) {
    if (other == null) {
      return;
    }
    if (other.ClientID != 0) {
      ClientID = other.ClientID;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          ClientID = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class VRNPlayerMessage : pb::IMessage<VRNPlayerMessage> {
  private static readonly pb::MessageParser<VRNPlayerMessage> _parser = new pb::MessageParser<VRNPlayerMessage>(() => new VRNPlayerMessage());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<VRNPlayerMessage> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::VRMineNetReflection.Descriptor.MessageTypes[12]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNPlayerMessage() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNPlayerMessage(VRNPlayerMessage other) : this() {
    playerID_ = other.playerID_;
    messageType_ = other.messageType_;
    switch (other.PlayerMessageDataCase) {
      case PlayerMessageDataOneofCase.TextData:
        TextData = other.TextData;
        break;
      case PlayerMessageDataOneofCase.FloatData:
        FloatData = other.FloatData;
        break;
      case PlayerMessageDataOneofCase.IntData:
        IntData = other.IntData;
        break;
      case PlayerMessageDataOneofCase.BoolData:
        BoolData = other.BoolData;
        break;
      case PlayerMessageDataOneofCase.Vec2Data:
        Vec2Data = other.Vec2Data.Clone();
        break;
      case PlayerMessageDataOneofCase.Vec3Data:
        Vec3Data = other.Vec3Data.Clone();
        break;
      case PlayerMessageDataOneofCase.QuaternionData:
        QuaternionData = other.QuaternionData.Clone();
        break;
      case PlayerMessageDataOneofCase.Bg4Data:
        Bg4Data = other.Bg4Data.Clone();
        break;
    }

    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNPlayerMessage Clone() {
    return new VRNPlayerMessage(this);
  }

  /// <summary>Field number for the "playerID" field.</summary>
  public const int PlayerIDFieldNumber = 1;
  private int playerID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int PlayerID {
    get { return playerID_; }
    set {
      playerID_ = value;
    }
  }

  /// <summary>Field number for the "messageType" field.</summary>
  public const int MessageTypeFieldNumber = 2;
  private global::VRNPlayerMessageType messageType_ = global::VRNPlayerMessageType.PmUnknown;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::VRNPlayerMessageType MessageType {
    get { return messageType_; }
    set {
      messageType_ = value;
    }
  }

  /// <summary>Field number for the "textData" field.</summary>
  public const int TextDataFieldNumber = 3;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string TextData {
    get { return playerMessageDataCase_ == PlayerMessageDataOneofCase.TextData ? (string) playerMessageData_ : ""; }
    set {
      playerMessageData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      playerMessageDataCase_ = PlayerMessageDataOneofCase.TextData;
    }
  }

  /// <summary>Field number for the "floatData" field.</summary>
  public const int FloatDataFieldNumber = 4;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float FloatData {
    get { return playerMessageDataCase_ == PlayerMessageDataOneofCase.FloatData ? (float) playerMessageData_ : 0F; }
    set {
      playerMessageData_ = value;
      playerMessageDataCase_ = PlayerMessageDataOneofCase.FloatData;
    }
  }

  /// <summary>Field number for the "intData" field.</summary>
  public const int IntDataFieldNumber = 5;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int IntData {
    get { return playerMessageDataCase_ == PlayerMessageDataOneofCase.IntData ? (int) playerMessageData_ : 0; }
    set {
      playerMessageData_ = value;
      playerMessageDataCase_ = PlayerMessageDataOneofCase.IntData;
    }
  }

  /// <summary>Field number for the "boolData" field.</summary>
  public const int BoolDataFieldNumber = 6;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool BoolData {
    get { return playerMessageDataCase_ == PlayerMessageDataOneofCase.BoolData ? (bool) playerMessageData_ : false; }
    set {
      playerMessageData_ = value;
      playerMessageDataCase_ = PlayerMessageDataOneofCase.BoolData;
    }
  }

  /// <summary>Field number for the "vec2Data" field.</summary>
  public const int Vec2DataFieldNumber = 7;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::VRNVector2 Vec2Data {
    get { return playerMessageDataCase_ == PlayerMessageDataOneofCase.Vec2Data ? (global::VRNVector2) playerMessageData_ : null; }
    set {
      playerMessageData_ = value;
      playerMessageDataCase_ = value == null ? PlayerMessageDataOneofCase.None : PlayerMessageDataOneofCase.Vec2Data;
    }
  }

  /// <summary>Field number for the "vec3Data" field.</summary>
  public const int Vec3DataFieldNumber = 8;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::VRNVector3 Vec3Data {
    get { return playerMessageDataCase_ == PlayerMessageDataOneofCase.Vec3Data ? (global::VRNVector3) playerMessageData_ : null; }
    set {
      playerMessageData_ = value;
      playerMessageDataCase_ = value == null ? PlayerMessageDataOneofCase.None : PlayerMessageDataOneofCase.Vec3Data;
    }
  }

  /// <summary>Field number for the "quaternionData" field.</summary>
  public const int QuaternionDataFieldNumber = 9;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::VRNQuaternion QuaternionData {
    get { return playerMessageDataCase_ == PlayerMessageDataOneofCase.QuaternionData ? (global::VRNQuaternion) playerMessageData_ : null; }
    set {
      playerMessageData_ = value;
      playerMessageDataCase_ = value == null ? PlayerMessageDataOneofCase.None : PlayerMessageDataOneofCase.QuaternionData;
    }
  }

  /// <summary>Field number for the "bg4Data" field.</summary>
  public const int Bg4DataFieldNumber = 10;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::VRNBG4SimData Bg4Data {
    get { return playerMessageDataCase_ == PlayerMessageDataOneofCase.Bg4Data ? (global::VRNBG4SimData) playerMessageData_ : null; }
    set {
      playerMessageData_ = value;
      playerMessageDataCase_ = value == null ? PlayerMessageDataOneofCase.None : PlayerMessageDataOneofCase.Bg4Data;
    }
  }

  private object playerMessageData_;
  /// <summary>Enum of possible cases for the "playerMessageData" oneof.</summary>
  public enum PlayerMessageDataOneofCase {
    None = 0,
    TextData = 3,
    FloatData = 4,
    IntData = 5,
    BoolData = 6,
    Vec2Data = 7,
    Vec3Data = 8,
    QuaternionData = 9,
    Bg4Data = 10,
  }
  private PlayerMessageDataOneofCase playerMessageDataCase_ = PlayerMessageDataOneofCase.None;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlayerMessageDataOneofCase PlayerMessageDataCase {
    get { return playerMessageDataCase_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPlayerMessageData() {
    playerMessageDataCase_ = PlayerMessageDataOneofCase.None;
    playerMessageData_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as VRNPlayerMessage);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(VRNPlayerMessage other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerID != other.PlayerID) return false;
    if (MessageType != other.MessageType) return false;
    if (TextData != other.TextData) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FloatData, other.FloatData)) return false;
    if (IntData != other.IntData) return false;
    if (BoolData != other.BoolData) return false;
    if (!object.Equals(Vec2Data, other.Vec2Data)) return false;
    if (!object.Equals(Vec3Data, other.Vec3Data)) return false;
    if (!object.Equals(QuaternionData, other.QuaternionData)) return false;
    if (!object.Equals(Bg4Data, other.Bg4Data)) return false;
    if (PlayerMessageDataCase != other.PlayerMessageDataCase) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerID != 0) hash ^= PlayerID.GetHashCode();
    if (MessageType != global::VRNPlayerMessageType.PmUnknown) hash ^= MessageType.GetHashCode();
    if (playerMessageDataCase_ == PlayerMessageDataOneofCase.TextData) hash ^= TextData.GetHashCode();
    if (playerMessageDataCase_ == PlayerMessageDataOneofCase.FloatData) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FloatData);
    if (playerMessageDataCase_ == PlayerMessageDataOneofCase.IntData) hash ^= IntData.GetHashCode();
    if (playerMessageDataCase_ == PlayerMessageDataOneofCase.BoolData) hash ^= BoolData.GetHashCode();
    if (playerMessageDataCase_ == PlayerMessageDataOneofCase.Vec2Data) hash ^= Vec2Data.GetHashCode();
    if (playerMessageDataCase_ == PlayerMessageDataOneofCase.Vec3Data) hash ^= Vec3Data.GetHashCode();
    if (playerMessageDataCase_ == PlayerMessageDataOneofCase.QuaternionData) hash ^= QuaternionData.GetHashCode();
    if (playerMessageDataCase_ == PlayerMessageDataOneofCase.Bg4Data) hash ^= Bg4Data.GetHashCode();
    hash ^= (int) playerMessageDataCase_;
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerID != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(PlayerID);
    }
    if (MessageType != global::VRNPlayerMessageType.PmUnknown) {
      output.WriteRawTag(16);
      output.WriteEnum((int) MessageType);
    }
    if (playerMessageDataCase_ == PlayerMessageDataOneofCase.TextData) {
      output.WriteRawTag(26);
      output.WriteString(TextData);
    }
    if (playerMessageDataCase_ == PlayerMessageDataOneofCase.FloatData) {
      output.WriteRawTag(37);
      output.WriteFloat(FloatData);
    }
    if (playerMessageDataCase_ == PlayerMessageDataOneofCase.IntData) {
      output.WriteRawTag(40);
      output.WriteInt32(IntData);
    }
    if (playerMessageDataCase_ == PlayerMessageDataOneofCase.BoolData) {
      output.WriteRawTag(48);
      output.WriteBool(BoolData);
    }
    if (playerMessageDataCase_ == PlayerMessageDataOneofCase.Vec2Data) {
      output.WriteRawTag(58);
      output.WriteMessage(Vec2Data);
    }
    if (playerMessageDataCase_ == PlayerMessageDataOneofCase.Vec3Data) {
      output.WriteRawTag(66);
      output.WriteMessage(Vec3Data);
    }
    if (playerMessageDataCase_ == PlayerMessageDataOneofCase.QuaternionData) {
      output.WriteRawTag(74);
      output.WriteMessage(QuaternionData);
    }
    if (playerMessageDataCase_ == PlayerMessageDataOneofCase.Bg4Data) {
      output.WriteRawTag(82);
      output.WriteMessage(Bg4Data);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerID);
    }
    if (MessageType != global::VRNPlayerMessageType.PmUnknown) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) MessageType);
    }
    if (playerMessageDataCase_ == PlayerMessageDataOneofCase.TextData) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(TextData);
    }
    if (playerMessageDataCase_ == PlayerMessageDataOneofCase.FloatData) {
      size += 1 + 4;
    }
    if (playerMessageDataCase_ == PlayerMessageDataOneofCase.IntData) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(IntData);
    }
    if (playerMessageDataCase_ == PlayerMessageDataOneofCase.BoolData) {
      size += 1 + 1;
    }
    if (playerMessageDataCase_ == PlayerMessageDataOneofCase.Vec2Data) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Vec2Data);
    }
    if (playerMessageDataCase_ == PlayerMessageDataOneofCase.Vec3Data) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Vec3Data);
    }
    if (playerMessageDataCase_ == PlayerMessageDataOneofCase.QuaternionData) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(QuaternionData);
    }
    if (playerMessageDataCase_ == PlayerMessageDataOneofCase.Bg4Data) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Bg4Data);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(VRNPlayerMessage other) {
    if (other == null) {
      return;
    }
    if (other.PlayerID != 0) {
      PlayerID = other.PlayerID;
    }
    if (other.MessageType != global::VRNPlayerMessageType.PmUnknown) {
      MessageType = other.MessageType;
    }
    switch (other.PlayerMessageDataCase) {
      case PlayerMessageDataOneofCase.TextData:
        TextData = other.TextData;
        break;
      case PlayerMessageDataOneofCase.FloatData:
        FloatData = other.FloatData;
        break;
      case PlayerMessageDataOneofCase.IntData:
        IntData = other.IntData;
        break;
      case PlayerMessageDataOneofCase.BoolData:
        BoolData = other.BoolData;
        break;
      case PlayerMessageDataOneofCase.Vec2Data:
        if (Vec2Data == null) {
          Vec2Data = new global::VRNVector2();
        }
        Vec2Data.MergeFrom(other.Vec2Data);
        break;
      case PlayerMessageDataOneofCase.Vec3Data:
        if (Vec3Data == null) {
          Vec3Data = new global::VRNVector3();
        }
        Vec3Data.MergeFrom(other.Vec3Data);
        break;
      case PlayerMessageDataOneofCase.QuaternionData:
        if (QuaternionData == null) {
          QuaternionData = new global::VRNQuaternion();
        }
        QuaternionData.MergeFrom(other.QuaternionData);
        break;
      case PlayerMessageDataOneofCase.Bg4Data:
        if (Bg4Data == null) {
          Bg4Data = new global::VRNBG4SimData();
        }
        Bg4Data.MergeFrom(other.Bg4Data);
        break;
    }

    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerID = input.ReadInt32();
          break;
        }
        case 16: {
          MessageType = (global::VRNPlayerMessageType) input.ReadEnum();
          break;
        }
        case 26: {
          TextData = input.ReadString();
          break;
        }
        case 37: {
          FloatData = input.ReadFloat();
          break;
        }
        case 40: {
          IntData = input.ReadInt32();
          break;
        }
        case 48: {
          BoolData = input.ReadBool();
          break;
        }
        case 58: {
          global::VRNVector2 subBuilder = new global::VRNVector2();
          if (playerMessageDataCase_ == PlayerMessageDataOneofCase.Vec2Data) {
            subBuilder.MergeFrom(Vec2Data);
          }
          input.ReadMessage(subBuilder);
          Vec2Data = subBuilder;
          break;
        }
        case 66: {
          global::VRNVector3 subBuilder = new global::VRNVector3();
          if (playerMessageDataCase_ == PlayerMessageDataOneofCase.Vec3Data) {
            subBuilder.MergeFrom(Vec3Data);
          }
          input.ReadMessage(subBuilder);
          Vec3Data = subBuilder;
          break;
        }
        case 74: {
          global::VRNQuaternion subBuilder = new global::VRNQuaternion();
          if (playerMessageDataCase_ == PlayerMessageDataOneofCase.QuaternionData) {
            subBuilder.MergeFrom(QuaternionData);
          }
          input.ReadMessage(subBuilder);
          QuaternionData = subBuilder;
          break;
        }
        case 82: {
          global::VRNBG4SimData subBuilder = new global::VRNBG4SimData();
          if (playerMessageDataCase_ == PlayerMessageDataOneofCase.Bg4Data) {
            subBuilder.MergeFrom(Bg4Data);
          }
          input.ReadMessage(subBuilder);
          Bg4Data = subBuilder;
          break;
        }
      }
    }
  }

}

public sealed partial class VRNMsgDamageFire : pb::IMessage<VRNMsgDamageFire> {
  private static readonly pb::MessageParser<VRNMsgDamageFire> _parser = new pb::MessageParser<VRNMsgDamageFire>(() => new VRNMsgDamageFire());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<VRNMsgDamageFire> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::VRMineNetReflection.Descriptor.MessageTypes[13]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNMsgDamageFire() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNMsgDamageFire(VRNMsgDamageFire other) : this() {
    dmgAmount_ = other.dmgAmount_;
    playerID_ = other.playerID_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNMsgDamageFire Clone() {
    return new VRNMsgDamageFire(this);
  }

  /// <summary>Field number for the "dmgAmount" field.</summary>
  public const int DmgAmountFieldNumber = 1;
  private float dmgAmount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float DmgAmount {
    get { return dmgAmount_; }
    set {
      dmgAmount_ = value;
    }
  }

  /// <summary>Field number for the "playerID" field.</summary>
  public const int PlayerIDFieldNumber = 2;
  private int playerID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int PlayerID {
    get { return playerID_; }
    set {
      playerID_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as VRNMsgDamageFire);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(VRNMsgDamageFire other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DmgAmount, other.DmgAmount)) return false;
    if (PlayerID != other.PlayerID) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (DmgAmount != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DmgAmount);
    if (PlayerID != 0) hash ^= PlayerID.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (DmgAmount != 0F) {
      output.WriteRawTag(13);
      output.WriteFloat(DmgAmount);
    }
    if (PlayerID != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(PlayerID);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (DmgAmount != 0F) {
      size += 1 + 4;
    }
    if (PlayerID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerID);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(VRNMsgDamageFire other) {
    if (other == null) {
      return;
    }
    if (other.DmgAmount != 0F) {
      DmgAmount = other.DmgAmount;
    }
    if (other.PlayerID != 0) {
      PlayerID = other.PlayerID;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 13: {
          DmgAmount = input.ReadFloat();
          break;
        }
        case 16: {
          PlayerID = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class VRNDiscovery : pb::IMessage<VRNDiscovery> {
  private static readonly pb::MessageParser<VRNDiscovery> _parser = new pb::MessageParser<VRNDiscovery>(() => new VRNDiscovery());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<VRNDiscovery> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::VRMineNetReflection.Descriptor.MessageTypes[14]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNDiscovery() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNDiscovery(VRNDiscovery other) : this() {
    serverName_ = other.serverName_;
    notes_ = other.notes_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNDiscovery Clone() {
    return new VRNDiscovery(this);
  }

  /// <summary>Field number for the "serverName" field.</summary>
  public const int ServerNameFieldNumber = 1;
  private string serverName_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string ServerName {
    get { return serverName_; }
    set {
      serverName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "notes" field.</summary>
  public const int NotesFieldNumber = 100;
  private static readonly pb::FieldCodec<string> _repeated_notes_codec
      = pb::FieldCodec.ForString(802);
  private readonly pbc::RepeatedField<string> notes_ = new pbc::RepeatedField<string>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<string> Notes {
    get { return notes_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as VRNDiscovery);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(VRNDiscovery other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ServerName != other.ServerName) return false;
    if(!notes_.Equals(other.notes_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (ServerName.Length != 0) hash ^= ServerName.GetHashCode();
    hash ^= notes_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (ServerName.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(ServerName);
    }
    notes_.WriteTo(output, _repeated_notes_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (ServerName.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ServerName);
    }
    size += notes_.CalculateSize(_repeated_notes_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(VRNDiscovery other) {
    if (other == null) {
      return;
    }
    if (other.ServerName.Length != 0) {
      ServerName = other.ServerName;
    }
    notes_.Add(other.notes_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          ServerName = input.ReadString();
          break;
        }
        case 802: {
          notes_.AddEntriesFrom(input, _repeated_notes_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class VRNRequestWorldState : pb::IMessage<VRNRequestWorldState> {
  private static readonly pb::MessageParser<VRNRequestWorldState> _parser = new pb::MessageParser<VRNRequestWorldState>(() => new VRNRequestWorldState());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<VRNRequestWorldState> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::VRMineNetReflection.Descriptor.MessageTypes[15]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNRequestWorldState() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNRequestWorldState(VRNRequestWorldState other) : this() {
    clientID_ = other.clientID_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNRequestWorldState Clone() {
    return new VRNRequestWorldState(this);
  }

  /// <summary>Field number for the "clientID" field.</summary>
  public const int ClientIDFieldNumber = 1;
  private int clientID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ClientID {
    get { return clientID_; }
    set {
      clientID_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as VRNRequestWorldState);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(VRNRequestWorldState other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ClientID != other.ClientID) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (ClientID != 0) hash ^= ClientID.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (ClientID != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(ClientID);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (ClientID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ClientID);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(VRNRequestWorldState other) {
    if (other == null) {
      return;
    }
    if (other.ClientID != 0) {
      ClientID = other.ClientID;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          ClientID = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class VRNCalibrationOffsetData : pb::IMessage<VRNCalibrationOffsetData> {
  private static readonly pb::MessageParser<VRNCalibrationOffsetData> _parser = new pb::MessageParser<VRNCalibrationOffsetData>(() => new VRNCalibrationOffsetData());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<VRNCalibrationOffsetData> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::VRMineNetReflection.Descriptor.MessageTypes[16]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNCalibrationOffsetData() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNCalibrationOffsetData(VRNCalibrationOffsetData other) : this() {
    clientID_ = other.clientID_;
    playerID_ = other.playerID_;
    offsetPos_ = other.offsetPos_ != null ? other.offsetPos_.Clone() : null;
    offsetRot_ = other.offsetRot_ != null ? other.offsetRot_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNCalibrationOffsetData Clone() {
    return new VRNCalibrationOffsetData(this);
  }

  /// <summary>Field number for the "clientID" field.</summary>
  public const int ClientIDFieldNumber = 1;
  private int clientID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ClientID {
    get { return clientID_; }
    set {
      clientID_ = value;
    }
  }

  /// <summary>Field number for the "playerID" field.</summary>
  public const int PlayerIDFieldNumber = 2;
  private int playerID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int PlayerID {
    get { return playerID_; }
    set {
      playerID_ = value;
    }
  }

  /// <summary>Field number for the "offsetPos" field.</summary>
  public const int OffsetPosFieldNumber = 3;
  private global::VRNVector3 offsetPos_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::VRNVector3 OffsetPos {
    get { return offsetPos_; }
    set {
      offsetPos_ = value;
    }
  }

  /// <summary>Field number for the "offsetRot" field.</summary>
  public const int OffsetRotFieldNumber = 4;
  private global::VRNQuaternion offsetRot_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::VRNQuaternion OffsetRot {
    get { return offsetRot_; }
    set {
      offsetRot_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as VRNCalibrationOffsetData);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(VRNCalibrationOffsetData other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ClientID != other.ClientID) return false;
    if (PlayerID != other.PlayerID) return false;
    if (!object.Equals(OffsetPos, other.OffsetPos)) return false;
    if (!object.Equals(OffsetRot, other.OffsetRot)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (ClientID != 0) hash ^= ClientID.GetHashCode();
    if (PlayerID != 0) hash ^= PlayerID.GetHashCode();
    if (offsetPos_ != null) hash ^= OffsetPos.GetHashCode();
    if (offsetRot_ != null) hash ^= OffsetRot.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (ClientID != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(ClientID);
    }
    if (PlayerID != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(PlayerID);
    }
    if (offsetPos_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(OffsetPos);
    }
    if (offsetRot_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(OffsetRot);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (ClientID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ClientID);
    }
    if (PlayerID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerID);
    }
    if (offsetPos_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(OffsetPos);
    }
    if (offsetRot_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(OffsetRot);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(VRNCalibrationOffsetData other) {
    if (other == null) {
      return;
    }
    if (other.ClientID != 0) {
      ClientID = other.ClientID;
    }
    if (other.PlayerID != 0) {
      PlayerID = other.PlayerID;
    }
    if (other.offsetPos_ != null) {
      if (offsetPos_ == null) {
        OffsetPos = new global::VRNVector3();
      }
      OffsetPos.MergeFrom(other.OffsetPos);
    }
    if (other.offsetRot_ != null) {
      if (offsetRot_ == null) {
        OffsetRot = new global::VRNQuaternion();
      }
      OffsetRot.MergeFrom(other.OffsetRot);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          ClientID = input.ReadInt32();
          break;
        }
        case 16: {
          PlayerID = input.ReadInt32();
          break;
        }
        case 26: {
          if (offsetPos_ == null) {
            OffsetPos = new global::VRNVector3();
          }
          input.ReadMessage(OffsetPos);
          break;
        }
        case 34: {
          if (offsetRot_ == null) {
            OffsetRot = new global::VRNQuaternion();
          }
          input.ReadMessage(OffsetRot);
          break;
        }
      }
    }
  }

}

public sealed partial class VRNCalVerificationData : pb::IMessage<VRNCalVerificationData> {
  private static readonly pb::MessageParser<VRNCalVerificationData> _parser = new pb::MessageParser<VRNCalVerificationData>(() => new VRNCalVerificationData());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<VRNCalVerificationData> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::VRMineNetReflection.Descriptor.MessageTypes[17]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNCalVerificationData() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNCalVerificationData(VRNCalVerificationData other) : this() {
    clientID_ = other.clientID_;
    playerID_ = other.playerID_;
    referencePoint_ = other.referencePoint_ != null ? other.referencePoint_.Clone() : null;
    verificationPoint_ = other.verificationPoint_ != null ? other.verificationPoint_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNCalVerificationData Clone() {
    return new VRNCalVerificationData(this);
  }

  /// <summary>Field number for the "clientID" field.</summary>
  public const int ClientIDFieldNumber = 1;
  private int clientID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ClientID {
    get { return clientID_; }
    set {
      clientID_ = value;
    }
  }

  /// <summary>Field number for the "playerID" field.</summary>
  public const int PlayerIDFieldNumber = 2;
  private int playerID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int PlayerID {
    get { return playerID_; }
    set {
      playerID_ = value;
    }
  }

  /// <summary>Field number for the "referencePoint" field.</summary>
  public const int ReferencePointFieldNumber = 3;
  private global::VRNVector3 referencePoint_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::VRNVector3 ReferencePoint {
    get { return referencePoint_; }
    set {
      referencePoint_ = value;
    }
  }

  /// <summary>Field number for the "verificationPoint" field.</summary>
  public const int VerificationPointFieldNumber = 4;
  private global::VRNVector3 verificationPoint_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::VRNVector3 VerificationPoint {
    get { return verificationPoint_; }
    set {
      verificationPoint_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as VRNCalVerificationData);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(VRNCalVerificationData other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ClientID != other.ClientID) return false;
    if (PlayerID != other.PlayerID) return false;
    if (!object.Equals(ReferencePoint, other.ReferencePoint)) return false;
    if (!object.Equals(VerificationPoint, other.VerificationPoint)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (ClientID != 0) hash ^= ClientID.GetHashCode();
    if (PlayerID != 0) hash ^= PlayerID.GetHashCode();
    if (referencePoint_ != null) hash ^= ReferencePoint.GetHashCode();
    if (verificationPoint_ != null) hash ^= VerificationPoint.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (ClientID != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(ClientID);
    }
    if (PlayerID != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(PlayerID);
    }
    if (referencePoint_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(ReferencePoint);
    }
    if (verificationPoint_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(VerificationPoint);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (ClientID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ClientID);
    }
    if (PlayerID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerID);
    }
    if (referencePoint_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ReferencePoint);
    }
    if (verificationPoint_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(VerificationPoint);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(VRNCalVerificationData other) {
    if (other == null) {
      return;
    }
    if (other.ClientID != 0) {
      ClientID = other.ClientID;
    }
    if (other.PlayerID != 0) {
      PlayerID = other.PlayerID;
    }
    if (other.referencePoint_ != null) {
      if (referencePoint_ == null) {
        ReferencePoint = new global::VRNVector3();
      }
      ReferencePoint.MergeFrom(other.ReferencePoint);
    }
    if (other.verificationPoint_ != null) {
      if (verificationPoint_ == null) {
        VerificationPoint = new global::VRNVector3();
      }
      VerificationPoint.MergeFrom(other.VerificationPoint);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          ClientID = input.ReadInt32();
          break;
        }
        case 16: {
          PlayerID = input.ReadInt32();
          break;
        }
        case 26: {
          if (referencePoint_ == null) {
            ReferencePoint = new global::VRNVector3();
          }
          input.ReadMessage(ReferencePoint);
          break;
        }
        case 34: {
          if (verificationPoint_ == null) {
            VerificationPoint = new global::VRNVector3();
          }
          input.ReadMessage(VerificationPoint);
          break;
        }
      }
    }
  }

}

public sealed partial class VRNStateDataUpdate : pb::IMessage<VRNStateDataUpdate> {
  private static readonly pb::MessageParser<VRNStateDataUpdate> _parser = new pb::MessageParser<VRNStateDataUpdate>(() => new VRNStateDataUpdate());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<VRNStateDataUpdate> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::VRMineNetReflection.Descriptor.MessageTypes[18]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNStateDataUpdate() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNStateDataUpdate(VRNStateDataUpdate other) : this() {
    stateID_ = other.stateID_;
    clientIDSource_ = other.clientIDSource_;
    stateData_ = other.stateData_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNStateDataUpdate Clone() {
    return new VRNStateDataUpdate(this);
  }

  /// <summary>Field number for the "stateID" field.</summary>
  public const int StateIDFieldNumber = 1;
  private string stateID_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string StateID {
    get { return stateID_; }
    set {
      stateID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "clientIDSource" field.</summary>
  public const int ClientIDSourceFieldNumber = 2;
  private int clientIDSource_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ClientIDSource {
    get { return clientIDSource_; }
    set {
      clientIDSource_ = value;
    }
  }

  /// <summary>Field number for the "stateData" field.</summary>
  public const int StateDataFieldNumber = 3;
  private pb::ByteString stateData_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString StateData {
    get { return stateData_; }
    set {
      stateData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as VRNStateDataUpdate);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(VRNStateDataUpdate other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (StateID != other.StateID) return false;
    if (ClientIDSource != other.ClientIDSource) return false;
    if (StateData != other.StateData) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (StateID.Length != 0) hash ^= StateID.GetHashCode();
    if (ClientIDSource != 0) hash ^= ClientIDSource.GetHashCode();
    if (StateData.Length != 0) hash ^= StateData.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (StateID.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(StateID);
    }
    if (ClientIDSource != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(ClientIDSource);
    }
    if (StateData.Length != 0) {
      output.WriteRawTag(26);
      output.WriteBytes(StateData);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (StateID.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(StateID);
    }
    if (ClientIDSource != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ClientIDSource);
    }
    if (StateData.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(StateData);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(VRNStateDataUpdate other) {
    if (other == null) {
      return;
    }
    if (other.StateID.Length != 0) {
      StateID = other.StateID;
    }
    if (other.ClientIDSource != 0) {
      ClientIDSource = other.ClientIDSource;
    }
    if (other.StateData.Length != 0) {
      StateData = other.StateData;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          StateID = input.ReadString();
          break;
        }
        case 16: {
          ClientIDSource = input.ReadInt32();
          break;
        }
        case 26: {
          StateData = input.ReadBytes();
          break;
        }
      }
    }
  }

}

public sealed partial class VRNNetObjSyncMulti : pb::IMessage<VRNNetObjSyncMulti> {
  private static readonly pb::MessageParser<VRNNetObjSyncMulti> _parser = new pb::MessageParser<VRNNetObjSyncMulti>(() => new VRNNetObjSyncMulti());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<VRNNetObjSyncMulti> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::VRMineNetReflection.Descriptor.MessageTypes[19]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNNetObjSyncMulti() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNNetObjSyncMulti(VRNNetObjSyncMulti other) : this() {
    numObjectSyncs_ = other.numObjectSyncs_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNNetObjSyncMulti Clone() {
    return new VRNNetObjSyncMulti(this);
  }

  /// <summary>Field number for the "numObjectSyncs" field.</summary>
  public const int NumObjectSyncsFieldNumber = 1;
  private int numObjectSyncs_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int NumObjectSyncs {
    get { return numObjectSyncs_; }
    set {
      numObjectSyncs_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as VRNNetObjSyncMulti);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(VRNNetObjSyncMulti other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (NumObjectSyncs != other.NumObjectSyncs) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (NumObjectSyncs != 0) hash ^= NumObjectSyncs.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (NumObjectSyncs != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(NumObjectSyncs);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (NumObjectSyncs != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumObjectSyncs);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(VRNNetObjSyncMulti other) {
    if (other == null) {
      return;
    }
    if (other.NumObjectSyncs != 0) {
      NumObjectSyncs = other.NumObjectSyncs;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          NumObjectSyncs = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class VRNNetObjSync : pb::IMessage<VRNNetObjSync> {
  private static readonly pb::MessageParser<VRNNetObjSync> _parser = new pb::MessageParser<VRNNetObjSync>(() => new VRNNetObjSync());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<VRNNetObjSync> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::VRMineNetReflection.Descriptor.MessageTypes[20]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNNetObjSync() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNNetObjSync(VRNNetObjSync other) : this() {
    objID_ = other.objID_;
    ownerID_ = other.ownerID_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNNetObjSync Clone() {
    return new VRNNetObjSync(this);
  }

  /// <summary>Field number for the "objID" field.</summary>
  public const int ObjIDFieldNumber = 1;
  private pb::ByteString objID_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString ObjID {
    get { return objID_; }
    set {
      objID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "ownerID" field.</summary>
  public const int OwnerIDFieldNumber = 2;
  private int ownerID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int OwnerID {
    get { return ownerID_; }
    set {
      ownerID_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as VRNNetObjSync);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(VRNNetObjSync other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ObjID != other.ObjID) return false;
    if (OwnerID != other.OwnerID) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (ObjID.Length != 0) hash ^= ObjID.GetHashCode();
    if (OwnerID != 0) hash ^= OwnerID.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (ObjID.Length != 0) {
      output.WriteRawTag(10);
      output.WriteBytes(ObjID);
    }
    if (OwnerID != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(OwnerID);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (ObjID.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(ObjID);
    }
    if (OwnerID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(OwnerID);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(VRNNetObjSync other) {
    if (other == null) {
      return;
    }
    if (other.ObjID.Length != 0) {
      ObjID = other.ObjID;
    }
    if (other.OwnerID != 0) {
      OwnerID = other.OwnerID;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          ObjID = input.ReadBytes();
          break;
        }
        case 16: {
          OwnerID = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class VRNLinkLineSyncData : pb::IMessage<VRNLinkLineSyncData> {
  private static readonly pb::MessageParser<VRNLinkLineSyncData> _parser = new pb::MessageParser<VRNLinkLineSyncData>(() => new VRNLinkLineSyncData());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<VRNLinkLineSyncData> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::VRMineNetReflection.Descriptor.MessageTypes[21]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNLinkLineSyncData() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNLinkLineSyncData(VRNLinkLineSyncData other) : this() {
    playerSource_ = other.playerSource_;
    clipped_ = other.clipped_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNLinkLineSyncData Clone() {
    return new VRNLinkLineSyncData(this);
  }

  /// <summary>Field number for the "PlayerSource" field.</summary>
  public const int PlayerSourceFieldNumber = 1;
  private int playerSource_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int PlayerSource {
    get { return playerSource_; }
    set {
      playerSource_ = value;
    }
  }

  /// <summary>Field number for the "Clipped" field.</summary>
  public const int ClippedFieldNumber = 2;
  private bool clipped_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Clipped {
    get { return clipped_; }
    set {
      clipped_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as VRNLinkLineSyncData);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(VRNLinkLineSyncData other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerSource != other.PlayerSource) return false;
    if (Clipped != other.Clipped) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerSource != 0) hash ^= PlayerSource.GetHashCode();
    if (Clipped != false) hash ^= Clipped.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerSource != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(PlayerSource);
    }
    if (Clipped != false) {
      output.WriteRawTag(16);
      output.WriteBool(Clipped);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerSource != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerSource);
    }
    if (Clipped != false) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(VRNLinkLineSyncData other) {
    if (other == null) {
      return;
    }
    if (other.PlayerSource != 0) {
      PlayerSource = other.PlayerSource;
    }
    if (other.Clipped != false) {
      Clipped = other.Clipped;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerSource = input.ReadInt32();
          break;
        }
        case 16: {
          Clipped = input.ReadBool();
          break;
        }
      }
    }
  }

}

public sealed partial class VRNPhysicsSyncData : pb::IMessage<VRNPhysicsSyncData> {
  private static readonly pb::MessageParser<VRNPhysicsSyncData> _parser = new pb::MessageParser<VRNPhysicsSyncData>(() => new VRNPhysicsSyncData());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<VRNPhysicsSyncData> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::VRMineNetReflection.Descriptor.MessageTypes[22]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNPhysicsSyncData() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNPhysicsSyncData(VRNPhysicsSyncData other) : this() {
    position_ = other.position_ != null ? other.position_.Clone() : null;
    rotation_ = other.rotation_ != null ? other.rotation_.Clone() : null;
    velocity_ = other.velocity_ != null ? other.velocity_.Clone() : null;
    angularVelocity_ = other.angularVelocity_ != null ? other.angularVelocity_.Clone() : null;
    isKinematic_ = other.isKinematic_;
    useGravity_ = other.useGravity_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNPhysicsSyncData Clone() {
    return new VRNPhysicsSyncData(this);
  }

  /// <summary>Field number for the "position" field.</summary>
  public const int PositionFieldNumber = 1;
  private global::VRNVector3 position_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::VRNVector3 Position {
    get { return position_; }
    set {
      position_ = value;
    }
  }

  /// <summary>Field number for the "rotation" field.</summary>
  public const int RotationFieldNumber = 2;
  private global::VRNQuaternion rotation_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::VRNQuaternion Rotation {
    get { return rotation_; }
    set {
      rotation_ = value;
    }
  }

  /// <summary>Field number for the "velocity" field.</summary>
  public const int VelocityFieldNumber = 3;
  private global::VRNVector3 velocity_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::VRNVector3 Velocity {
    get { return velocity_; }
    set {
      velocity_ = value;
    }
  }

  /// <summary>Field number for the "angularVelocity" field.</summary>
  public const int AngularVelocityFieldNumber = 4;
  private global::VRNVector3 angularVelocity_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::VRNVector3 AngularVelocity {
    get { return angularVelocity_; }
    set {
      angularVelocity_ = value;
    }
  }

  /// <summary>Field number for the "isKinematic" field.</summary>
  public const int IsKinematicFieldNumber = 5;
  private bool isKinematic_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsKinematic {
    get { return isKinematic_; }
    set {
      isKinematic_ = value;
    }
  }

  /// <summary>Field number for the "useGravity" field.</summary>
  public const int UseGravityFieldNumber = 6;
  private bool useGravity_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool UseGravity {
    get { return useGravity_; }
    set {
      useGravity_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as VRNPhysicsSyncData);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(VRNPhysicsSyncData other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Position, other.Position)) return false;
    if (!object.Equals(Rotation, other.Rotation)) return false;
    if (!object.Equals(Velocity, other.Velocity)) return false;
    if (!object.Equals(AngularVelocity, other.AngularVelocity)) return false;
    if (IsKinematic != other.IsKinematic) return false;
    if (UseGravity != other.UseGravity) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (position_ != null) hash ^= Position.GetHashCode();
    if (rotation_ != null) hash ^= Rotation.GetHashCode();
    if (velocity_ != null) hash ^= Velocity.GetHashCode();
    if (angularVelocity_ != null) hash ^= AngularVelocity.GetHashCode();
    if (IsKinematic != false) hash ^= IsKinematic.GetHashCode();
    if (UseGravity != false) hash ^= UseGravity.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (position_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Position);
    }
    if (rotation_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(Rotation);
    }
    if (velocity_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(Velocity);
    }
    if (angularVelocity_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(AngularVelocity);
    }
    if (IsKinematic != false) {
      output.WriteRawTag(40);
      output.WriteBool(IsKinematic);
    }
    if (UseGravity != false) {
      output.WriteRawTag(48);
      output.WriteBool(UseGravity);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (position_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
    }
    if (rotation_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rotation);
    }
    if (velocity_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Velocity);
    }
    if (angularVelocity_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(AngularVelocity);
    }
    if (IsKinematic != false) {
      size += 1 + 1;
    }
    if (UseGravity != false) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(VRNPhysicsSyncData other) {
    if (other == null) {
      return;
    }
    if (other.position_ != null) {
      if (position_ == null) {
        Position = new global::VRNVector3();
      }
      Position.MergeFrom(other.Position);
    }
    if (other.rotation_ != null) {
      if (rotation_ == null) {
        Rotation = new global::VRNQuaternion();
      }
      Rotation.MergeFrom(other.Rotation);
    }
    if (other.velocity_ != null) {
      if (velocity_ == null) {
        Velocity = new global::VRNVector3();
      }
      Velocity.MergeFrom(other.Velocity);
    }
    if (other.angularVelocity_ != null) {
      if (angularVelocity_ == null) {
        AngularVelocity = new global::VRNVector3();
      }
      AngularVelocity.MergeFrom(other.AngularVelocity);
    }
    if (other.IsKinematic != false) {
      IsKinematic = other.IsKinematic;
    }
    if (other.UseGravity != false) {
      UseGravity = other.UseGravity;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (position_ == null) {
            Position = new global::VRNVector3();
          }
          input.ReadMessage(Position);
          break;
        }
        case 18: {
          if (rotation_ == null) {
            Rotation = new global::VRNQuaternion();
          }
          input.ReadMessage(Rotation);
          break;
        }
        case 26: {
          if (velocity_ == null) {
            Velocity = new global::VRNVector3();
          }
          input.ReadMessage(Velocity);
          break;
        }
        case 34: {
          if (angularVelocity_ == null) {
            AngularVelocity = new global::VRNVector3();
          }
          input.ReadMessage(AngularVelocity);
          break;
        }
        case 40: {
          IsKinematic = input.ReadBool();
          break;
        }
        case 48: {
          UseGravity = input.ReadBool();
          break;
        }
      }
    }
  }

}

public sealed partial class VRNLaserPointerState : pb::IMessage<VRNLaserPointerState> {
  private static readonly pb::MessageParser<VRNLaserPointerState> _parser = new pb::MessageParser<VRNLaserPointerState>(() => new VRNLaserPointerState());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<VRNLaserPointerState> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::VRMineNetReflection.Descriptor.MessageTypes[23]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNLaserPointerState() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNLaserPointerState(VRNLaserPointerState other) : this() {
    isLaserEnabled_ = other.isLaserEnabled_;
    laserMode_ = other.laserMode_;
    laserActivationLevel_ = other.laserActivationLevel_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNLaserPointerState Clone() {
    return new VRNLaserPointerState(this);
  }

  /// <summary>Field number for the "isLaserEnabled" field.</summary>
  public const int IsLaserEnabledFieldNumber = 1;
  private bool isLaserEnabled_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsLaserEnabled {
    get { return isLaserEnabled_; }
    set {
      isLaserEnabled_ = value;
    }
  }

  /// <summary>Field number for the "laserMode" field.</summary>
  public const int LaserModeFieldNumber = 2;
  private int laserMode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int LaserMode {
    get { return laserMode_; }
    set {
      laserMode_ = value;
    }
  }

  /// <summary>Field number for the "laserActivationLevel" field.</summary>
  public const int LaserActivationLevelFieldNumber = 3;
  private float laserActivationLevel_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float LaserActivationLevel {
    get { return laserActivationLevel_; }
    set {
      laserActivationLevel_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as VRNLaserPointerState);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(VRNLaserPointerState other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (IsLaserEnabled != other.IsLaserEnabled) return false;
    if (LaserMode != other.LaserMode) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(LaserActivationLevel, other.LaserActivationLevel)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (IsLaserEnabled != false) hash ^= IsLaserEnabled.GetHashCode();
    if (LaserMode != 0) hash ^= LaserMode.GetHashCode();
    if (LaserActivationLevel != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(LaserActivationLevel);
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (IsLaserEnabled != false) {
      output.WriteRawTag(8);
      output.WriteBool(IsLaserEnabled);
    }
    if (LaserMode != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(LaserMode);
    }
    if (LaserActivationLevel != 0F) {
      output.WriteRawTag(29);
      output.WriteFloat(LaserActivationLevel);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (IsLaserEnabled != false) {
      size += 1 + 1;
    }
    if (LaserMode != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(LaserMode);
    }
    if (LaserActivationLevel != 0F) {
      size += 1 + 4;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(VRNLaserPointerState other) {
    if (other == null) {
      return;
    }
    if (other.IsLaserEnabled != false) {
      IsLaserEnabled = other.IsLaserEnabled;
    }
    if (other.LaserMode != 0) {
      LaserMode = other.LaserMode;
    }
    if (other.LaserActivationLevel != 0F) {
      LaserActivationLevel = other.LaserActivationLevel;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          IsLaserEnabled = input.ReadBool();
          break;
        }
        case 16: {
          LaserMode = input.ReadInt32();
          break;
        }
        case 29: {
          LaserActivationLevel = input.ReadFloat();
          break;
        }
      }
    }
  }

}

public sealed partial class VRNInteractionData : pb::IMessage<VRNInteractionData> {
  private static readonly pb::MessageParser<VRNInteractionData> _parser = new pb::MessageParser<VRNInteractionData>(() => new VRNInteractionData());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<VRNInteractionData> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::VRMineNetReflection.Descriptor.MessageTypes[24]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNInteractionData() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNInteractionData(VRNInteractionData other) : this() {
    interaction_ = other.interaction_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNInteractionData Clone() {
    return new VRNInteractionData(this);
  }

  /// <summary>Field number for the "Interaction" field.</summary>
  public const int InteractionFieldNumber = 1;
  private global::VRNVRInteraction interaction_ = global::VRNVRInteraction.VriNone;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::VRNVRInteraction Interaction {
    get { return interaction_; }
    set {
      interaction_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as VRNInteractionData);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(VRNInteractionData other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Interaction != other.Interaction) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Interaction != global::VRNVRInteraction.VriNone) hash ^= Interaction.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Interaction != global::VRNVRInteraction.VriNone) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Interaction);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Interaction != global::VRNVRInteraction.VriNone) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Interaction);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(VRNInteractionData other) {
    if (other == null) {
      return;
    }
    if (other.Interaction != global::VRNVRInteraction.VriNone) {
      Interaction = other.Interaction;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Interaction = (global::VRNVRInteraction) input.ReadEnum();
          break;
        }
      }
    }
  }

}

public sealed partial class VRNRequestJoinWorld : pb::IMessage<VRNRequestJoinWorld> {
  private static readonly pb::MessageParser<VRNRequestJoinWorld> _parser = new pb::MessageParser<VRNRequestJoinWorld>(() => new VRNRequestJoinWorld());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<VRNRequestJoinWorld> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::VRMineNetReflection.Descriptor.MessageTypes[25]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNRequestJoinWorld() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNRequestJoinWorld(VRNRequestJoinWorld other) : this() {
    playerName_ = other.playerName_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNRequestJoinWorld Clone() {
    return new VRNRequestJoinWorld(this);
  }

  /// <summary>Field number for the "playerName" field.</summary>
  public const int PlayerNameFieldNumber = 1;
  private string playerName_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string PlayerName {
    get { return playerName_; }
    set {
      playerName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as VRNRequestJoinWorld);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(VRNRequestJoinWorld other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerName != other.PlayerName) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerName.Length != 0) hash ^= PlayerName.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerName.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(PlayerName);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerName.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerName);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(VRNRequestJoinWorld other) {
    if (other == null) {
      return;
    }
    if (other.PlayerName.Length != 0) {
      PlayerName = other.PlayerName;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          PlayerName = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class VRNRequestJoinServer : pb::IMessage<VRNRequestJoinServer> {
  private static readonly pb::MessageParser<VRNRequestJoinServer> _parser = new pb::MessageParser<VRNRequestJoinServer>(() => new VRNRequestJoinServer());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<VRNRequestJoinServer> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::VRMineNetReflection.Descriptor.MessageTypes[26]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNRequestJoinServer() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNRequestJoinServer(VRNRequestJoinServer other) : this() {
    clientName_ = other.clientName_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNRequestJoinServer Clone() {
    return new VRNRequestJoinServer(this);
  }

  /// <summary>Field number for the "clientName" field.</summary>
  public const int ClientNameFieldNumber = 1;
  private string clientName_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string ClientName {
    get { return clientName_; }
    set {
      clientName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as VRNRequestJoinServer);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(VRNRequestJoinServer other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ClientName != other.ClientName) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (ClientName.Length != 0) hash ^= ClientName.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (ClientName.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(ClientName);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (ClientName.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientName);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(VRNRequestJoinServer other) {
    if (other == null) {
      return;
    }
    if (other.ClientName.Length != 0) {
      ClientName = other.ClientName;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          ClientName = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class VRNRequestNewPlayerID : pb::IMessage<VRNRequestNewPlayerID> {
  private static readonly pb::MessageParser<VRNRequestNewPlayerID> _parser = new pb::MessageParser<VRNRequestNewPlayerID>(() => new VRNRequestNewPlayerID());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<VRNRequestNewPlayerID> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::VRMineNetReflection.Descriptor.MessageTypes[27]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNRequestNewPlayerID() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNRequestNewPlayerID(VRNRequestNewPlayerID other) : this() {
    clientID_ = other.clientID_;
    playerName_ = other.playerName_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNRequestNewPlayerID Clone() {
    return new VRNRequestNewPlayerID(this);
  }

  /// <summary>Field number for the "clientID" field.</summary>
  public const int ClientIDFieldNumber = 1;
  private int clientID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ClientID {
    get { return clientID_; }
    set {
      clientID_ = value;
    }
  }

  /// <summary>Field number for the "playerName" field.</summary>
  public const int PlayerNameFieldNumber = 2;
  private string playerName_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string PlayerName {
    get { return playerName_; }
    set {
      playerName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as VRNRequestNewPlayerID);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(VRNRequestNewPlayerID other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ClientID != other.ClientID) return false;
    if (PlayerName != other.PlayerName) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (ClientID != 0) hash ^= ClientID.GetHashCode();
    if (PlayerName.Length != 0) hash ^= PlayerName.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (ClientID != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(ClientID);
    }
    if (PlayerName.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(PlayerName);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (ClientID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ClientID);
    }
    if (PlayerName.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerName);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(VRNRequestNewPlayerID other) {
    if (other == null) {
      return;
    }
    if (other.ClientID != 0) {
      ClientID = other.ClientID;
    }
    if (other.PlayerName.Length != 0) {
      PlayerName = other.PlayerName;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          ClientID = input.ReadInt32();
          break;
        }
        case 18: {
          PlayerName = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class VRNRequestOwnership : pb::IMessage<VRNRequestOwnership> {
  private static readonly pb::MessageParser<VRNRequestOwnership> _parser = new pb::MessageParser<VRNRequestOwnership>(() => new VRNRequestOwnership());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<VRNRequestOwnership> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::VRMineNetReflection.Descriptor.MessageTypes[28]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNRequestOwnership() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNRequestOwnership(VRNRequestOwnership other) : this() {
    objID_ = other.objID_;
    clientID_ = other.clientID_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNRequestOwnership Clone() {
    return new VRNRequestOwnership(this);
  }

  /// <summary>Field number for the "objID" field.</summary>
  public const int ObjIDFieldNumber = 1;
  private pb::ByteString objID_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString ObjID {
    get { return objID_; }
    set {
      objID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "clientID" field.</summary>
  public const int ClientIDFieldNumber = 2;
  private int clientID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ClientID {
    get { return clientID_; }
    set {
      clientID_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as VRNRequestOwnership);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(VRNRequestOwnership other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ObjID != other.ObjID) return false;
    if (ClientID != other.ClientID) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (ObjID.Length != 0) hash ^= ObjID.GetHashCode();
    if (ClientID != 0) hash ^= ClientID.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (ObjID.Length != 0) {
      output.WriteRawTag(10);
      output.WriteBytes(ObjID);
    }
    if (ClientID != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(ClientID);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (ObjID.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(ObjID);
    }
    if (ClientID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ClientID);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(VRNRequestOwnership other) {
    if (other == null) {
      return;
    }
    if (other.ObjID.Length != 0) {
      ObjID = other.ObjID;
    }
    if (other.ClientID != 0) {
      ClientID = other.ClientID;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          ObjID = input.ReadBytes();
          break;
        }
        case 16: {
          ClientID = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class VRNRequestMineAtmosphere : pb::IMessage<VRNRequestMineAtmosphere> {
  private static readonly pb::MessageParser<VRNRequestMineAtmosphere> _parser = new pb::MessageParser<VRNRequestMineAtmosphere>(() => new VRNRequestMineAtmosphere());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<VRNRequestMineAtmosphere> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::VRMineNetReflection.Descriptor.MessageTypes[29]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNRequestMineAtmosphere() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNRequestMineAtmosphere(VRNRequestMineAtmosphere other) : this() {
    position_ = other.position_ != null ? other.position_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNRequestMineAtmosphere Clone() {
    return new VRNRequestMineAtmosphere(this);
  }

  /// <summary>Field number for the "position" field.</summary>
  public const int PositionFieldNumber = 1;
  private global::VRNVector3 position_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::VRNVector3 Position {
    get { return position_; }
    set {
      position_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as VRNRequestMineAtmosphere);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(VRNRequestMineAtmosphere other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Position, other.Position)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (position_ != null) hash ^= Position.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (position_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Position);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (position_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(VRNRequestMineAtmosphere other) {
    if (other == null) {
      return;
    }
    if (other.position_ != null) {
      if (position_ == null) {
        Position = new global::VRNVector3();
      }
      Position.MergeFrom(other.Position);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (position_ == null) {
            Position = new global::VRNVector3();
          }
          input.ReadMessage(Position);
          break;
        }
      }
    }
  }

}

public sealed partial class VRNSendMineAtmosphere : pb::IMessage<VRNSendMineAtmosphere> {
  private static readonly pb::MessageParser<VRNSendMineAtmosphere> _parser = new pb::MessageParser<VRNSendMineAtmosphere>(() => new VRNSendMineAtmosphere());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<VRNSendMineAtmosphere> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::VRMineNetReflection.Descriptor.MessageTypes[30]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNSendMineAtmosphere() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNSendMineAtmosphere(VRNSendMineAtmosphere other) : this() {
    position_ = other.position_ != null ? other.position_.Clone() : null;
    oxygen_ = other.oxygen_;
    carbonMonoxide_ = other.carbonMonoxide_;
    methane_ = other.methane_;
    hydrogenSulfide_ = other.hydrogenSulfide_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNSendMineAtmosphere Clone() {
    return new VRNSendMineAtmosphere(this);
  }

  /// <summary>Field number for the "position" field.</summary>
  public const int PositionFieldNumber = 1;
  private global::VRNVector3 position_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::VRNVector3 Position {
    get { return position_; }
    set {
      position_ = value;
    }
  }

  /// <summary>Field number for the "Oxygen" field.</summary>
  public const int OxygenFieldNumber = 2;
  private float oxygen_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Oxygen {
    get { return oxygen_; }
    set {
      oxygen_ = value;
    }
  }

  /// <summary>Field number for the "CarbonMonoxide" field.</summary>
  public const int CarbonMonoxideFieldNumber = 3;
  private float carbonMonoxide_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float CarbonMonoxide {
    get { return carbonMonoxide_; }
    set {
      carbonMonoxide_ = value;
    }
  }

  /// <summary>Field number for the "Methane" field.</summary>
  public const int MethaneFieldNumber = 4;
  private float methane_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Methane {
    get { return methane_; }
    set {
      methane_ = value;
    }
  }

  /// <summary>Field number for the "HydrogenSulfide" field.</summary>
  public const int HydrogenSulfideFieldNumber = 5;
  private float hydrogenSulfide_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float HydrogenSulfide {
    get { return hydrogenSulfide_; }
    set {
      hydrogenSulfide_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as VRNSendMineAtmosphere);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(VRNSendMineAtmosphere other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Position, other.Position)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Oxygen, other.Oxygen)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CarbonMonoxide, other.CarbonMonoxide)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Methane, other.Methane)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(HydrogenSulfide, other.HydrogenSulfide)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (position_ != null) hash ^= Position.GetHashCode();
    if (Oxygen != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Oxygen);
    if (CarbonMonoxide != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CarbonMonoxide);
    if (Methane != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Methane);
    if (HydrogenSulfide != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(HydrogenSulfide);
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (position_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Position);
    }
    if (Oxygen != 0F) {
      output.WriteRawTag(21);
      output.WriteFloat(Oxygen);
    }
    if (CarbonMonoxide != 0F) {
      output.WriteRawTag(29);
      output.WriteFloat(CarbonMonoxide);
    }
    if (Methane != 0F) {
      output.WriteRawTag(37);
      output.WriteFloat(Methane);
    }
    if (HydrogenSulfide != 0F) {
      output.WriteRawTag(45);
      output.WriteFloat(HydrogenSulfide);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (position_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
    }
    if (Oxygen != 0F) {
      size += 1 + 4;
    }
    if (CarbonMonoxide != 0F) {
      size += 1 + 4;
    }
    if (Methane != 0F) {
      size += 1 + 4;
    }
    if (HydrogenSulfide != 0F) {
      size += 1 + 4;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(VRNSendMineAtmosphere other) {
    if (other == null) {
      return;
    }
    if (other.position_ != null) {
      if (position_ == null) {
        Position = new global::VRNVector3();
      }
      Position.MergeFrom(other.Position);
    }
    if (other.Oxygen != 0F) {
      Oxygen = other.Oxygen;
    }
    if (other.CarbonMonoxide != 0F) {
      CarbonMonoxide = other.CarbonMonoxide;
    }
    if (other.Methane != 0F) {
      Methane = other.Methane;
    }
    if (other.HydrogenSulfide != 0F) {
      HydrogenSulfide = other.HydrogenSulfide;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (position_ == null) {
            Position = new global::VRNVector3();
          }
          input.ReadMessage(Position);
          break;
        }
        case 21: {
          Oxygen = input.ReadFloat();
          break;
        }
        case 29: {
          CarbonMonoxide = input.ReadFloat();
          break;
        }
        case 37: {
          Methane = input.ReadFloat();
          break;
        }
        case 45: {
          HydrogenSulfide = input.ReadFloat();
          break;
        }
      }
    }
  }

}

public sealed partial class VRNSpawnObject : pb::IMessage<VRNSpawnObject> {
  private static readonly pb::MessageParser<VRNSpawnObject> _parser = new pb::MessageParser<VRNSpawnObject>(() => new VRNSpawnObject());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<VRNSpawnObject> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::VRMineNetReflection.Descriptor.MessageTypes[31]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNSpawnObject() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNSpawnObject(VRNSpawnObject other) : this() {
    objID_ = other.objID_;
    ownerID_ = other.ownerID_;
    assetID_ = other.assetID_;
    spawnActivated_ = other.spawnActivated_;
    startPosition_ = other.startPosition_ != null ? other.startPosition_.Clone() : null;
    sceneID_ = other.sceneID_;
    ownerExclusive_ = other.ownerExclusive_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNSpawnObject Clone() {
    return new VRNSpawnObject(this);
  }

  /// <summary>Field number for the "objID" field.</summary>
  public const int ObjIDFieldNumber = 1;
  private pb::ByteString objID_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString ObjID {
    get { return objID_; }
    set {
      objID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "ownerID" field.</summary>
  public const int OwnerIDFieldNumber = 2;
  private int ownerID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int OwnerID {
    get { return ownerID_; }
    set {
      ownerID_ = value;
    }
  }

  /// <summary>Field number for the "assetID" field.</summary>
  public const int AssetIDFieldNumber = 3;
  private string assetID_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string AssetID {
    get { return assetID_; }
    set {
      assetID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "spawnActivated" field.</summary>
  public const int SpawnActivatedFieldNumber = 4;
  private bool spawnActivated_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool SpawnActivated {
    get { return spawnActivated_; }
    set {
      spawnActivated_ = value;
    }
  }

  /// <summary>Field number for the "startPosition" field.</summary>
  public const int StartPositionFieldNumber = 5;
  private global::VRNTransformData startPosition_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::VRNTransformData StartPosition {
    get { return startPosition_; }
    set {
      startPosition_ = value;
    }
  }

  /// <summary>Field number for the "sceneID" field.</summary>
  public const int SceneIDFieldNumber = 6;
  private int sceneID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int SceneID {
    get { return sceneID_; }
    set {
      sceneID_ = value;
    }
  }

  /// <summary>Field number for the "ownerExclusive" field.</summary>
  public const int OwnerExclusiveFieldNumber = 7;
  private bool ownerExclusive_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool OwnerExclusive {
    get { return ownerExclusive_; }
    set {
      ownerExclusive_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as VRNSpawnObject);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(VRNSpawnObject other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ObjID != other.ObjID) return false;
    if (OwnerID != other.OwnerID) return false;
    if (AssetID != other.AssetID) return false;
    if (SpawnActivated != other.SpawnActivated) return false;
    if (!object.Equals(StartPosition, other.StartPosition)) return false;
    if (SceneID != other.SceneID) return false;
    if (OwnerExclusive != other.OwnerExclusive) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (ObjID.Length != 0) hash ^= ObjID.GetHashCode();
    if (OwnerID != 0) hash ^= OwnerID.GetHashCode();
    if (AssetID.Length != 0) hash ^= AssetID.GetHashCode();
    if (SpawnActivated != false) hash ^= SpawnActivated.GetHashCode();
    if (startPosition_ != null) hash ^= StartPosition.GetHashCode();
    if (SceneID != 0) hash ^= SceneID.GetHashCode();
    if (OwnerExclusive != false) hash ^= OwnerExclusive.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (ObjID.Length != 0) {
      output.WriteRawTag(10);
      output.WriteBytes(ObjID);
    }
    if (OwnerID != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(OwnerID);
    }
    if (AssetID.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(AssetID);
    }
    if (SpawnActivated != false) {
      output.WriteRawTag(32);
      output.WriteBool(SpawnActivated);
    }
    if (startPosition_ != null) {
      output.WriteRawTag(42);
      output.WriteMessage(StartPosition);
    }
    if (SceneID != 0) {
      output.WriteRawTag(48);
      output.WriteInt32(SceneID);
    }
    if (OwnerExclusive != false) {
      output.WriteRawTag(56);
      output.WriteBool(OwnerExclusive);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (ObjID.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(ObjID);
    }
    if (OwnerID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(OwnerID);
    }
    if (AssetID.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(AssetID);
    }
    if (SpawnActivated != false) {
      size += 1 + 1;
    }
    if (startPosition_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(StartPosition);
    }
    if (SceneID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(SceneID);
    }
    if (OwnerExclusive != false) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(VRNSpawnObject other) {
    if (other == null) {
      return;
    }
    if (other.ObjID.Length != 0) {
      ObjID = other.ObjID;
    }
    if (other.OwnerID != 0) {
      OwnerID = other.OwnerID;
    }
    if (other.AssetID.Length != 0) {
      AssetID = other.AssetID;
    }
    if (other.SpawnActivated != false) {
      SpawnActivated = other.SpawnActivated;
    }
    if (other.startPosition_ != null) {
      if (startPosition_ == null) {
        StartPosition = new global::VRNTransformData();
      }
      StartPosition.MergeFrom(other.StartPosition);
    }
    if (other.SceneID != 0) {
      SceneID = other.SceneID;
    }
    if (other.OwnerExclusive != false) {
      OwnerExclusive = other.OwnerExclusive;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          ObjID = input.ReadBytes();
          break;
        }
        case 16: {
          OwnerID = input.ReadInt32();
          break;
        }
        case 26: {
          AssetID = input.ReadString();
          break;
        }
        case 32: {
          SpawnActivated = input.ReadBool();
          break;
        }
        case 42: {
          if (startPosition_ == null) {
            StartPosition = new global::VRNTransformData();
          }
          input.ReadMessage(StartPosition);
          break;
        }
        case 48: {
          SceneID = input.ReadInt32();
          break;
        }
        case 56: {
          OwnerExclusive = input.ReadBool();
          break;
        }
      }
    }
  }

}

public sealed partial class VRNNetworkUpdateRate : pb::IMessage<VRNNetworkUpdateRate> {
  private static readonly pb::MessageParser<VRNNetworkUpdateRate> _parser = new pb::MessageParser<VRNNetworkUpdateRate>(() => new VRNNetworkUpdateRate());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<VRNNetworkUpdateRate> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::VRMineNetReflection.Descriptor.MessageTypes[32]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNNetworkUpdateRate() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNNetworkUpdateRate(VRNNetworkUpdateRate other) : this() {
    objectUpdateRate_ = other.objectUpdateRate_;
    vRUpdateRate_ = other.vRUpdateRate_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNNetworkUpdateRate Clone() {
    return new VRNNetworkUpdateRate(this);
  }

  /// <summary>Field number for the "ObjectUpdateRate" field.</summary>
  public const int ObjectUpdateRateFieldNumber = 2;
  private float objectUpdateRate_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float ObjectUpdateRate {
    get { return objectUpdateRate_; }
    set {
      objectUpdateRate_ = value;
    }
  }

  /// <summary>Field number for the "VRUpdateRate" field.</summary>
  public const int VRUpdateRateFieldNumber = 3;
  private float vRUpdateRate_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float VRUpdateRate {
    get { return vRUpdateRate_; }
    set {
      vRUpdateRate_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as VRNNetworkUpdateRate);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(VRNNetworkUpdateRate other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ObjectUpdateRate, other.ObjectUpdateRate)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(VRUpdateRate, other.VRUpdateRate)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (ObjectUpdateRate != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ObjectUpdateRate);
    if (VRUpdateRate != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(VRUpdateRate);
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (ObjectUpdateRate != 0F) {
      output.WriteRawTag(21);
      output.WriteFloat(ObjectUpdateRate);
    }
    if (VRUpdateRate != 0F) {
      output.WriteRawTag(29);
      output.WriteFloat(VRUpdateRate);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (ObjectUpdateRate != 0F) {
      size += 1 + 4;
    }
    if (VRUpdateRate != 0F) {
      size += 1 + 4;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(VRNNetworkUpdateRate other) {
    if (other == null) {
      return;
    }
    if (other.ObjectUpdateRate != 0F) {
      ObjectUpdateRate = other.ObjectUpdateRate;
    }
    if (other.VRUpdateRate != 0F) {
      VRUpdateRate = other.VRUpdateRate;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 21: {
          ObjectUpdateRate = input.ReadFloat();
          break;
        }
        case 29: {
          VRUpdateRate = input.ReadFloat();
          break;
        }
      }
    }
  }

}

public sealed partial class VRNNetworkedObjectList : pb::IMessage<VRNNetworkedObjectList> {
  private static readonly pb::MessageParser<VRNNetworkedObjectList> _parser = new pb::MessageParser<VRNNetworkedObjectList>(() => new VRNNetworkedObjectList());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<VRNNetworkedObjectList> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::VRMineNetReflection.Descriptor.MessageTypes[33]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNNetworkedObjectList() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNNetworkedObjectList(VRNNetworkedObjectList other) : this() {
    sceneID_ = other.sceneID_;
    objectList_ = other.objectList_.Clone();
    destroyedSceneObjects_ = other.destroyedSceneObjects_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNNetworkedObjectList Clone() {
    return new VRNNetworkedObjectList(this);
  }

  /// <summary>Field number for the "sceneID" field.</summary>
  public const int SceneIDFieldNumber = 1;
  private int sceneID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int SceneID {
    get { return sceneID_; }
    set {
      sceneID_ = value;
    }
  }

  /// <summary>Field number for the "ObjectList" field.</summary>
  public const int ObjectListFieldNumber = 3;
  private static readonly pb::FieldCodec<global::VRNSpawnObject> _repeated_objectList_codec
      = pb::FieldCodec.ForMessage(26, global::VRNSpawnObject.Parser);
  private readonly pbc::RepeatedField<global::VRNSpawnObject> objectList_ = new pbc::RepeatedField<global::VRNSpawnObject>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::VRNSpawnObject> ObjectList {
    get { return objectList_; }
  }

  /// <summary>Field number for the "DestroyedSceneObjects" field.</summary>
  public const int DestroyedSceneObjectsFieldNumber = 4;
  private static readonly pb::FieldCodec<pb::ByteString> _repeated_destroyedSceneObjects_codec
      = pb::FieldCodec.ForBytes(34);
  private readonly pbc::RepeatedField<pb::ByteString> destroyedSceneObjects_ = new pbc::RepeatedField<pb::ByteString>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<pb::ByteString> DestroyedSceneObjects {
    get { return destroyedSceneObjects_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as VRNNetworkedObjectList);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(VRNNetworkedObjectList other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SceneID != other.SceneID) return false;
    if(!objectList_.Equals(other.objectList_)) return false;
    if(!destroyedSceneObjects_.Equals(other.destroyedSceneObjects_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (SceneID != 0) hash ^= SceneID.GetHashCode();
    hash ^= objectList_.GetHashCode();
    hash ^= destroyedSceneObjects_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (SceneID != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(SceneID);
    }
    objectList_.WriteTo(output, _repeated_objectList_codec);
    destroyedSceneObjects_.WriteTo(output, _repeated_destroyedSceneObjects_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (SceneID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(SceneID);
    }
    size += objectList_.CalculateSize(_repeated_objectList_codec);
    size += destroyedSceneObjects_.CalculateSize(_repeated_destroyedSceneObjects_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(VRNNetworkedObjectList other) {
    if (other == null) {
      return;
    }
    if (other.SceneID != 0) {
      SceneID = other.SceneID;
    }
    objectList_.Add(other.objectList_);
    destroyedSceneObjects_.Add(other.destroyedSceneObjects_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          SceneID = input.ReadInt32();
          break;
        }
        case 26: {
          objectList_.AddEntriesFrom(input, _repeated_objectList_codec);
          break;
        }
        case 34: {
          destroyedSceneObjects_.AddEntriesFrom(input, _repeated_destroyedSceneObjects_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class VRNDestroyObject : pb::IMessage<VRNDestroyObject> {
  private static readonly pb::MessageParser<VRNDestroyObject> _parser = new pb::MessageParser<VRNDestroyObject>(() => new VRNDestroyObject());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<VRNDestroyObject> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::VRMineNetReflection.Descriptor.MessageTypes[34]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNDestroyObject() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNDestroyObject(VRNDestroyObject other) : this() {
    objID_ = other.objID_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNDestroyObject Clone() {
    return new VRNDestroyObject(this);
  }

  /// <summary>Field number for the "objID" field.</summary>
  public const int ObjIDFieldNumber = 1;
  private pb::ByteString objID_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString ObjID {
    get { return objID_; }
    set {
      objID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as VRNDestroyObject);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(VRNDestroyObject other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ObjID != other.ObjID) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (ObjID.Length != 0) hash ^= ObjID.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (ObjID.Length != 0) {
      output.WriteRawTag(10);
      output.WriteBytes(ObjID);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (ObjID.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(ObjID);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(VRNDestroyObject other) {
    if (other == null) {
      return;
    }
    if (other.ObjID.Length != 0) {
      ObjID = other.ObjID;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          ObjID = input.ReadBytes();
          break;
        }
      }
    }
  }

}

public sealed partial class VRNSetOwner : pb::IMessage<VRNSetOwner> {
  private static readonly pb::MessageParser<VRNSetOwner> _parser = new pb::MessageParser<VRNSetOwner>(() => new VRNSetOwner());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<VRNSetOwner> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::VRMineNetReflection.Descriptor.MessageTypes[35]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNSetOwner() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNSetOwner(VRNSetOwner other) : this() {
    objID_ = other.objID_;
    ownerClientID_ = other.ownerClientID_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNSetOwner Clone() {
    return new VRNSetOwner(this);
  }

  /// <summary>Field number for the "objID" field.</summary>
  public const int ObjIDFieldNumber = 1;
  private pb::ByteString objID_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString ObjID {
    get { return objID_; }
    set {
      objID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "ownerClientID" field.</summary>
  public const int OwnerClientIDFieldNumber = 2;
  private int ownerClientID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int OwnerClientID {
    get { return ownerClientID_; }
    set {
      ownerClientID_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as VRNSetOwner);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(VRNSetOwner other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ObjID != other.ObjID) return false;
    if (OwnerClientID != other.OwnerClientID) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (ObjID.Length != 0) hash ^= ObjID.GetHashCode();
    if (OwnerClientID != 0) hash ^= OwnerClientID.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (ObjID.Length != 0) {
      output.WriteRawTag(10);
      output.WriteBytes(ObjID);
    }
    if (OwnerClientID != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(OwnerClientID);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (ObjID.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(ObjID);
    }
    if (OwnerClientID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(OwnerClientID);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(VRNSetOwner other) {
    if (other == null) {
      return;
    }
    if (other.ObjID.Length != 0) {
      ObjID = other.ObjID;
    }
    if (other.OwnerClientID != 0) {
      OwnerClientID = other.OwnerClientID;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          ObjID = input.ReadBytes();
          break;
        }
        case 16: {
          OwnerClientID = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class VRNAssignClientInfo : pb::IMessage<VRNAssignClientInfo> {
  private static readonly pb::MessageParser<VRNAssignClientInfo> _parser = new pb::MessageParser<VRNAssignClientInfo>(() => new VRNAssignClientInfo());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<VRNAssignClientInfo> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::VRMineNetReflection.Descriptor.MessageTypes[36]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNAssignClientInfo() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNAssignClientInfo(VRNAssignClientInfo other) : this() {
    clientID_ = other.clientID_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNAssignClientInfo Clone() {
    return new VRNAssignClientInfo(this);
  }

  /// <summary>Field number for the "clientID" field.</summary>
  public const int ClientIDFieldNumber = 1;
  private int clientID_;
  /// <summary>
  ///int32 playerID = 2;
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ClientID {
    get { return clientID_; }
    set {
      clientID_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as VRNAssignClientInfo);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(VRNAssignClientInfo other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ClientID != other.ClientID) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (ClientID != 0) hash ^= ClientID.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (ClientID != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(ClientID);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (ClientID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ClientID);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(VRNAssignClientInfo other) {
    if (other == null) {
      return;
    }
    if (other.ClientID != 0) {
      ClientID = other.ClientID;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          ClientID = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class VRNAssignPlayerID : pb::IMessage<VRNAssignPlayerID> {
  private static readonly pb::MessageParser<VRNAssignPlayerID> _parser = new pb::MessageParser<VRNAssignPlayerID>(() => new VRNAssignPlayerID());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<VRNAssignPlayerID> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::VRMineNetReflection.Descriptor.MessageTypes[37]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNAssignPlayerID() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNAssignPlayerID(VRNAssignPlayerID other) : this() {
    clientID_ = other.clientID_;
    playerID_ = other.playerID_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNAssignPlayerID Clone() {
    return new VRNAssignPlayerID(this);
  }

  /// <summary>Field number for the "clientID" field.</summary>
  public const int ClientIDFieldNumber = 1;
  private int clientID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ClientID {
    get { return clientID_; }
    set {
      clientID_ = value;
    }
  }

  /// <summary>Field number for the "playerID" field.</summary>
  public const int PlayerIDFieldNumber = 2;
  private int playerID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int PlayerID {
    get { return playerID_; }
    set {
      playerID_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as VRNAssignPlayerID);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(VRNAssignPlayerID other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ClientID != other.ClientID) return false;
    if (PlayerID != other.PlayerID) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (ClientID != 0) hash ^= ClientID.GetHashCode();
    if (PlayerID != 0) hash ^= PlayerID.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (ClientID != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(ClientID);
    }
    if (PlayerID != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(PlayerID);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (ClientID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ClientID);
    }
    if (PlayerID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerID);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(VRNAssignPlayerID other) {
    if (other == null) {
      return;
    }
    if (other.ClientID != 0) {
      ClientID = other.ClientID;
    }
    if (other.PlayerID != 0) {
      PlayerID = other.PlayerID;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          ClientID = input.ReadInt32();
          break;
        }
        case 16: {
          PlayerID = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class VRNAssignPlayerRole : pb::IMessage<VRNAssignPlayerRole> {
  private static readonly pb::MessageParser<VRNAssignPlayerRole> _parser = new pb::MessageParser<VRNAssignPlayerRole>(() => new VRNAssignPlayerRole());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<VRNAssignPlayerRole> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::VRMineNetReflection.Descriptor.MessageTypes[38]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNAssignPlayerRole() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNAssignPlayerRole(VRNAssignPlayerRole other) : this() {
    playerID_ = other.playerID_;
    role_ = other.role_;
    leftHandDominant_ = other.leftHandDominant_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNAssignPlayerRole Clone() {
    return new VRNAssignPlayerRole(this);
  }

  /// <summary>Field number for the "playerID" field.</summary>
  public const int PlayerIDFieldNumber = 1;
  private int playerID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int PlayerID {
    get { return playerID_; }
    set {
      playerID_ = value;
    }
  }

  /// <summary>Field number for the "Role" field.</summary>
  public const int RoleFieldNumber = 2;
  private global::VRNPlayerRole role_ = global::VRNPlayerRole.UnknownRole;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::VRNPlayerRole Role {
    get { return role_; }
    set {
      role_ = value;
    }
  }

  /// <summary>Field number for the "leftHandDominant" field.</summary>
  public const int LeftHandDominantFieldNumber = 3;
  private bool leftHandDominant_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool LeftHandDominant {
    get { return leftHandDominant_; }
    set {
      leftHandDominant_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as VRNAssignPlayerRole);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(VRNAssignPlayerRole other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerID != other.PlayerID) return false;
    if (Role != other.Role) return false;
    if (LeftHandDominant != other.LeftHandDominant) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerID != 0) hash ^= PlayerID.GetHashCode();
    if (Role != global::VRNPlayerRole.UnknownRole) hash ^= Role.GetHashCode();
    if (LeftHandDominant != false) hash ^= LeftHandDominant.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerID != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(PlayerID);
    }
    if (Role != global::VRNPlayerRole.UnknownRole) {
      output.WriteRawTag(16);
      output.WriteEnum((int) Role);
    }
    if (LeftHandDominant != false) {
      output.WriteRawTag(24);
      output.WriteBool(LeftHandDominant);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerID);
    }
    if (Role != global::VRNPlayerRole.UnknownRole) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Role);
    }
    if (LeftHandDominant != false) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(VRNAssignPlayerRole other) {
    if (other == null) {
      return;
    }
    if (other.PlayerID != 0) {
      PlayerID = other.PlayerID;
    }
    if (other.Role != global::VRNPlayerRole.UnknownRole) {
      Role = other.Role;
    }
    if (other.LeftHandDominant != false) {
      LeftHandDominant = other.LeftHandDominant;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerID = input.ReadInt32();
          break;
        }
        case 16: {
          Role = (global::VRNPlayerRole) input.ReadEnum();
          break;
        }
        case 24: {
          LeftHandDominant = input.ReadBool();
          break;
        }
      }
    }
  }

}

public sealed partial class VRNTransformData : pb::IMessage<VRNTransformData> {
  private static readonly pb::MessageParser<VRNTransformData> _parser = new pb::MessageParser<VRNTransformData>(() => new VRNTransformData());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<VRNTransformData> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::VRMineNetReflection.Descriptor.MessageTypes[39]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNTransformData() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNTransformData(VRNTransformData other) : this() {
    rotation_ = other.rotation_ != null ? other.rotation_.Clone() : null;
    position_ = other.position_ != null ? other.position_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNTransformData Clone() {
    return new VRNTransformData(this);
  }

  /// <summary>Field number for the "rotation" field.</summary>
  public const int RotationFieldNumber = 1;
  private global::VRNQuaternion rotation_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::VRNQuaternion Rotation {
    get { return rotation_; }
    set {
      rotation_ = value;
    }
  }

  /// <summary>Field number for the "position" field.</summary>
  public const int PositionFieldNumber = 2;
  private global::VRNVector3 position_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::VRNVector3 Position {
    get { return position_; }
    set {
      position_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as VRNTransformData);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(VRNTransformData other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Rotation, other.Rotation)) return false;
    if (!object.Equals(Position, other.Position)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (rotation_ != null) hash ^= Rotation.GetHashCode();
    if (position_ != null) hash ^= Position.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (rotation_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Rotation);
    }
    if (position_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(Position);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (rotation_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rotation);
    }
    if (position_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(VRNTransformData other) {
    if (other == null) {
      return;
    }
    if (other.rotation_ != null) {
      if (rotation_ == null) {
        Rotation = new global::VRNQuaternion();
      }
      Rotation.MergeFrom(other.Rotation);
    }
    if (other.position_ != null) {
      if (position_ == null) {
        Position = new global::VRNVector3();
      }
      Position.MergeFrom(other.Position);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (rotation_ == null) {
            Rotation = new global::VRNQuaternion();
          }
          input.ReadMessage(Rotation);
          break;
        }
        case 18: {
          if (position_ == null) {
            Position = new global::VRNVector3();
          }
          input.ReadMessage(Position);
          break;
        }
      }
    }
  }

}

public sealed partial class VRNTextMessage : pb::IMessage<VRNTextMessage> {
  private static readonly pb::MessageParser<VRNTextMessage> _parser = new pb::MessageParser<VRNTextMessage>(() => new VRNTextMessage());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<VRNTextMessage> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::VRMineNetReflection.Descriptor.MessageTypes[40]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNTextMessage() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNTextMessage(VRNTextMessage other) : this() {
    message_ = other.message_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNTextMessage Clone() {
    return new VRNTextMessage(this);
  }

  /// <summary>Field number for the "message" field.</summary>
  public const int MessageFieldNumber = 1;
  private string message_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Message {
    get { return message_; }
    set {
      message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as VRNTextMessage);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(VRNTextMessage other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Message != other.Message) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Message.Length != 0) hash ^= Message.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Message.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Message);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Message.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(VRNTextMessage other) {
    if (other == null) {
      return;
    }
    if (other.Message.Length != 0) {
      Message = other.Message;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Message = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class VRNFloatData : pb::IMessage<VRNFloatData> {
  private static readonly pb::MessageParser<VRNFloatData> _parser = new pb::MessageParser<VRNFloatData>(() => new VRNFloatData());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<VRNFloatData> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::VRMineNetReflection.Descriptor.MessageTypes[41]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNFloatData() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNFloatData(VRNFloatData other) : this() {
    floatData_ = other.floatData_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNFloatData Clone() {
    return new VRNFloatData(this);
  }

  /// <summary>Field number for the "floatData" field.</summary>
  public const int FloatDataFieldNumber = 1;
  private float floatData_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float FloatData {
    get { return floatData_; }
    set {
      floatData_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as VRNFloatData);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(VRNFloatData other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FloatData, other.FloatData)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (FloatData != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FloatData);
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (FloatData != 0F) {
      output.WriteRawTag(13);
      output.WriteFloat(FloatData);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (FloatData != 0F) {
      size += 1 + 4;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(VRNFloatData other) {
    if (other == null) {
      return;
    }
    if (other.FloatData != 0F) {
      FloatData = other.FloatData;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 13: {
          FloatData = input.ReadFloat();
          break;
        }
      }
    }
  }

}

public sealed partial class VRNBoolData : pb::IMessage<VRNBoolData> {
  private static readonly pb::MessageParser<VRNBoolData> _parser = new pb::MessageParser<VRNBoolData>(() => new VRNBoolData());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<VRNBoolData> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::VRMineNetReflection.Descriptor.MessageTypes[42]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNBoolData() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNBoolData(VRNBoolData other) : this() {
    boolData_ = other.boolData_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNBoolData Clone() {
    return new VRNBoolData(this);
  }

  /// <summary>Field number for the "boolData" field.</summary>
  public const int BoolDataFieldNumber = 1;
  private bool boolData_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool BoolData {
    get { return boolData_; }
    set {
      boolData_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as VRNBoolData);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(VRNBoolData other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (BoolData != other.BoolData) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (BoolData != false) hash ^= BoolData.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (BoolData != false) {
      output.WriteRawTag(8);
      output.WriteBool(BoolData);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (BoolData != false) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(VRNBoolData other) {
    if (other == null) {
      return;
    }
    if (other.BoolData != false) {
      BoolData = other.BoolData;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          BoolData = input.ReadBool();
          break;
        }
      }
    }
  }

}

public sealed partial class VRNPlayerList : pb::IMessage<VRNPlayerList> {
  private static readonly pb::MessageParser<VRNPlayerList> _parser = new pb::MessageParser<VRNPlayerList>(() => new VRNPlayerList());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<VRNPlayerList> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::VRMineNetReflection.Descriptor.MessageTypes[43]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNPlayerList() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNPlayerList(VRNPlayerList other) : this() {
    playerList_ = other.playerList_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNPlayerList Clone() {
    return new VRNPlayerList(this);
  }

  /// <summary>Field number for the "PlayerList" field.</summary>
  public const int PlayerListFieldNumber = 1;
  private static readonly pb::FieldCodec<global::VRNVRPlayerInfo> _repeated_playerList_codec
      = pb::FieldCodec.ForMessage(10, global::VRNVRPlayerInfo.Parser);
  private readonly pbc::RepeatedField<global::VRNVRPlayerInfo> playerList_ = new pbc::RepeatedField<global::VRNVRPlayerInfo>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::VRNVRPlayerInfo> PlayerList {
    get { return playerList_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as VRNPlayerList);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(VRNPlayerList other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!playerList_.Equals(other.playerList_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= playerList_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    playerList_.WriteTo(output, _repeated_playerList_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += playerList_.CalculateSize(_repeated_playerList_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(VRNPlayerList other) {
    if (other == null) {
      return;
    }
    playerList_.Add(other.playerList_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          playerList_.AddEntriesFrom(input, _repeated_playerList_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class VRNVRPlayerInfo : pb::IMessage<VRNVRPlayerInfo> {
  private static readonly pb::MessageParser<VRNVRPlayerInfo> _parser = new pb::MessageParser<VRNVRPlayerInfo>(() => new VRNVRPlayerInfo());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<VRNVRPlayerInfo> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::VRMineNetReflection.Descriptor.MessageTypes[44]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNVRPlayerInfo() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNVRPlayerInfo(VRNVRPlayerInfo other) : this() {
    clientID_ = other.clientID_;
    playerID_ = other.playerID_;
    name_ = other.name_;
    role_ = other.role_;
    onLinkLine_ = other.onLinkLine_;
    head_ = other.head_ != null ? other.head_.Clone() : null;
    leftController_ = other.leftController_ != null ? other.leftController_.Clone() : null;
    rightController_ = other.rightController_ != null ? other.rightController_.Clone() : null;
    leftControllerTracked_ = other.leftControllerTracked_;
    rightControllerTracked_ = other.rightControllerTracked_;
    rigOffset_ = other.rigOffset_ != null ? other.rigOffset_.Clone() : null;
    playerHeight_ = other.playerHeight_;
    leftGrip_ = other.leftGrip_;
    rightGrip_ = other.rightGrip_;
    playerMode_ = other.playerMode_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNVRPlayerInfo Clone() {
    return new VRNVRPlayerInfo(this);
  }

  /// <summary>Field number for the "clientID" field.</summary>
  public const int ClientIDFieldNumber = 1;
  private int clientID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ClientID {
    get { return clientID_; }
    set {
      clientID_ = value;
    }
  }

  /// <summary>Field number for the "playerID" field.</summary>
  public const int PlayerIDFieldNumber = 2;
  private int playerID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int PlayerID {
    get { return playerID_; }
    set {
      playerID_ = value;
    }
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 6;
  private string name_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "Role" field.</summary>
  public const int RoleFieldNumber = 7;
  private global::VRNPlayerRole role_ = global::VRNPlayerRole.UnknownRole;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::VRNPlayerRole Role {
    get { return role_; }
    set {
      role_ = value;
    }
  }

  /// <summary>Field number for the "onLinkLine" field.</summary>
  public const int OnLinkLineFieldNumber = 8;
  private bool onLinkLine_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool OnLinkLine {
    get { return onLinkLine_; }
    set {
      onLinkLine_ = value;
    }
  }

  /// <summary>Field number for the "head" field.</summary>
  public const int HeadFieldNumber = 3;
  private global::VRNTransformData head_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::VRNTransformData Head {
    get { return head_; }
    set {
      head_ = value;
    }
  }

  /// <summary>Field number for the "leftController" field.</summary>
  public const int LeftControllerFieldNumber = 4;
  private global::VRNTransformData leftController_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::VRNTransformData LeftController {
    get { return leftController_; }
    set {
      leftController_ = value;
    }
  }

  /// <summary>Field number for the "rightController" field.</summary>
  public const int RightControllerFieldNumber = 5;
  private global::VRNTransformData rightController_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::VRNTransformData RightController {
    get { return rightController_; }
    set {
      rightController_ = value;
    }
  }

  /// <summary>Field number for the "leftControllerTracked" field.</summary>
  public const int LeftControllerTrackedFieldNumber = 14;
  private bool leftControllerTracked_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool LeftControllerTracked {
    get { return leftControllerTracked_; }
    set {
      leftControllerTracked_ = value;
    }
  }

  /// <summary>Field number for the "rightControllerTracked" field.</summary>
  public const int RightControllerTrackedFieldNumber = 15;
  private bool rightControllerTracked_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool RightControllerTracked {
    get { return rightControllerTracked_; }
    set {
      rightControllerTracked_ = value;
    }
  }

  /// <summary>Field number for the "rigOffset" field.</summary>
  public const int RigOffsetFieldNumber = 9;
  private global::VRNTransformData rigOffset_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::VRNTransformData RigOffset {
    get { return rigOffset_; }
    set {
      rigOffset_ = value;
    }
  }

  /// <summary>Field number for the "playerHeight" field.</summary>
  public const int PlayerHeightFieldNumber = 10;
  private float playerHeight_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float PlayerHeight {
    get { return playerHeight_; }
    set {
      playerHeight_ = value;
    }
  }

  /// <summary>Field number for the "leftGrip" field.</summary>
  public const int LeftGripFieldNumber = 11;
  private bool leftGrip_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool LeftGrip {
    get { return leftGrip_; }
    set {
      leftGrip_ = value;
    }
  }

  /// <summary>Field number for the "rightGrip" field.</summary>
  public const int RightGripFieldNumber = 12;
  private bool rightGrip_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool RightGrip {
    get { return rightGrip_; }
    set {
      rightGrip_ = value;
    }
  }

  /// <summary>Field number for the "playerMode" field.</summary>
  public const int PlayerModeFieldNumber = 13;
  private int playerMode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int PlayerMode {
    get { return playerMode_; }
    set {
      playerMode_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as VRNVRPlayerInfo);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(VRNVRPlayerInfo other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ClientID != other.ClientID) return false;
    if (PlayerID != other.PlayerID) return false;
    if (Name != other.Name) return false;
    if (Role != other.Role) return false;
    if (OnLinkLine != other.OnLinkLine) return false;
    if (!object.Equals(Head, other.Head)) return false;
    if (!object.Equals(LeftController, other.LeftController)) return false;
    if (!object.Equals(RightController, other.RightController)) return false;
    if (LeftControllerTracked != other.LeftControllerTracked) return false;
    if (RightControllerTracked != other.RightControllerTracked) return false;
    if (!object.Equals(RigOffset, other.RigOffset)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PlayerHeight, other.PlayerHeight)) return false;
    if (LeftGrip != other.LeftGrip) return false;
    if (RightGrip != other.RightGrip) return false;
    if (PlayerMode != other.PlayerMode) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (ClientID != 0) hash ^= ClientID.GetHashCode();
    if (PlayerID != 0) hash ^= PlayerID.GetHashCode();
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    if (Role != global::VRNPlayerRole.UnknownRole) hash ^= Role.GetHashCode();
    if (OnLinkLine != false) hash ^= OnLinkLine.GetHashCode();
    if (head_ != null) hash ^= Head.GetHashCode();
    if (leftController_ != null) hash ^= LeftController.GetHashCode();
    if (rightController_ != null) hash ^= RightController.GetHashCode();
    if (LeftControllerTracked != false) hash ^= LeftControllerTracked.GetHashCode();
    if (RightControllerTracked != false) hash ^= RightControllerTracked.GetHashCode();
    if (rigOffset_ != null) hash ^= RigOffset.GetHashCode();
    if (PlayerHeight != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PlayerHeight);
    if (LeftGrip != false) hash ^= LeftGrip.GetHashCode();
    if (RightGrip != false) hash ^= RightGrip.GetHashCode();
    if (PlayerMode != 0) hash ^= PlayerMode.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (ClientID != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(ClientID);
    }
    if (PlayerID != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(PlayerID);
    }
    if (head_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(Head);
    }
    if (leftController_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(LeftController);
    }
    if (rightController_ != null) {
      output.WriteRawTag(42);
      output.WriteMessage(RightController);
    }
    if (Name.Length != 0) {
      output.WriteRawTag(50);
      output.WriteString(Name);
    }
    if (Role != global::VRNPlayerRole.UnknownRole) {
      output.WriteRawTag(56);
      output.WriteEnum((int) Role);
    }
    if (OnLinkLine != false) {
      output.WriteRawTag(64);
      output.WriteBool(OnLinkLine);
    }
    if (rigOffset_ != null) {
      output.WriteRawTag(74);
      output.WriteMessage(RigOffset);
    }
    if (PlayerHeight != 0F) {
      output.WriteRawTag(85);
      output.WriteFloat(PlayerHeight);
    }
    if (LeftGrip != false) {
      output.WriteRawTag(88);
      output.WriteBool(LeftGrip);
    }
    if (RightGrip != false) {
      output.WriteRawTag(96);
      output.WriteBool(RightGrip);
    }
    if (PlayerMode != 0) {
      output.WriteRawTag(104);
      output.WriteInt32(PlayerMode);
    }
    if (LeftControllerTracked != false) {
      output.WriteRawTag(112);
      output.WriteBool(LeftControllerTracked);
    }
    if (RightControllerTracked != false) {
      output.WriteRawTag(120);
      output.WriteBool(RightControllerTracked);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (ClientID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ClientID);
    }
    if (PlayerID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerID);
    }
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (Role != global::VRNPlayerRole.UnknownRole) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Role);
    }
    if (OnLinkLine != false) {
      size += 1 + 1;
    }
    if (head_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Head);
    }
    if (leftController_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(LeftController);
    }
    if (rightController_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(RightController);
    }
    if (LeftControllerTracked != false) {
      size += 1 + 1;
    }
    if (RightControllerTracked != false) {
      size += 1 + 1;
    }
    if (rigOffset_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(RigOffset);
    }
    if (PlayerHeight != 0F) {
      size += 1 + 4;
    }
    if (LeftGrip != false) {
      size += 1 + 1;
    }
    if (RightGrip != false) {
      size += 1 + 1;
    }
    if (PlayerMode != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerMode);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(VRNVRPlayerInfo other) {
    if (other == null) {
      return;
    }
    if (other.ClientID != 0) {
      ClientID = other.ClientID;
    }
    if (other.PlayerID != 0) {
      PlayerID = other.PlayerID;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
    if (other.Role != global::VRNPlayerRole.UnknownRole) {
      Role = other.Role;
    }
    if (other.OnLinkLine != false) {
      OnLinkLine = other.OnLinkLine;
    }
    if (other.head_ != null) {
      if (head_ == null) {
        Head = new global::VRNTransformData();
      }
      Head.MergeFrom(other.Head);
    }
    if (other.leftController_ != null) {
      if (leftController_ == null) {
        LeftController = new global::VRNTransformData();
      }
      LeftController.MergeFrom(other.LeftController);
    }
    if (other.rightController_ != null) {
      if (rightController_ == null) {
        RightController = new global::VRNTransformData();
      }
      RightController.MergeFrom(other.RightController);
    }
    if (other.LeftControllerTracked != false) {
      LeftControllerTracked = other.LeftControllerTracked;
    }
    if (other.RightControllerTracked != false) {
      RightControllerTracked = other.RightControllerTracked;
    }
    if (other.rigOffset_ != null) {
      if (rigOffset_ == null) {
        RigOffset = new global::VRNTransformData();
      }
      RigOffset.MergeFrom(other.RigOffset);
    }
    if (other.PlayerHeight != 0F) {
      PlayerHeight = other.PlayerHeight;
    }
    if (other.LeftGrip != false) {
      LeftGrip = other.LeftGrip;
    }
    if (other.RightGrip != false) {
      RightGrip = other.RightGrip;
    }
    if (other.PlayerMode != 0) {
      PlayerMode = other.PlayerMode;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          ClientID = input.ReadInt32();
          break;
        }
        case 16: {
          PlayerID = input.ReadInt32();
          break;
        }
        case 26: {
          if (head_ == null) {
            Head = new global::VRNTransformData();
          }
          input.ReadMessage(Head);
          break;
        }
        case 34: {
          if (leftController_ == null) {
            LeftController = new global::VRNTransformData();
          }
          input.ReadMessage(LeftController);
          break;
        }
        case 42: {
          if (rightController_ == null) {
            RightController = new global::VRNTransformData();
          }
          input.ReadMessage(RightController);
          break;
        }
        case 50: {
          Name = input.ReadString();
          break;
        }
        case 56: {
          Role = (global::VRNPlayerRole) input.ReadEnum();
          break;
        }
        case 64: {
          OnLinkLine = input.ReadBool();
          break;
        }
        case 74: {
          if (rigOffset_ == null) {
            RigOffset = new global::VRNTransformData();
          }
          input.ReadMessage(RigOffset);
          break;
        }
        case 85: {
          PlayerHeight = input.ReadFloat();
          break;
        }
        case 88: {
          LeftGrip = input.ReadBool();
          break;
        }
        case 96: {
          RightGrip = input.ReadBool();
          break;
        }
        case 104: {
          PlayerMode = input.ReadInt32();
          break;
        }
        case 112: {
          LeftControllerTracked = input.ReadBool();
          break;
        }
        case 120: {
          RightControllerTracked = input.ReadBool();
          break;
        }
      }
    }
  }

}

public sealed partial class VRNBG4SimData : pb::IMessage<VRNBG4SimData> {
  private static readonly pb::MessageParser<VRNBG4SimData> _parser = new pb::MessageParser<VRNBG4SimData>(() => new VRNBG4SimData());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<VRNBG4SimData> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::VRMineNetReflection.Descriptor.MessageTypes[45]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNBG4SimData() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNBG4SimData(VRNBG4SimData other) : this() {
    clientID_ = other.clientID_;
    playerID_ = other.playerID_;
    alarmState_ = other.alarmState_;
    oxygenPressure_ = other.oxygenPressure_;
    baselinePressure_ = other.baselinePressure_;
    remainingTime_ = other.remainingTime_;
    lowPressure_ = other.lowPressure_;
    criticalPressure_ = other.criticalPressure_;
    oxygenCylOpen_ = other.oxygenCylOpen_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNBG4SimData Clone() {
    return new VRNBG4SimData(this);
  }

  /// <summary>Field number for the "clientID" field.</summary>
  public const int ClientIDFieldNumber = 1;
  private int clientID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ClientID {
    get { return clientID_; }
    set {
      clientID_ = value;
    }
  }

  /// <summary>Field number for the "playerID" field.</summary>
  public const int PlayerIDFieldNumber = 2;
  private int playerID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int PlayerID {
    get { return playerID_; }
    set {
      playerID_ = value;
    }
  }

  /// <summary>Field number for the "alarmState" field.</summary>
  public const int AlarmStateFieldNumber = 3;
  private global::VRNBG4AlarmState alarmState_ = global::VRNBG4AlarmState.Off;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::VRNBG4AlarmState AlarmState {
    get { return alarmState_; }
    set {
      alarmState_ = value;
    }
  }

  /// <summary>Field number for the "oxygenPressure" field.</summary>
  public const int OxygenPressureFieldNumber = 4;
  private int oxygenPressure_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int OxygenPressure {
    get { return oxygenPressure_; }
    set {
      oxygenPressure_ = value;
    }
  }

  /// <summary>Field number for the "baselinePressure" field.</summary>
  public const int BaselinePressureFieldNumber = 5;
  private int baselinePressure_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int BaselinePressure {
    get { return baselinePressure_; }
    set {
      baselinePressure_ = value;
    }
  }

  /// <summary>Field number for the "remainingTime" field.</summary>
  public const int RemainingTimeFieldNumber = 6;
  private int remainingTime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int RemainingTime {
    get { return remainingTime_; }
    set {
      remainingTime_ = value;
    }
  }

  /// <summary>Field number for the "lowPressure" field.</summary>
  public const int LowPressureFieldNumber = 7;
  private bool lowPressure_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool LowPressure {
    get { return lowPressure_; }
    set {
      lowPressure_ = value;
    }
  }

  /// <summary>Field number for the "criticalPressure" field.</summary>
  public const int CriticalPressureFieldNumber = 8;
  private bool criticalPressure_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool CriticalPressure {
    get { return criticalPressure_; }
    set {
      criticalPressure_ = value;
    }
  }

  /// <summary>Field number for the "oxygenCylOpen" field.</summary>
  public const int OxygenCylOpenFieldNumber = 9;
  private bool oxygenCylOpen_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool OxygenCylOpen {
    get { return oxygenCylOpen_; }
    set {
      oxygenCylOpen_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as VRNBG4SimData);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(VRNBG4SimData other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ClientID != other.ClientID) return false;
    if (PlayerID != other.PlayerID) return false;
    if (AlarmState != other.AlarmState) return false;
    if (OxygenPressure != other.OxygenPressure) return false;
    if (BaselinePressure != other.BaselinePressure) return false;
    if (RemainingTime != other.RemainingTime) return false;
    if (LowPressure != other.LowPressure) return false;
    if (CriticalPressure != other.CriticalPressure) return false;
    if (OxygenCylOpen != other.OxygenCylOpen) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (ClientID != 0) hash ^= ClientID.GetHashCode();
    if (PlayerID != 0) hash ^= PlayerID.GetHashCode();
    if (AlarmState != global::VRNBG4AlarmState.Off) hash ^= AlarmState.GetHashCode();
    if (OxygenPressure != 0) hash ^= OxygenPressure.GetHashCode();
    if (BaselinePressure != 0) hash ^= BaselinePressure.GetHashCode();
    if (RemainingTime != 0) hash ^= RemainingTime.GetHashCode();
    if (LowPressure != false) hash ^= LowPressure.GetHashCode();
    if (CriticalPressure != false) hash ^= CriticalPressure.GetHashCode();
    if (OxygenCylOpen != false) hash ^= OxygenCylOpen.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (ClientID != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(ClientID);
    }
    if (PlayerID != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(PlayerID);
    }
    if (AlarmState != global::VRNBG4AlarmState.Off) {
      output.WriteRawTag(24);
      output.WriteEnum((int) AlarmState);
    }
    if (OxygenPressure != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(OxygenPressure);
    }
    if (BaselinePressure != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(BaselinePressure);
    }
    if (RemainingTime != 0) {
      output.WriteRawTag(48);
      output.WriteInt32(RemainingTime);
    }
    if (LowPressure != false) {
      output.WriteRawTag(56);
      output.WriteBool(LowPressure);
    }
    if (CriticalPressure != false) {
      output.WriteRawTag(64);
      output.WriteBool(CriticalPressure);
    }
    if (OxygenCylOpen != false) {
      output.WriteRawTag(72);
      output.WriteBool(OxygenCylOpen);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (ClientID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ClientID);
    }
    if (PlayerID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerID);
    }
    if (AlarmState != global::VRNBG4AlarmState.Off) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) AlarmState);
    }
    if (OxygenPressure != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(OxygenPressure);
    }
    if (BaselinePressure != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(BaselinePressure);
    }
    if (RemainingTime != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(RemainingTime);
    }
    if (LowPressure != false) {
      size += 1 + 1;
    }
    if (CriticalPressure != false) {
      size += 1 + 1;
    }
    if (OxygenCylOpen != false) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(VRNBG4SimData other) {
    if (other == null) {
      return;
    }
    if (other.ClientID != 0) {
      ClientID = other.ClientID;
    }
    if (other.PlayerID != 0) {
      PlayerID = other.PlayerID;
    }
    if (other.AlarmState != global::VRNBG4AlarmState.Off) {
      AlarmState = other.AlarmState;
    }
    if (other.OxygenPressure != 0) {
      OxygenPressure = other.OxygenPressure;
    }
    if (other.BaselinePressure != 0) {
      BaselinePressure = other.BaselinePressure;
    }
    if (other.RemainingTime != 0) {
      RemainingTime = other.RemainingTime;
    }
    if (other.LowPressure != false) {
      LowPressure = other.LowPressure;
    }
    if (other.CriticalPressure != false) {
      CriticalPressure = other.CriticalPressure;
    }
    if (other.OxygenCylOpen != false) {
      OxygenCylOpen = other.OxygenCylOpen;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          ClientID = input.ReadInt32();
          break;
        }
        case 16: {
          PlayerID = input.ReadInt32();
          break;
        }
        case 24: {
          AlarmState = (global::VRNBG4AlarmState) input.ReadEnum();
          break;
        }
        case 32: {
          OxygenPressure = input.ReadInt32();
          break;
        }
        case 40: {
          BaselinePressure = input.ReadInt32();
          break;
        }
        case 48: {
          RemainingTime = input.ReadInt32();
          break;
        }
        case 56: {
          LowPressure = input.ReadBool();
          break;
        }
        case 64: {
          CriticalPressure = input.ReadBool();
          break;
        }
        case 72: {
          OxygenCylOpen = input.ReadBool();
          break;
        }
      }
    }
  }

}

public sealed partial class VRNSentinelInfo : pb::IMessage<VRNSentinelInfo> {
  private static readonly pb::MessageParser<VRNSentinelInfo> _parser = new pb::MessageParser<VRNSentinelInfo>(() => new VRNSentinelInfo());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<VRNSentinelInfo> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::VRMineNetReflection.Descriptor.MessageTypes[46]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNSentinelInfo() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNSentinelInfo(VRNSentinelInfo other) : this() {
    playerID_ = other.playerID_;
    pressure_ = other.pressure_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNSentinelInfo Clone() {
    return new VRNSentinelInfo(this);
  }

  /// <summary>Field number for the "playerID" field.</summary>
  public const int PlayerIDFieldNumber = 1;
  private int playerID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int PlayerID {
    get { return playerID_; }
    set {
      playerID_ = value;
    }
  }

  /// <summary>Field number for the "pressure" field.</summary>
  public const int PressureFieldNumber = 2;
  private float pressure_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Pressure {
    get { return pressure_; }
    set {
      pressure_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as VRNSentinelInfo);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(VRNSentinelInfo other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerID != other.PlayerID) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Pressure, other.Pressure)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerID != 0) hash ^= PlayerID.GetHashCode();
    if (Pressure != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Pressure);
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerID != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(PlayerID);
    }
    if (Pressure != 0F) {
      output.WriteRawTag(21);
      output.WriteFloat(Pressure);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerID);
    }
    if (Pressure != 0F) {
      size += 1 + 4;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(VRNSentinelInfo other) {
    if (other == null) {
      return;
    }
    if (other.PlayerID != 0) {
      PlayerID = other.PlayerID;
    }
    if (other.Pressure != 0F) {
      Pressure = other.Pressure;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerID = input.ReadInt32();
          break;
        }
        case 21: {
          Pressure = input.ReadFloat();
          break;
        }
      }
    }
  }

}

public sealed partial class VRNSpectatorInfo : pb::IMessage<VRNSpectatorInfo> {
  private static readonly pb::MessageParser<VRNSpectatorInfo> _parser = new pb::MessageParser<VRNSpectatorInfo>(() => new VRNSpectatorInfo());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<VRNSpectatorInfo> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::VRMineNetReflection.Descriptor.MessageTypes[47]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNSpectatorInfo() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNSpectatorInfo(VRNSpectatorInfo other) : this() {
    clientID_ = other.clientID_;
    ipAddress_ = other.ipAddress_;
    name_ = other.name_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNSpectatorInfo Clone() {
    return new VRNSpectatorInfo(this);
  }

  /// <summary>Field number for the "clientID" field.</summary>
  public const int ClientIDFieldNumber = 1;
  private int clientID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ClientID {
    get { return clientID_; }
    set {
      clientID_ = value;
    }
  }

  /// <summary>Field number for the "ipAddress" field.</summary>
  public const int IpAddressFieldNumber = 5;
  private string ipAddress_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string IpAddress {
    get { return ipAddress_; }
    set {
      ipAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 6;
  private string name_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as VRNSpectatorInfo);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(VRNSpectatorInfo other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ClientID != other.ClientID) return false;
    if (IpAddress != other.IpAddress) return false;
    if (Name != other.Name) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (ClientID != 0) hash ^= ClientID.GetHashCode();
    if (IpAddress.Length != 0) hash ^= IpAddress.GetHashCode();
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (ClientID != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(ClientID);
    }
    if (IpAddress.Length != 0) {
      output.WriteRawTag(42);
      output.WriteString(IpAddress);
    }
    if (Name.Length != 0) {
      output.WriteRawTag(50);
      output.WriteString(Name);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (ClientID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ClientID);
    }
    if (IpAddress.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(IpAddress);
    }
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(VRNSpectatorInfo other) {
    if (other == null) {
      return;
    }
    if (other.ClientID != 0) {
      ClientID = other.ClientID;
    }
    if (other.IpAddress.Length != 0) {
      IpAddress = other.IpAddress;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          ClientID = input.ReadInt32();
          break;
        }
        case 42: {
          IpAddress = input.ReadString();
          break;
        }
        case 50: {
          Name = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class VRNLoadScene : pb::IMessage<VRNLoadScene> {
  private static readonly pb::MessageParser<VRNLoadScene> _parser = new pb::MessageParser<VRNLoadScene>(() => new VRNLoadScene());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<VRNLoadScene> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::VRMineNetReflection.Descriptor.MessageTypes[48]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNLoadScene() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNLoadScene(VRNLoadScene other) : this() {
    sceneName_ = other.sceneName_;
    allowSceneActivation_ = other.allowSceneActivation_;
    sceneID_ = other.sceneID_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNLoadScene Clone() {
    return new VRNLoadScene(this);
  }

  /// <summary>Field number for the "sceneName" field.</summary>
  public const int SceneNameFieldNumber = 1;
  private string sceneName_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string SceneName {
    get { return sceneName_; }
    set {
      sceneName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "allowSceneActivation" field.</summary>
  public const int AllowSceneActivationFieldNumber = 2;
  private bool allowSceneActivation_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool AllowSceneActivation {
    get { return allowSceneActivation_; }
    set {
      allowSceneActivation_ = value;
    }
  }

  /// <summary>Field number for the "sceneID" field.</summary>
  public const int SceneIDFieldNumber = 3;
  private int sceneID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int SceneID {
    get { return sceneID_; }
    set {
      sceneID_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as VRNLoadScene);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(VRNLoadScene other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SceneName != other.SceneName) return false;
    if (AllowSceneActivation != other.AllowSceneActivation) return false;
    if (SceneID != other.SceneID) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (SceneName.Length != 0) hash ^= SceneName.GetHashCode();
    if (AllowSceneActivation != false) hash ^= AllowSceneActivation.GetHashCode();
    if (SceneID != 0) hash ^= SceneID.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (SceneName.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(SceneName);
    }
    if (AllowSceneActivation != false) {
      output.WriteRawTag(16);
      output.WriteBool(AllowSceneActivation);
    }
    if (SceneID != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(SceneID);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (SceneName.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(SceneName);
    }
    if (AllowSceneActivation != false) {
      size += 1 + 1;
    }
    if (SceneID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(SceneID);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(VRNLoadScene other) {
    if (other == null) {
      return;
    }
    if (other.SceneName.Length != 0) {
      SceneName = other.SceneName;
    }
    if (other.AllowSceneActivation != false) {
      AllowSceneActivation = other.AllowSceneActivation;
    }
    if (other.SceneID != 0) {
      SceneID = other.SceneID;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          SceneName = input.ReadString();
          break;
        }
        case 16: {
          AllowSceneActivation = input.ReadBool();
          break;
        }
        case 24: {
          SceneID = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class VRNClientConnectionStatus : pb::IMessage<VRNClientConnectionStatus> {
  private static readonly pb::MessageParser<VRNClientConnectionStatus> _parser = new pb::MessageParser<VRNClientConnectionStatus>(() => new VRNClientConnectionStatus());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<VRNClientConnectionStatus> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::VRMineNetReflection.Descriptor.MessageTypes[49]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNClientConnectionStatus() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNClientConnectionStatus(VRNClientConnectionStatus other) : this() {
    clientID_ = other.clientID_;
    connected_ = other.connected_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNClientConnectionStatus Clone() {
    return new VRNClientConnectionStatus(this);
  }

  /// <summary>Field number for the "clientID" field.</summary>
  public const int ClientIDFieldNumber = 1;
  private int clientID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ClientID {
    get { return clientID_; }
    set {
      clientID_ = value;
    }
  }

  /// <summary>Field number for the "connected" field.</summary>
  public const int ConnectedFieldNumber = 2;
  private bool connected_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Connected {
    get { return connected_; }
    set {
      connected_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as VRNClientConnectionStatus);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(VRNClientConnectionStatus other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ClientID != other.ClientID) return false;
    if (Connected != other.Connected) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (ClientID != 0) hash ^= ClientID.GetHashCode();
    if (Connected != false) hash ^= Connected.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (ClientID != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(ClientID);
    }
    if (Connected != false) {
      output.WriteRawTag(16);
      output.WriteBool(Connected);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (ClientID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ClientID);
    }
    if (Connected != false) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(VRNClientConnectionStatus other) {
    if (other == null) {
      return;
    }
    if (other.ClientID != 0) {
      ClientID = other.ClientID;
    }
    if (other.Connected != false) {
      Connected = other.Connected;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          ClientID = input.ReadInt32();
          break;
        }
        case 16: {
          Connected = input.ReadBool();
          break;
        }
      }
    }
  }

}

public sealed partial class VRNClientState : pb::IMessage<VRNClientState> {
  private static readonly pb::MessageParser<VRNClientState> _parser = new pb::MessageParser<VRNClientState>(() => new VRNClientState());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<VRNClientState> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::VRMineNetReflection.Descriptor.MessageTypes[50]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNClientState() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNClientState(VRNClientState other) : this() {
    clientID_ = other.clientID_;
    playerName_ = other.playerName_;
    sceneLoadState_ = other.sceneLoadState_;
    sceneName_ = other.sceneName_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNClientState Clone() {
    return new VRNClientState(this);
  }

  /// <summary>Field number for the "clientID" field.</summary>
  public const int ClientIDFieldNumber = 1;
  private int clientID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ClientID {
    get { return clientID_; }
    set {
      clientID_ = value;
    }
  }

  /// <summary>Field number for the "playerName" field.</summary>
  public const int PlayerNameFieldNumber = 3;
  private string playerName_ = "";
  /// <summary>
  ///int32 playerID = 2;
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string PlayerName {
    get { return playerName_; }
    set {
      playerName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "sceneLoadState" field.</summary>
  public const int SceneLoadStateFieldNumber = 4;
  private global::VRNSceneLoadState sceneLoadState_ = global::VRNSceneLoadState.None;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::VRNSceneLoadState SceneLoadState {
    get { return sceneLoadState_; }
    set {
      sceneLoadState_ = value;
    }
  }

  /// <summary>Field number for the "sceneName" field.</summary>
  public const int SceneNameFieldNumber = 5;
  private string sceneName_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string SceneName {
    get { return sceneName_; }
    set {
      sceneName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as VRNClientState);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(VRNClientState other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ClientID != other.ClientID) return false;
    if (PlayerName != other.PlayerName) return false;
    if (SceneLoadState != other.SceneLoadState) return false;
    if (SceneName != other.SceneName) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (ClientID != 0) hash ^= ClientID.GetHashCode();
    if (PlayerName.Length != 0) hash ^= PlayerName.GetHashCode();
    if (SceneLoadState != global::VRNSceneLoadState.None) hash ^= SceneLoadState.GetHashCode();
    if (SceneName.Length != 0) hash ^= SceneName.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (ClientID != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(ClientID);
    }
    if (PlayerName.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(PlayerName);
    }
    if (SceneLoadState != global::VRNSceneLoadState.None) {
      output.WriteRawTag(32);
      output.WriteEnum((int) SceneLoadState);
    }
    if (SceneName.Length != 0) {
      output.WriteRawTag(42);
      output.WriteString(SceneName);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (ClientID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ClientID);
    }
    if (PlayerName.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerName);
    }
    if (SceneLoadState != global::VRNSceneLoadState.None) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SceneLoadState);
    }
    if (SceneName.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(SceneName);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(VRNClientState other) {
    if (other == null) {
      return;
    }
    if (other.ClientID != 0) {
      ClientID = other.ClientID;
    }
    if (other.PlayerName.Length != 0) {
      PlayerName = other.PlayerName;
    }
    if (other.SceneLoadState != global::VRNSceneLoadState.None) {
      SceneLoadState = other.SceneLoadState;
    }
    if (other.SceneName.Length != 0) {
      SceneName = other.SceneName;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          ClientID = input.ReadInt32();
          break;
        }
        case 26: {
          PlayerName = input.ReadString();
          break;
        }
        case 32: {
          SceneLoadState = (global::VRNSceneLoadState) input.ReadEnum();
          break;
        }
        case 42: {
          SceneName = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class VRNActivationState : pb::IMessage<VRNActivationState> {
  private static readonly pb::MessageParser<VRNActivationState> _parser = new pb::MessageParser<VRNActivationState>(() => new VRNActivationState());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<VRNActivationState> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::VRMineNetReflection.Descriptor.MessageTypes[51]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNActivationState() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNActivationState(VRNActivationState other) : this() {
    activated_ = other.activated_;
    activatationLevel_ = other.activatationLevel_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNActivationState Clone() {
    return new VRNActivationState(this);
  }

  /// <summary>Field number for the "activated" field.</summary>
  public const int ActivatedFieldNumber = 1;
  private bool activated_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Activated {
    get { return activated_; }
    set {
      activated_ = value;
    }
  }

  /// <summary>Field number for the "activatationLevel" field.</summary>
  public const int ActivatationLevelFieldNumber = 2;
  private float activatationLevel_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float ActivatationLevel {
    get { return activatationLevel_; }
    set {
      activatationLevel_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as VRNActivationState);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(VRNActivationState other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Activated != other.Activated) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ActivatationLevel, other.ActivatationLevel)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Activated != false) hash ^= Activated.GetHashCode();
    if (ActivatationLevel != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ActivatationLevel);
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Activated != false) {
      output.WriteRawTag(8);
      output.WriteBool(Activated);
    }
    if (ActivatationLevel != 0F) {
      output.WriteRawTag(21);
      output.WriteFloat(ActivatationLevel);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Activated != false) {
      size += 1 + 1;
    }
    if (ActivatationLevel != 0F) {
      size += 1 + 4;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(VRNActivationState other) {
    if (other == null) {
      return;
    }
    if (other.Activated != false) {
      Activated = other.Activated;
    }
    if (other.ActivatationLevel != 0F) {
      ActivatationLevel = other.ActivatationLevel;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Activated = input.ReadBool();
          break;
        }
        case 21: {
          ActivatationLevel = input.ReadFloat();
          break;
        }
      }
    }
  }

}

public sealed partial class VRNTeleportAll : pb::IMessage<VRNTeleportAll> {
  private static readonly pb::MessageParser<VRNTeleportAll> _parser = new pb::MessageParser<VRNTeleportAll>(() => new VRNTeleportAll());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<VRNTeleportAll> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::VRMineNetReflection.Descriptor.MessageTypes[52]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNTeleportAll() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNTeleportAll(VRNTeleportAll other) : this() {
    teleportTarget_ = other.teleportTarget_;
    teleportTime_ = other.teleportTime_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNTeleportAll Clone() {
    return new VRNTeleportAll(this);
  }

  /// <summary>Field number for the "teleportTarget" field.</summary>
  public const int TeleportTargetFieldNumber = 1;
  private string teleportTarget_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string TeleportTarget {
    get { return teleportTarget_; }
    set {
      teleportTarget_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "teleportTime" field.</summary>
  public const int TeleportTimeFieldNumber = 2;
  private float teleportTime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float TeleportTime {
    get { return teleportTime_; }
    set {
      teleportTime_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as VRNTeleportAll);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(VRNTeleportAll other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (TeleportTarget != other.TeleportTarget) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TeleportTime, other.TeleportTime)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (TeleportTarget.Length != 0) hash ^= TeleportTarget.GetHashCode();
    if (TeleportTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TeleportTime);
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (TeleportTarget.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(TeleportTarget);
    }
    if (TeleportTime != 0F) {
      output.WriteRawTag(21);
      output.WriteFloat(TeleportTime);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (TeleportTarget.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(TeleportTarget);
    }
    if (TeleportTime != 0F) {
      size += 1 + 4;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(VRNTeleportAll other) {
    if (other == null) {
      return;
    }
    if (other.TeleportTarget.Length != 0) {
      TeleportTarget = other.TeleportTarget;
    }
    if (other.TeleportTime != 0F) {
      TeleportTime = other.TeleportTime;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          TeleportTarget = input.ReadString();
          break;
        }
        case 21: {
          TeleportTime = input.ReadFloat();
          break;
        }
      }
    }
  }

}

public sealed partial class VRNSimState : pb::IMessage<VRNSimState> {
  private static readonly pb::MessageParser<VRNSimState> _parser = new pb::MessageParser<VRNSimState>(() => new VRNSimState());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<VRNSimState> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::VRMineNetReflection.Descriptor.MessageTypes[53]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNSimState() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNSimState(VRNSimState other) : this() {
    activeScene_ = other.activeScene_;
    teleportTarget_ = other.teleportTarget_;
    activeSceneID_ = other.activeSceneID_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNSimState Clone() {
    return new VRNSimState(this);
  }

  /// <summary>Field number for the "activeScene" field.</summary>
  public const int ActiveSceneFieldNumber = 1;
  private string activeScene_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string ActiveScene {
    get { return activeScene_; }
    set {
      activeScene_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "teleportTarget" field.</summary>
  public const int TeleportTargetFieldNumber = 2;
  private string teleportTarget_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string TeleportTarget {
    get { return teleportTarget_; }
    set {
      teleportTarget_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "activeSceneID" field.</summary>
  public const int ActiveSceneIDFieldNumber = 3;
  private int activeSceneID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ActiveSceneID {
    get { return activeSceneID_; }
    set {
      activeSceneID_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as VRNSimState);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(VRNSimState other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ActiveScene != other.ActiveScene) return false;
    if (TeleportTarget != other.TeleportTarget) return false;
    if (ActiveSceneID != other.ActiveSceneID) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (ActiveScene.Length != 0) hash ^= ActiveScene.GetHashCode();
    if (TeleportTarget.Length != 0) hash ^= TeleportTarget.GetHashCode();
    if (ActiveSceneID != 0) hash ^= ActiveSceneID.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (ActiveScene.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(ActiveScene);
    }
    if (TeleportTarget.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(TeleportTarget);
    }
    if (ActiveSceneID != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(ActiveSceneID);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (ActiveScene.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ActiveScene);
    }
    if (TeleportTarget.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(TeleportTarget);
    }
    if (ActiveSceneID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActiveSceneID);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(VRNSimState other) {
    if (other == null) {
      return;
    }
    if (other.ActiveScene.Length != 0) {
      ActiveScene = other.ActiveScene;
    }
    if (other.TeleportTarget.Length != 0) {
      TeleportTarget = other.TeleportTarget;
    }
    if (other.ActiveSceneID != 0) {
      ActiveSceneID = other.ActiveSceneID;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          ActiveScene = input.ReadString();
          break;
        }
        case 18: {
          TeleportTarget = input.ReadString();
          break;
        }
        case 24: {
          ActiveSceneID = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class VRNSymbolManagerState : pb::IMessage<VRNSymbolManagerState> {
  private static readonly pb::MessageParser<VRNSymbolManagerState> _parser = new pb::MessageParser<VRNSymbolManagerState>(() => new VRNSymbolManagerState());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<VRNSymbolManagerState> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::VRMineNetReflection.Descriptor.MessageTypes[54]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNSymbolManagerState() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNSymbolManagerState(VRNSymbolManagerState other) : this() {
    symbolManagerName_ = other.symbolManagerName_;
    symbols_ = other.symbols_.Clone();
    symbolManagerID_ = other.symbolManagerID_;
    playerID_ = other.playerID_;
    clientID_ = other.clientID_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNSymbolManagerState Clone() {
    return new VRNSymbolManagerState(this);
  }

  /// <summary>Field number for the "symbolManagerName" field.</summary>
  public const int SymbolManagerNameFieldNumber = 1;
  private string symbolManagerName_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string SymbolManagerName {
    get { return symbolManagerName_; }
    set {
      symbolManagerName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "symbols" field.</summary>
  public const int SymbolsFieldNumber = 2;
  private static readonly pb::FieldCodec<global::VRNSymbolData> _repeated_symbols_codec
      = pb::FieldCodec.ForMessage(18, global::VRNSymbolData.Parser);
  private readonly pbc::RepeatedField<global::VRNSymbolData> symbols_ = new pbc::RepeatedField<global::VRNSymbolData>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::VRNSymbolData> Symbols {
    get { return symbols_; }
  }

  /// <summary>Field number for the "symbolManagerID" field.</summary>
  public const int SymbolManagerIDFieldNumber = 3;
  private pb::ByteString symbolManagerID_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString SymbolManagerID {
    get { return symbolManagerID_; }
    set {
      symbolManagerID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "playerID" field.</summary>
  public const int PlayerIDFieldNumber = 4;
  private int playerID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int PlayerID {
    get { return playerID_; }
    set {
      playerID_ = value;
    }
  }

  /// <summary>Field number for the "clientID" field.</summary>
  public const int ClientIDFieldNumber = 5;
  private int clientID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ClientID {
    get { return clientID_; }
    set {
      clientID_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as VRNSymbolManagerState);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(VRNSymbolManagerState other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SymbolManagerName != other.SymbolManagerName) return false;
    if(!symbols_.Equals(other.symbols_)) return false;
    if (SymbolManagerID != other.SymbolManagerID) return false;
    if (PlayerID != other.PlayerID) return false;
    if (ClientID != other.ClientID) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (SymbolManagerName.Length != 0) hash ^= SymbolManagerName.GetHashCode();
    hash ^= symbols_.GetHashCode();
    if (SymbolManagerID.Length != 0) hash ^= SymbolManagerID.GetHashCode();
    if (PlayerID != 0) hash ^= PlayerID.GetHashCode();
    if (ClientID != 0) hash ^= ClientID.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (SymbolManagerName.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(SymbolManagerName);
    }
    symbols_.WriteTo(output, _repeated_symbols_codec);
    if (SymbolManagerID.Length != 0) {
      output.WriteRawTag(26);
      output.WriteBytes(SymbolManagerID);
    }
    if (PlayerID != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(PlayerID);
    }
    if (ClientID != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(ClientID);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (SymbolManagerName.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(SymbolManagerName);
    }
    size += symbols_.CalculateSize(_repeated_symbols_codec);
    if (SymbolManagerID.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(SymbolManagerID);
    }
    if (PlayerID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerID);
    }
    if (ClientID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ClientID);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(VRNSymbolManagerState other) {
    if (other == null) {
      return;
    }
    if (other.SymbolManagerName.Length != 0) {
      SymbolManagerName = other.SymbolManagerName;
    }
    symbols_.Add(other.symbols_);
    if (other.SymbolManagerID.Length != 0) {
      SymbolManagerID = other.SymbolManagerID;
    }
    if (other.PlayerID != 0) {
      PlayerID = other.PlayerID;
    }
    if (other.ClientID != 0) {
      ClientID = other.ClientID;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          SymbolManagerName = input.ReadString();
          break;
        }
        case 18: {
          symbols_.AddEntriesFrom(input, _repeated_symbols_codec);
          break;
        }
        case 26: {
          SymbolManagerID = input.ReadBytes();
          break;
        }
        case 32: {
          PlayerID = input.ReadInt32();
          break;
        }
        case 40: {
          ClientID = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class VRNSymbolData : pb::IMessage<VRNSymbolData> {
  private static readonly pb::MessageParser<VRNSymbolData> _parser = new pb::MessageParser<VRNSymbolData>(() => new VRNSymbolData());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<VRNSymbolData> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::VRMineNetReflection.Descriptor.MessageTypes[55]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNSymbolData() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNSymbolData(VRNSymbolData other) : this() {
    symbolID_ = other.symbolID_;
    symbolClass_ = other.symbolClass_;
    addressable_ = other.addressable_;
    size_ = other.size_ != null ? other.size_.Clone() : null;
    color_ = other.color_ != null ? other.color_.Clone() : null;
    ignoreRotation_ = other.ignoreRotation_;
    spanEntry_ = other.spanEntry_;
    preserveAspect_ = other.preserveAspect_;
    symbolText_ = other.symbolText_;
    worldPosition_ = other.worldPosition_ != null ? other.worldPosition_.Clone() : null;
    worldRotation_ = other.worldRotation_ != null ? other.worldRotation_.Clone() : null;
    symbolData_ = other.symbolData_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNSymbolData Clone() {
    return new VRNSymbolData(this);
  }

  /// <summary>Field number for the "symbolID" field.</summary>
  public const int SymbolIDFieldNumber = 1;
  private long symbolID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long SymbolID {
    get { return symbolID_; }
    set {
      symbolID_ = value;
    }
  }

  /// <summary>Field number for the "symbolClass" field.</summary>
  public const int SymbolClassFieldNumber = 2;
  private string symbolClass_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string SymbolClass {
    get { return symbolClass_; }
    set {
      symbolClass_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "addressable" field.</summary>
  public const int AddressableFieldNumber = 3;
  private string addressable_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Addressable {
    get { return addressable_; }
    set {
      addressable_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "size" field.</summary>
  public const int SizeFieldNumber = 4;
  private global::VRNVector2 size_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::VRNVector2 Size {
    get { return size_; }
    set {
      size_ = value;
    }
  }

  /// <summary>Field number for the "color" field.</summary>
  public const int ColorFieldNumber = 5;
  private global::VRNColor color_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::VRNColor Color {
    get { return color_; }
    set {
      color_ = value;
    }
  }

  /// <summary>Field number for the "ignoreRotation" field.</summary>
  public const int IgnoreRotationFieldNumber = 6;
  private bool ignoreRotation_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IgnoreRotation {
    get { return ignoreRotation_; }
    set {
      ignoreRotation_ = value;
    }
  }

  /// <summary>Field number for the "spanEntry" field.</summary>
  public const int SpanEntryFieldNumber = 7;
  private bool spanEntry_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool SpanEntry {
    get { return spanEntry_; }
    set {
      spanEntry_ = value;
    }
  }

  /// <summary>Field number for the "preserveAspect" field.</summary>
  public const int PreserveAspectFieldNumber = 8;
  private bool preserveAspect_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool PreserveAspect {
    get { return preserveAspect_; }
    set {
      preserveAspect_ = value;
    }
  }

  /// <summary>Field number for the "symbolText" field.</summary>
  public const int SymbolTextFieldNumber = 9;
  private string symbolText_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string SymbolText {
    get { return symbolText_; }
    set {
      symbolText_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "WorldPosition" field.</summary>
  public const int WorldPositionFieldNumber = 12;
  private global::VRNVector3 worldPosition_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::VRNVector3 WorldPosition {
    get { return worldPosition_; }
    set {
      worldPosition_ = value;
    }
  }

  /// <summary>Field number for the "WorldRotation" field.</summary>
  public const int WorldRotationFieldNumber = 13;
  private global::VRNQuaternion worldRotation_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::VRNQuaternion WorldRotation {
    get { return worldRotation_; }
    set {
      worldRotation_ = value;
    }
  }

  /// <summary>Field number for the "symbolData" field.</summary>
  public const int SymbolDataFieldNumber = 100;
  private pb::ByteString symbolData_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString SymbolData {
    get { return symbolData_; }
    set {
      symbolData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as VRNSymbolData);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(VRNSymbolData other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SymbolID != other.SymbolID) return false;
    if (SymbolClass != other.SymbolClass) return false;
    if (Addressable != other.Addressable) return false;
    if (!object.Equals(Size, other.Size)) return false;
    if (!object.Equals(Color, other.Color)) return false;
    if (IgnoreRotation != other.IgnoreRotation) return false;
    if (SpanEntry != other.SpanEntry) return false;
    if (PreserveAspect != other.PreserveAspect) return false;
    if (SymbolText != other.SymbolText) return false;
    if (!object.Equals(WorldPosition, other.WorldPosition)) return false;
    if (!object.Equals(WorldRotation, other.WorldRotation)) return false;
    if (SymbolData != other.SymbolData) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (SymbolID != 0L) hash ^= SymbolID.GetHashCode();
    if (SymbolClass.Length != 0) hash ^= SymbolClass.GetHashCode();
    if (Addressable.Length != 0) hash ^= Addressable.GetHashCode();
    if (size_ != null) hash ^= Size.GetHashCode();
    if (color_ != null) hash ^= Color.GetHashCode();
    if (IgnoreRotation != false) hash ^= IgnoreRotation.GetHashCode();
    if (SpanEntry != false) hash ^= SpanEntry.GetHashCode();
    if (PreserveAspect != false) hash ^= PreserveAspect.GetHashCode();
    if (SymbolText.Length != 0) hash ^= SymbolText.GetHashCode();
    if (worldPosition_ != null) hash ^= WorldPosition.GetHashCode();
    if (worldRotation_ != null) hash ^= WorldRotation.GetHashCode();
    if (SymbolData.Length != 0) hash ^= SymbolData.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (SymbolID != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(SymbolID);
    }
    if (SymbolClass.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(SymbolClass);
    }
    if (Addressable.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(Addressable);
    }
    if (size_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(Size);
    }
    if (color_ != null) {
      output.WriteRawTag(42);
      output.WriteMessage(Color);
    }
    if (IgnoreRotation != false) {
      output.WriteRawTag(48);
      output.WriteBool(IgnoreRotation);
    }
    if (SpanEntry != false) {
      output.WriteRawTag(56);
      output.WriteBool(SpanEntry);
    }
    if (PreserveAspect != false) {
      output.WriteRawTag(64);
      output.WriteBool(PreserveAspect);
    }
    if (SymbolText.Length != 0) {
      output.WriteRawTag(74);
      output.WriteString(SymbolText);
    }
    if (worldPosition_ != null) {
      output.WriteRawTag(98);
      output.WriteMessage(WorldPosition);
    }
    if (worldRotation_ != null) {
      output.WriteRawTag(106);
      output.WriteMessage(WorldRotation);
    }
    if (SymbolData.Length != 0) {
      output.WriteRawTag(162, 6);
      output.WriteBytes(SymbolData);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (SymbolID != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(SymbolID);
    }
    if (SymbolClass.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(SymbolClass);
    }
    if (Addressable.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Addressable);
    }
    if (size_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Size);
    }
    if (color_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Color);
    }
    if (IgnoreRotation != false) {
      size += 1 + 1;
    }
    if (SpanEntry != false) {
      size += 1 + 1;
    }
    if (PreserveAspect != false) {
      size += 1 + 1;
    }
    if (SymbolText.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(SymbolText);
    }
    if (worldPosition_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(WorldPosition);
    }
    if (worldRotation_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(WorldRotation);
    }
    if (SymbolData.Length != 0) {
      size += 2 + pb::CodedOutputStream.ComputeBytesSize(SymbolData);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(VRNSymbolData other) {
    if (other == null) {
      return;
    }
    if (other.SymbolID != 0L) {
      SymbolID = other.SymbolID;
    }
    if (other.SymbolClass.Length != 0) {
      SymbolClass = other.SymbolClass;
    }
    if (other.Addressable.Length != 0) {
      Addressable = other.Addressable;
    }
    if (other.size_ != null) {
      if (size_ == null) {
        Size = new global::VRNVector2();
      }
      Size.MergeFrom(other.Size);
    }
    if (other.color_ != null) {
      if (color_ == null) {
        Color = new global::VRNColor();
      }
      Color.MergeFrom(other.Color);
    }
    if (other.IgnoreRotation != false) {
      IgnoreRotation = other.IgnoreRotation;
    }
    if (other.SpanEntry != false) {
      SpanEntry = other.SpanEntry;
    }
    if (other.PreserveAspect != false) {
      PreserveAspect = other.PreserveAspect;
    }
    if (other.SymbolText.Length != 0) {
      SymbolText = other.SymbolText;
    }
    if (other.worldPosition_ != null) {
      if (worldPosition_ == null) {
        WorldPosition = new global::VRNVector3();
      }
      WorldPosition.MergeFrom(other.WorldPosition);
    }
    if (other.worldRotation_ != null) {
      if (worldRotation_ == null) {
        WorldRotation = new global::VRNQuaternion();
      }
      WorldRotation.MergeFrom(other.WorldRotation);
    }
    if (other.SymbolData.Length != 0) {
      SymbolData = other.SymbolData;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          SymbolID = input.ReadInt64();
          break;
        }
        case 18: {
          SymbolClass = input.ReadString();
          break;
        }
        case 26: {
          Addressable = input.ReadString();
          break;
        }
        case 34: {
          if (size_ == null) {
            Size = new global::VRNVector2();
          }
          input.ReadMessage(Size);
          break;
        }
        case 42: {
          if (color_ == null) {
            Color = new global::VRNColor();
          }
          input.ReadMessage(Color);
          break;
        }
        case 48: {
          IgnoreRotation = input.ReadBool();
          break;
        }
        case 56: {
          SpanEntry = input.ReadBool();
          break;
        }
        case 64: {
          PreserveAspect = input.ReadBool();
          break;
        }
        case 74: {
          SymbolText = input.ReadString();
          break;
        }
        case 98: {
          if (worldPosition_ == null) {
            WorldPosition = new global::VRNVector3();
          }
          input.ReadMessage(WorldPosition);
          break;
        }
        case 106: {
          if (worldRotation_ == null) {
            WorldRotation = new global::VRNQuaternion();
          }
          input.ReadMessage(WorldRotation);
          break;
        }
        case 802: {
          SymbolData = input.ReadBytes();
          break;
        }
      }
    }
  }

}

public sealed partial class VRNDissonancePacket : pb::IMessage<VRNDissonancePacket> {
  private static readonly pb::MessageParser<VRNDissonancePacket> _parser = new pb::MessageParser<VRNDissonancePacket>(() => new VRNDissonancePacket());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<VRNDissonancePacket> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::VRMineNetReflection.Descriptor.MessageTypes[56]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNDissonancePacket() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNDissonancePacket(VRNDissonancePacket other) : this() {
    clientID_ = other.clientID_;
    dissonanceData_ = other.dissonanceData_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNDissonancePacket Clone() {
    return new VRNDissonancePacket(this);
  }

  /// <summary>Field number for the "clientID" field.</summary>
  public const int ClientIDFieldNumber = 1;
  private int clientID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ClientID {
    get { return clientID_; }
    set {
      clientID_ = value;
    }
  }

  /// <summary>Field number for the "dissonanceData" field.</summary>
  public const int DissonanceDataFieldNumber = 2;
  private pb::ByteString dissonanceData_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString DissonanceData {
    get { return dissonanceData_; }
    set {
      dissonanceData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as VRNDissonancePacket);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(VRNDissonancePacket other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ClientID != other.ClientID) return false;
    if (DissonanceData != other.DissonanceData) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (ClientID != 0) hash ^= ClientID.GetHashCode();
    if (DissonanceData.Length != 0) hash ^= DissonanceData.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (ClientID != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(ClientID);
    }
    if (DissonanceData.Length != 0) {
      output.WriteRawTag(18);
      output.WriteBytes(DissonanceData);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (ClientID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ClientID);
    }
    if (DissonanceData.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(DissonanceData);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(VRNDissonancePacket other) {
    if (other == null) {
      return;
    }
    if (other.ClientID != 0) {
      ClientID = other.ClientID;
    }
    if (other.DissonanceData.Length != 0) {
      DissonanceData = other.DissonanceData;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          ClientID = input.ReadInt32();
          break;
        }
        case 18: {
          DissonanceData = input.ReadBytes();
          break;
        }
      }
    }
  }

}

public sealed partial class VRNVentVisualization : pb::IMessage<VRNVentVisualization> {
  private static readonly pb::MessageParser<VRNVentVisualization> _parser = new pb::MessageParser<VRNVentVisualization>(() => new VRNVentVisualization());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<VRNVentVisualization> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::VRMineNetReflection.Descriptor.MessageTypes[57]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNVentVisualization() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNVentVisualization(VRNVentVisualization other) : this() {
    toggleAction_ = other.toggleAction_;
    visEffectPrefab_ = other.visEffectPrefab_;
    visData_ = other.visData_;
    visEnabledDM_ = other.visEnabledDM_;
    visEnabledPlayer_ = other.visEnabledPlayer_;
    visEnabledSpectator_ = other.visEnabledSpectator_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNVentVisualization Clone() {
    return new VRNVentVisualization(this);
  }

  /// <summary>Field number for the "ToggleAction" field.</summary>
  public const int ToggleActionFieldNumber = 1;
  private global::VRNToggleAction toggleAction_ = global::VRNToggleAction.ToggleOff;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::VRNToggleAction ToggleAction {
    get { return toggleAction_; }
    set {
      toggleAction_ = value;
    }
  }

  /// <summary>Field number for the "VisEffectPrefab" field.</summary>
  public const int VisEffectPrefabFieldNumber = 4;
  private string visEffectPrefab_ = "";
  /// <summary>
  ///VRNVentVisEffect VisEffect = 2;
  ///VRNVentVisColor VisColor = 3;
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string VisEffectPrefab {
    get { return visEffectPrefab_; }
    set {
      visEffectPrefab_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "VisData" field.</summary>
  public const int VisDataFieldNumber = 5;
  private string visData_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string VisData {
    get { return visData_; }
    set {
      visData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "VisEnabledDM" field.</summary>
  public const int VisEnabledDMFieldNumber = 6;
  private bool visEnabledDM_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool VisEnabledDM {
    get { return visEnabledDM_; }
    set {
      visEnabledDM_ = value;
    }
  }

  /// <summary>Field number for the "VisEnabledPlayer" field.</summary>
  public const int VisEnabledPlayerFieldNumber = 7;
  private bool visEnabledPlayer_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool VisEnabledPlayer {
    get { return visEnabledPlayer_; }
    set {
      visEnabledPlayer_ = value;
    }
  }

  /// <summary>Field number for the "VisEnabledSpectator" field.</summary>
  public const int VisEnabledSpectatorFieldNumber = 8;
  private bool visEnabledSpectator_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool VisEnabledSpectator {
    get { return visEnabledSpectator_; }
    set {
      visEnabledSpectator_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as VRNVentVisualization);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(VRNVentVisualization other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ToggleAction != other.ToggleAction) return false;
    if (VisEffectPrefab != other.VisEffectPrefab) return false;
    if (VisData != other.VisData) return false;
    if (VisEnabledDM != other.VisEnabledDM) return false;
    if (VisEnabledPlayer != other.VisEnabledPlayer) return false;
    if (VisEnabledSpectator != other.VisEnabledSpectator) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (ToggleAction != global::VRNToggleAction.ToggleOff) hash ^= ToggleAction.GetHashCode();
    if (VisEffectPrefab.Length != 0) hash ^= VisEffectPrefab.GetHashCode();
    if (VisData.Length != 0) hash ^= VisData.GetHashCode();
    if (VisEnabledDM != false) hash ^= VisEnabledDM.GetHashCode();
    if (VisEnabledPlayer != false) hash ^= VisEnabledPlayer.GetHashCode();
    if (VisEnabledSpectator != false) hash ^= VisEnabledSpectator.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (ToggleAction != global::VRNToggleAction.ToggleOff) {
      output.WriteRawTag(8);
      output.WriteEnum((int) ToggleAction);
    }
    if (VisEffectPrefab.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(VisEffectPrefab);
    }
    if (VisData.Length != 0) {
      output.WriteRawTag(42);
      output.WriteString(VisData);
    }
    if (VisEnabledDM != false) {
      output.WriteRawTag(48);
      output.WriteBool(VisEnabledDM);
    }
    if (VisEnabledPlayer != false) {
      output.WriteRawTag(56);
      output.WriteBool(VisEnabledPlayer);
    }
    if (VisEnabledSpectator != false) {
      output.WriteRawTag(64);
      output.WriteBool(VisEnabledSpectator);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (ToggleAction != global::VRNToggleAction.ToggleOff) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ToggleAction);
    }
    if (VisEffectPrefab.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(VisEffectPrefab);
    }
    if (VisData.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(VisData);
    }
    if (VisEnabledDM != false) {
      size += 1 + 1;
    }
    if (VisEnabledPlayer != false) {
      size += 1 + 1;
    }
    if (VisEnabledSpectator != false) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(VRNVentVisualization other) {
    if (other == null) {
      return;
    }
    if (other.ToggleAction != global::VRNToggleAction.ToggleOff) {
      ToggleAction = other.ToggleAction;
    }
    if (other.VisEffectPrefab.Length != 0) {
      VisEffectPrefab = other.VisEffectPrefab;
    }
    if (other.VisData.Length != 0) {
      VisData = other.VisData;
    }
    if (other.VisEnabledDM != false) {
      VisEnabledDM = other.VisEnabledDM;
    }
    if (other.VisEnabledPlayer != false) {
      VisEnabledPlayer = other.VisEnabledPlayer;
    }
    if (other.VisEnabledSpectator != false) {
      VisEnabledSpectator = other.VisEnabledSpectator;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          ToggleAction = (global::VRNToggleAction) input.ReadEnum();
          break;
        }
        case 34: {
          VisEffectPrefab = input.ReadString();
          break;
        }
        case 42: {
          VisData = input.ReadString();
          break;
        }
        case 48: {
          VisEnabledDM = input.ReadBool();
          break;
        }
        case 56: {
          VisEnabledPlayer = input.ReadBool();
          break;
        }
        case 64: {
          VisEnabledSpectator = input.ReadBool();
          break;
        }
      }
    }
  }

}

public sealed partial class VRNVentGraph : pb::IMessage<VRNVentGraph> {
  private static readonly pb::MessageParser<VRNVentGraph> _parser = new pb::MessageParser<VRNVentGraph>(() => new VRNVentGraph());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<VRNVentGraph> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::VRMineNetReflection.Descriptor.MessageTypes[58]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNVentGraph() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNVentGraph(VRNVentGraph other) : this() {
    junctions_ = other.junctions_.Clone();
    airways_ = other.airways_.Clone();
    fires_ = other.fires_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNVentGraph Clone() {
    return new VRNVentGraph(this);
  }

  /// <summary>Field number for the "Junctions" field.</summary>
  public const int JunctionsFieldNumber = 10;
  private static readonly pb::FieldCodec<global::VRNVentJunction> _repeated_junctions_codec
      = pb::FieldCodec.ForMessage(82, global::VRNVentJunction.Parser);
  private readonly pbc::RepeatedField<global::VRNVentJunction> junctions_ = new pbc::RepeatedField<global::VRNVentJunction>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::VRNVentJunction> Junctions {
    get { return junctions_; }
  }

  /// <summary>Field number for the "Airways" field.</summary>
  public const int AirwaysFieldNumber = 11;
  private static readonly pb::FieldCodec<global::VRNVentAirway> _repeated_airways_codec
      = pb::FieldCodec.ForMessage(90, global::VRNVentAirway.Parser);
  private readonly pbc::RepeatedField<global::VRNVentAirway> airways_ = new pbc::RepeatedField<global::VRNVentAirway>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::VRNVentAirway> Airways {
    get { return airways_; }
  }

  /// <summary>Field number for the "Fires" field.</summary>
  public const int FiresFieldNumber = 12;
  private static readonly pb::FieldCodec<global::VRNVentFire> _repeated_fires_codec
      = pb::FieldCodec.ForMessage(98, global::VRNVentFire.Parser);
  private readonly pbc::RepeatedField<global::VRNVentFire> fires_ = new pbc::RepeatedField<global::VRNVentFire>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::VRNVentFire> Fires {
    get { return fires_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as VRNVentGraph);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(VRNVentGraph other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!junctions_.Equals(other.junctions_)) return false;
    if(!airways_.Equals(other.airways_)) return false;
    if(!fires_.Equals(other.fires_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= junctions_.GetHashCode();
    hash ^= airways_.GetHashCode();
    hash ^= fires_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    junctions_.WriteTo(output, _repeated_junctions_codec);
    airways_.WriteTo(output, _repeated_airways_codec);
    fires_.WriteTo(output, _repeated_fires_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += junctions_.CalculateSize(_repeated_junctions_codec);
    size += airways_.CalculateSize(_repeated_airways_codec);
    size += fires_.CalculateSize(_repeated_fires_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(VRNVentGraph other) {
    if (other == null) {
      return;
    }
    junctions_.Add(other.junctions_);
    airways_.Add(other.airways_);
    fires_.Add(other.fires_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 82: {
          junctions_.AddEntriesFrom(input, _repeated_junctions_codec);
          break;
        }
        case 90: {
          airways_.AddEntriesFrom(input, _repeated_airways_codec);
          break;
        }
        case 98: {
          fires_.AddEntriesFrom(input, _repeated_fires_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class VRNVentJunction : pb::IMessage<VRNVentJunction> {
  private static readonly pb::MessageParser<VRNVentJunction> _parser = new pb::MessageParser<VRNVentJunction>(() => new VRNVentJunction());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<VRNVentJunction> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::VRMineNetReflection.Descriptor.MessageTypes[59]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNVentJunction() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNVentJunction(VRNVentJunction other) : this() {
    junctionID_ = other.junctionID_;
    mFireID_ = other.mFireID_;
    isStartJunction_ = other.isStartJunction_;
    isInAtmosphere_ = other.isInAtmosphere_;
    worldPosition_ = other.worldPosition_ != null ? other.worldPosition_.Clone() : null;
    cH4Concentration_ = other.cH4Concentration_;
    totalAirFlow_ = other.totalAirFlow_;
    totalContaminant_ = other.totalContaminant_;
    totalCH4_ = other.totalCH4_;
    contamConcentration_ = other.contamConcentration_;
    temperatureInter_ = other.temperatureInter_;
    totalHeat_ = other.totalHeat_;
    conditionChanged_ = other.conditionChanged_;
    temperature_ = other.temperature_;
    elevation_ = other.elevation_;
    cH4InitialConc_ = other.cH4InitialConc_;
    atmosphereJuncType_ = other.atmosphereJuncType_;
    atmosphereTemperature_ = other.atmosphereTemperature_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNVentJunction Clone() {
    return new VRNVentJunction(this);
  }

  /// <summary>Field number for the "JunctionID" field.</summary>
  public const int JunctionIDFieldNumber = 1;
  private int junctionID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int JunctionID {
    get { return junctionID_; }
    set {
      junctionID_ = value;
    }
  }

  /// <summary>Field number for the "MFireID" field.</summary>
  public const int MFireIDFieldNumber = 2;
  private int mFireID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int MFireID {
    get { return mFireID_; }
    set {
      mFireID_ = value;
    }
  }

  /// <summary>Field number for the "IsStartJunction" field.</summary>
  public const int IsStartJunctionFieldNumber = 3;
  private bool isStartJunction_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsStartJunction {
    get { return isStartJunction_; }
    set {
      isStartJunction_ = value;
    }
  }

  /// <summary>Field number for the "IsInAtmosphere" field.</summary>
  public const int IsInAtmosphereFieldNumber = 4;
  private bool isInAtmosphere_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsInAtmosphere {
    get { return isInAtmosphere_; }
    set {
      isInAtmosphere_ = value;
    }
  }

  /// <summary>Field number for the "WorldPosition" field.</summary>
  public const int WorldPositionFieldNumber = 5;
  private global::VRNVector3 worldPosition_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::VRNVector3 WorldPosition {
    get { return worldPosition_; }
    set {
      worldPosition_ = value;
    }
  }

  /// <summary>Field number for the "CH4Concentration" field.</summary>
  public const int CH4ConcentrationFieldNumber = 6;
  private float cH4Concentration_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float CH4Concentration {
    get { return cH4Concentration_; }
    set {
      cH4Concentration_ = value;
    }
  }

  /// <summary>Field number for the "TotalAirFlow" field.</summary>
  public const int TotalAirFlowFieldNumber = 7;
  private float totalAirFlow_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float TotalAirFlow {
    get { return totalAirFlow_; }
    set {
      totalAirFlow_ = value;
    }
  }

  /// <summary>Field number for the "TotalContaminant" field.</summary>
  public const int TotalContaminantFieldNumber = 8;
  private float totalContaminant_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float TotalContaminant {
    get { return totalContaminant_; }
    set {
      totalContaminant_ = value;
    }
  }

  /// <summary>Field number for the "TotalCH4" field.</summary>
  public const int TotalCH4FieldNumber = 9;
  private float totalCH4_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float TotalCH4 {
    get { return totalCH4_; }
    set {
      totalCH4_ = value;
    }
  }

  /// <summary>Field number for the "ContamConcentration" field.</summary>
  public const int ContamConcentrationFieldNumber = 10;
  private float contamConcentration_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float ContamConcentration {
    get { return contamConcentration_; }
    set {
      contamConcentration_ = value;
    }
  }

  /// <summary>Field number for the "TemperatureInter" field.</summary>
  public const int TemperatureInterFieldNumber = 11;
  private float temperatureInter_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float TemperatureInter {
    get { return temperatureInter_; }
    set {
      temperatureInter_ = value;
    }
  }

  /// <summary>Field number for the "TotalHeat" field.</summary>
  public const int TotalHeatFieldNumber = 12;
  private float totalHeat_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float TotalHeat {
    get { return totalHeat_; }
    set {
      totalHeat_ = value;
    }
  }

  /// <summary>Field number for the "ConditionChanged" field.</summary>
  public const int ConditionChangedFieldNumber = 13;
  private bool conditionChanged_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool ConditionChanged {
    get { return conditionChanged_; }
    set {
      conditionChanged_ = value;
    }
  }

  /// <summary>Field number for the "Temperature" field.</summary>
  public const int TemperatureFieldNumber = 14;
  private float temperature_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Temperature {
    get { return temperature_; }
    set {
      temperature_ = value;
    }
  }

  /// <summary>Field number for the "Elevation" field.</summary>
  public const int ElevationFieldNumber = 15;
  private float elevation_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Elevation {
    get { return elevation_; }
    set {
      elevation_ = value;
    }
  }

  /// <summary>Field number for the "CH4InitialConc" field.</summary>
  public const int CH4InitialConcFieldNumber = 16;
  private float cH4InitialConc_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float CH4InitialConc {
    get { return cH4InitialConc_; }
    set {
      cH4InitialConc_ = value;
    }
  }

  /// <summary>Field number for the "AtmosphereJuncType" field.</summary>
  public const int AtmosphereJuncTypeFieldNumber = 17;
  private int atmosphereJuncType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int AtmosphereJuncType {
    get { return atmosphereJuncType_; }
    set {
      atmosphereJuncType_ = value;
    }
  }

  /// <summary>Field number for the "AtmosphereTemperature" field.</summary>
  public const int AtmosphereTemperatureFieldNumber = 18;
  private float atmosphereTemperature_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float AtmosphereTemperature {
    get { return atmosphereTemperature_; }
    set {
      atmosphereTemperature_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as VRNVentJunction);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(VRNVentJunction other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (JunctionID != other.JunctionID) return false;
    if (MFireID != other.MFireID) return false;
    if (IsStartJunction != other.IsStartJunction) return false;
    if (IsInAtmosphere != other.IsInAtmosphere) return false;
    if (!object.Equals(WorldPosition, other.WorldPosition)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CH4Concentration, other.CH4Concentration)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TotalAirFlow, other.TotalAirFlow)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TotalContaminant, other.TotalContaminant)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TotalCH4, other.TotalCH4)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ContamConcentration, other.ContamConcentration)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TemperatureInter, other.TemperatureInter)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TotalHeat, other.TotalHeat)) return false;
    if (ConditionChanged != other.ConditionChanged) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Temperature, other.Temperature)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Elevation, other.Elevation)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CH4InitialConc, other.CH4InitialConc)) return false;
    if (AtmosphereJuncType != other.AtmosphereJuncType) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AtmosphereTemperature, other.AtmosphereTemperature)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (JunctionID != 0) hash ^= JunctionID.GetHashCode();
    if (MFireID != 0) hash ^= MFireID.GetHashCode();
    if (IsStartJunction != false) hash ^= IsStartJunction.GetHashCode();
    if (IsInAtmosphere != false) hash ^= IsInAtmosphere.GetHashCode();
    if (worldPosition_ != null) hash ^= WorldPosition.GetHashCode();
    if (CH4Concentration != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CH4Concentration);
    if (TotalAirFlow != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TotalAirFlow);
    if (TotalContaminant != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TotalContaminant);
    if (TotalCH4 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TotalCH4);
    if (ContamConcentration != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ContamConcentration);
    if (TemperatureInter != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TemperatureInter);
    if (TotalHeat != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TotalHeat);
    if (ConditionChanged != false) hash ^= ConditionChanged.GetHashCode();
    if (Temperature != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Temperature);
    if (Elevation != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Elevation);
    if (CH4InitialConc != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CH4InitialConc);
    if (AtmosphereJuncType != 0) hash ^= AtmosphereJuncType.GetHashCode();
    if (AtmosphereTemperature != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AtmosphereTemperature);
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (JunctionID != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(JunctionID);
    }
    if (MFireID != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(MFireID);
    }
    if (IsStartJunction != false) {
      output.WriteRawTag(24);
      output.WriteBool(IsStartJunction);
    }
    if (IsInAtmosphere != false) {
      output.WriteRawTag(32);
      output.WriteBool(IsInAtmosphere);
    }
    if (worldPosition_ != null) {
      output.WriteRawTag(42);
      output.WriteMessage(WorldPosition);
    }
    if (CH4Concentration != 0F) {
      output.WriteRawTag(53);
      output.WriteFloat(CH4Concentration);
    }
    if (TotalAirFlow != 0F) {
      output.WriteRawTag(61);
      output.WriteFloat(TotalAirFlow);
    }
    if (TotalContaminant != 0F) {
      output.WriteRawTag(69);
      output.WriteFloat(TotalContaminant);
    }
    if (TotalCH4 != 0F) {
      output.WriteRawTag(77);
      output.WriteFloat(TotalCH4);
    }
    if (ContamConcentration != 0F) {
      output.WriteRawTag(85);
      output.WriteFloat(ContamConcentration);
    }
    if (TemperatureInter != 0F) {
      output.WriteRawTag(93);
      output.WriteFloat(TemperatureInter);
    }
    if (TotalHeat != 0F) {
      output.WriteRawTag(101);
      output.WriteFloat(TotalHeat);
    }
    if (ConditionChanged != false) {
      output.WriteRawTag(104);
      output.WriteBool(ConditionChanged);
    }
    if (Temperature != 0F) {
      output.WriteRawTag(117);
      output.WriteFloat(Temperature);
    }
    if (Elevation != 0F) {
      output.WriteRawTag(125);
      output.WriteFloat(Elevation);
    }
    if (CH4InitialConc != 0F) {
      output.WriteRawTag(133, 1);
      output.WriteFloat(CH4InitialConc);
    }
    if (AtmosphereJuncType != 0) {
      output.WriteRawTag(136, 1);
      output.WriteInt32(AtmosphereJuncType);
    }
    if (AtmosphereTemperature != 0F) {
      output.WriteRawTag(149, 1);
      output.WriteFloat(AtmosphereTemperature);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (JunctionID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(JunctionID);
    }
    if (MFireID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(MFireID);
    }
    if (IsStartJunction != false) {
      size += 1 + 1;
    }
    if (IsInAtmosphere != false) {
      size += 1 + 1;
    }
    if (worldPosition_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(WorldPosition);
    }
    if (CH4Concentration != 0F) {
      size += 1 + 4;
    }
    if (TotalAirFlow != 0F) {
      size += 1 + 4;
    }
    if (TotalContaminant != 0F) {
      size += 1 + 4;
    }
    if (TotalCH4 != 0F) {
      size += 1 + 4;
    }
    if (ContamConcentration != 0F) {
      size += 1 + 4;
    }
    if (TemperatureInter != 0F) {
      size += 1 + 4;
    }
    if (TotalHeat != 0F) {
      size += 1 + 4;
    }
    if (ConditionChanged != false) {
      size += 1 + 1;
    }
    if (Temperature != 0F) {
      size += 1 + 4;
    }
    if (Elevation != 0F) {
      size += 1 + 4;
    }
    if (CH4InitialConc != 0F) {
      size += 2 + 4;
    }
    if (AtmosphereJuncType != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(AtmosphereJuncType);
    }
    if (AtmosphereTemperature != 0F) {
      size += 2 + 4;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(VRNVentJunction other) {
    if (other == null) {
      return;
    }
    if (other.JunctionID != 0) {
      JunctionID = other.JunctionID;
    }
    if (other.MFireID != 0) {
      MFireID = other.MFireID;
    }
    if (other.IsStartJunction != false) {
      IsStartJunction = other.IsStartJunction;
    }
    if (other.IsInAtmosphere != false) {
      IsInAtmosphere = other.IsInAtmosphere;
    }
    if (other.worldPosition_ != null) {
      if (worldPosition_ == null) {
        WorldPosition = new global::VRNVector3();
      }
      WorldPosition.MergeFrom(other.WorldPosition);
    }
    if (other.CH4Concentration != 0F) {
      CH4Concentration = other.CH4Concentration;
    }
    if (other.TotalAirFlow != 0F) {
      TotalAirFlow = other.TotalAirFlow;
    }
    if (other.TotalContaminant != 0F) {
      TotalContaminant = other.TotalContaminant;
    }
    if (other.TotalCH4 != 0F) {
      TotalCH4 = other.TotalCH4;
    }
    if (other.ContamConcentration != 0F) {
      ContamConcentration = other.ContamConcentration;
    }
    if (other.TemperatureInter != 0F) {
      TemperatureInter = other.TemperatureInter;
    }
    if (other.TotalHeat != 0F) {
      TotalHeat = other.TotalHeat;
    }
    if (other.ConditionChanged != false) {
      ConditionChanged = other.ConditionChanged;
    }
    if (other.Temperature != 0F) {
      Temperature = other.Temperature;
    }
    if (other.Elevation != 0F) {
      Elevation = other.Elevation;
    }
    if (other.CH4InitialConc != 0F) {
      CH4InitialConc = other.CH4InitialConc;
    }
    if (other.AtmosphereJuncType != 0) {
      AtmosphereJuncType = other.AtmosphereJuncType;
    }
    if (other.AtmosphereTemperature != 0F) {
      AtmosphereTemperature = other.AtmosphereTemperature;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          JunctionID = input.ReadInt32();
          break;
        }
        case 16: {
          MFireID = input.ReadInt32();
          break;
        }
        case 24: {
          IsStartJunction = input.ReadBool();
          break;
        }
        case 32: {
          IsInAtmosphere = input.ReadBool();
          break;
        }
        case 42: {
          if (worldPosition_ == null) {
            WorldPosition = new global::VRNVector3();
          }
          input.ReadMessage(WorldPosition);
          break;
        }
        case 53: {
          CH4Concentration = input.ReadFloat();
          break;
        }
        case 61: {
          TotalAirFlow = input.ReadFloat();
          break;
        }
        case 69: {
          TotalContaminant = input.ReadFloat();
          break;
        }
        case 77: {
          TotalCH4 = input.ReadFloat();
          break;
        }
        case 85: {
          ContamConcentration = input.ReadFloat();
          break;
        }
        case 93: {
          TemperatureInter = input.ReadFloat();
          break;
        }
        case 101: {
          TotalHeat = input.ReadFloat();
          break;
        }
        case 104: {
          ConditionChanged = input.ReadBool();
          break;
        }
        case 117: {
          Temperature = input.ReadFloat();
          break;
        }
        case 125: {
          Elevation = input.ReadFloat();
          break;
        }
        case 133: {
          CH4InitialConc = input.ReadFloat();
          break;
        }
        case 136: {
          AtmosphereJuncType = input.ReadInt32();
          break;
        }
        case 149: {
          AtmosphereTemperature = input.ReadFloat();
          break;
        }
      }
    }
  }

}

public sealed partial class VRNVentAirway : pb::IMessage<VRNVentAirway> {
  private static readonly pb::MessageParser<VRNVentAirway> _parser = new pb::MessageParser<VRNVentAirway>(() => new VRNVentAirway());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<VRNVentAirway> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::VRMineNetReflection.Descriptor.MessageTypes[60]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNVentAirway() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNVentAirway(VRNVentAirway other) : this() {
    airwayID_ = other.airwayID_;
    mFireID_ = other.mFireID_;
    resistance_ = other.resistance_;
    addedResistance_ = other.addedResistance_;
    controlResistance_ = other.controlResistance_;
    cH4EmissionRate_ = other.cH4EmissionRate_;
    startJunction_ = other.startJunction_;
    endJunction_ = other.endJunction_;
    crossSectionalArea_ = other.crossSectionalArea_;
    flowDirection_ = other.flowDirection_;
    flowRate_ = other.flowRate_;
    frictionFactor_ = other.frictionFactor_;
    length_ = other.length_;
    perimeter_ = other.perimeter_;
    rockTemperature_ = other.rockTemperature_;
    thermalConductivity_ = other.thermalConductivity_;
    thermalDefusivity_ = other.thermalDefusivity_;
    type_ = other.type_;
    overrideResistance_ = other.overrideResistance_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNVentAirway Clone() {
    return new VRNVentAirway(this);
  }

  /// <summary>Field number for the "AirwayID" field.</summary>
  public const int AirwayIDFieldNumber = 1;
  private int airwayID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int AirwayID {
    get { return airwayID_; }
    set {
      airwayID_ = value;
    }
  }

  /// <summary>Field number for the "MFireID" field.</summary>
  public const int MFireIDFieldNumber = 2;
  private int mFireID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int MFireID {
    get { return mFireID_; }
    set {
      mFireID_ = value;
    }
  }

  /// <summary>Field number for the "Resistance" field.</summary>
  public const int ResistanceFieldNumber = 3;
  private float resistance_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Resistance {
    get { return resistance_; }
    set {
      resistance_ = value;
    }
  }

  /// <summary>Field number for the "AddedResistance" field.</summary>
  public const int AddedResistanceFieldNumber = 4;
  private float addedResistance_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float AddedResistance {
    get { return addedResistance_; }
    set {
      addedResistance_ = value;
    }
  }

  /// <summary>Field number for the "ControlResistance" field.</summary>
  public const int ControlResistanceFieldNumber = 5;
  private float controlResistance_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float ControlResistance {
    get { return controlResistance_; }
    set {
      controlResistance_ = value;
    }
  }

  /// <summary>Field number for the "CH4EmissionRate" field.</summary>
  public const int CH4EmissionRateFieldNumber = 6;
  private float cH4EmissionRate_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float CH4EmissionRate {
    get { return cH4EmissionRate_; }
    set {
      cH4EmissionRate_ = value;
    }
  }

  /// <summary>Field number for the "StartJunction" field.</summary>
  public const int StartJunctionFieldNumber = 7;
  private int startJunction_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int StartJunction {
    get { return startJunction_; }
    set {
      startJunction_ = value;
    }
  }

  /// <summary>Field number for the "EndJunction" field.</summary>
  public const int EndJunctionFieldNumber = 8;
  private int endJunction_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int EndJunction {
    get { return endJunction_; }
    set {
      endJunction_ = value;
    }
  }

  /// <summary>Field number for the "CrossSectionalArea" field.</summary>
  public const int CrossSectionalAreaFieldNumber = 9;
  private float crossSectionalArea_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float CrossSectionalArea {
    get { return crossSectionalArea_; }
    set {
      crossSectionalArea_ = value;
    }
  }

  /// <summary>Field number for the "FlowDirection" field.</summary>
  public const int FlowDirectionFieldNumber = 10;
  private int flowDirection_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int FlowDirection {
    get { return flowDirection_; }
    set {
      flowDirection_ = value;
    }
  }

  /// <summary>Field number for the "FlowRate" field.</summary>
  public const int FlowRateFieldNumber = 11;
  private float flowRate_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float FlowRate {
    get { return flowRate_; }
    set {
      flowRate_ = value;
    }
  }

  /// <summary>Field number for the "FrictionFactor" field.</summary>
  public const int FrictionFactorFieldNumber = 12;
  private float frictionFactor_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float FrictionFactor {
    get { return frictionFactor_; }
    set {
      frictionFactor_ = value;
    }
  }

  /// <summary>Field number for the "Length" field.</summary>
  public const int LengthFieldNumber = 13;
  private float length_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Length {
    get { return length_; }
    set {
      length_ = value;
    }
  }

  /// <summary>Field number for the "Perimeter" field.</summary>
  public const int PerimeterFieldNumber = 14;
  private float perimeter_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Perimeter {
    get { return perimeter_; }
    set {
      perimeter_ = value;
    }
  }

  /// <summary>Field number for the "RockTemperature" field.</summary>
  public const int RockTemperatureFieldNumber = 16;
  private float rockTemperature_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float RockTemperature {
    get { return rockTemperature_; }
    set {
      rockTemperature_ = value;
    }
  }

  /// <summary>Field number for the "ThermalConductivity" field.</summary>
  public const int ThermalConductivityFieldNumber = 17;
  private float thermalConductivity_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float ThermalConductivity {
    get { return thermalConductivity_; }
    set {
      thermalConductivity_ = value;
    }
  }

  /// <summary>Field number for the "ThermalDefusivity" field.</summary>
  public const int ThermalDefusivityFieldNumber = 18;
  private float thermalDefusivity_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float ThermalDefusivity {
    get { return thermalDefusivity_; }
    set {
      thermalDefusivity_ = value;
    }
  }

  /// <summary>Field number for the "Type" field.</summary>
  public const int TypeFieldNumber = 19;
  private int type_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Type {
    get { return type_; }
    set {
      type_ = value;
    }
  }

  /// <summary>Field number for the "OverrideResistance" field.</summary>
  public const int OverrideResistanceFieldNumber = 20;
  private float overrideResistance_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float OverrideResistance {
    get { return overrideResistance_; }
    set {
      overrideResistance_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as VRNVentAirway);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(VRNVentAirway other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (AirwayID != other.AirwayID) return false;
    if (MFireID != other.MFireID) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Resistance, other.Resistance)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AddedResistance, other.AddedResistance)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ControlResistance, other.ControlResistance)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CH4EmissionRate, other.CH4EmissionRate)) return false;
    if (StartJunction != other.StartJunction) return false;
    if (EndJunction != other.EndJunction) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CrossSectionalArea, other.CrossSectionalArea)) return false;
    if (FlowDirection != other.FlowDirection) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FlowRate, other.FlowRate)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FrictionFactor, other.FrictionFactor)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Length, other.Length)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Perimeter, other.Perimeter)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RockTemperature, other.RockTemperature)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ThermalConductivity, other.ThermalConductivity)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ThermalDefusivity, other.ThermalDefusivity)) return false;
    if (Type != other.Type) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OverrideResistance, other.OverrideResistance)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (AirwayID != 0) hash ^= AirwayID.GetHashCode();
    if (MFireID != 0) hash ^= MFireID.GetHashCode();
    if (Resistance != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Resistance);
    if (AddedResistance != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AddedResistance);
    if (ControlResistance != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ControlResistance);
    if (CH4EmissionRate != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CH4EmissionRate);
    if (StartJunction != 0) hash ^= StartJunction.GetHashCode();
    if (EndJunction != 0) hash ^= EndJunction.GetHashCode();
    if (CrossSectionalArea != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CrossSectionalArea);
    if (FlowDirection != 0) hash ^= FlowDirection.GetHashCode();
    if (FlowRate != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FlowRate);
    if (FrictionFactor != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FrictionFactor);
    if (Length != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Length);
    if (Perimeter != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Perimeter);
    if (RockTemperature != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RockTemperature);
    if (ThermalConductivity != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ThermalConductivity);
    if (ThermalDefusivity != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ThermalDefusivity);
    if (Type != 0) hash ^= Type.GetHashCode();
    if (OverrideResistance != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OverrideResistance);
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (AirwayID != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(AirwayID);
    }
    if (MFireID != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(MFireID);
    }
    if (Resistance != 0F) {
      output.WriteRawTag(29);
      output.WriteFloat(Resistance);
    }
    if (AddedResistance != 0F) {
      output.WriteRawTag(37);
      output.WriteFloat(AddedResistance);
    }
    if (ControlResistance != 0F) {
      output.WriteRawTag(45);
      output.WriteFloat(ControlResistance);
    }
    if (CH4EmissionRate != 0F) {
      output.WriteRawTag(53);
      output.WriteFloat(CH4EmissionRate);
    }
    if (StartJunction != 0) {
      output.WriteRawTag(56);
      output.WriteInt32(StartJunction);
    }
    if (EndJunction != 0) {
      output.WriteRawTag(64);
      output.WriteInt32(EndJunction);
    }
    if (CrossSectionalArea != 0F) {
      output.WriteRawTag(77);
      output.WriteFloat(CrossSectionalArea);
    }
    if (FlowDirection != 0) {
      output.WriteRawTag(80);
      output.WriteInt32(FlowDirection);
    }
    if (FlowRate != 0F) {
      output.WriteRawTag(93);
      output.WriteFloat(FlowRate);
    }
    if (FrictionFactor != 0F) {
      output.WriteRawTag(101);
      output.WriteFloat(FrictionFactor);
    }
    if (Length != 0F) {
      output.WriteRawTag(109);
      output.WriteFloat(Length);
    }
    if (Perimeter != 0F) {
      output.WriteRawTag(117);
      output.WriteFloat(Perimeter);
    }
    if (RockTemperature != 0F) {
      output.WriteRawTag(133, 1);
      output.WriteFloat(RockTemperature);
    }
    if (ThermalConductivity != 0F) {
      output.WriteRawTag(141, 1);
      output.WriteFloat(ThermalConductivity);
    }
    if (ThermalDefusivity != 0F) {
      output.WriteRawTag(149, 1);
      output.WriteFloat(ThermalDefusivity);
    }
    if (Type != 0) {
      output.WriteRawTag(152, 1);
      output.WriteInt32(Type);
    }
    if (OverrideResistance != 0F) {
      output.WriteRawTag(165, 1);
      output.WriteFloat(OverrideResistance);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (AirwayID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(AirwayID);
    }
    if (MFireID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(MFireID);
    }
    if (Resistance != 0F) {
      size += 1 + 4;
    }
    if (AddedResistance != 0F) {
      size += 1 + 4;
    }
    if (ControlResistance != 0F) {
      size += 1 + 4;
    }
    if (CH4EmissionRate != 0F) {
      size += 1 + 4;
    }
    if (StartJunction != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(StartJunction);
    }
    if (EndJunction != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(EndJunction);
    }
    if (CrossSectionalArea != 0F) {
      size += 1 + 4;
    }
    if (FlowDirection != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(FlowDirection);
    }
    if (FlowRate != 0F) {
      size += 1 + 4;
    }
    if (FrictionFactor != 0F) {
      size += 1 + 4;
    }
    if (Length != 0F) {
      size += 1 + 4;
    }
    if (Perimeter != 0F) {
      size += 1 + 4;
    }
    if (RockTemperature != 0F) {
      size += 2 + 4;
    }
    if (ThermalConductivity != 0F) {
      size += 2 + 4;
    }
    if (ThermalDefusivity != 0F) {
      size += 2 + 4;
    }
    if (Type != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(Type);
    }
    if (OverrideResistance != 0F) {
      size += 2 + 4;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(VRNVentAirway other) {
    if (other == null) {
      return;
    }
    if (other.AirwayID != 0) {
      AirwayID = other.AirwayID;
    }
    if (other.MFireID != 0) {
      MFireID = other.MFireID;
    }
    if (other.Resistance != 0F) {
      Resistance = other.Resistance;
    }
    if (other.AddedResistance != 0F) {
      AddedResistance = other.AddedResistance;
    }
    if (other.ControlResistance != 0F) {
      ControlResistance = other.ControlResistance;
    }
    if (other.CH4EmissionRate != 0F) {
      CH4EmissionRate = other.CH4EmissionRate;
    }
    if (other.StartJunction != 0) {
      StartJunction = other.StartJunction;
    }
    if (other.EndJunction != 0) {
      EndJunction = other.EndJunction;
    }
    if (other.CrossSectionalArea != 0F) {
      CrossSectionalArea = other.CrossSectionalArea;
    }
    if (other.FlowDirection != 0) {
      FlowDirection = other.FlowDirection;
    }
    if (other.FlowRate != 0F) {
      FlowRate = other.FlowRate;
    }
    if (other.FrictionFactor != 0F) {
      FrictionFactor = other.FrictionFactor;
    }
    if (other.Length != 0F) {
      Length = other.Length;
    }
    if (other.Perimeter != 0F) {
      Perimeter = other.Perimeter;
    }
    if (other.RockTemperature != 0F) {
      RockTemperature = other.RockTemperature;
    }
    if (other.ThermalConductivity != 0F) {
      ThermalConductivity = other.ThermalConductivity;
    }
    if (other.ThermalDefusivity != 0F) {
      ThermalDefusivity = other.ThermalDefusivity;
    }
    if (other.Type != 0) {
      Type = other.Type;
    }
    if (other.OverrideResistance != 0F) {
      OverrideResistance = other.OverrideResistance;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          AirwayID = input.ReadInt32();
          break;
        }
        case 16: {
          MFireID = input.ReadInt32();
          break;
        }
        case 29: {
          Resistance = input.ReadFloat();
          break;
        }
        case 37: {
          AddedResistance = input.ReadFloat();
          break;
        }
        case 45: {
          ControlResistance = input.ReadFloat();
          break;
        }
        case 53: {
          CH4EmissionRate = input.ReadFloat();
          break;
        }
        case 56: {
          StartJunction = input.ReadInt32();
          break;
        }
        case 64: {
          EndJunction = input.ReadInt32();
          break;
        }
        case 77: {
          CrossSectionalArea = input.ReadFloat();
          break;
        }
        case 80: {
          FlowDirection = input.ReadInt32();
          break;
        }
        case 93: {
          FlowRate = input.ReadFloat();
          break;
        }
        case 101: {
          FrictionFactor = input.ReadFloat();
          break;
        }
        case 109: {
          Length = input.ReadFloat();
          break;
        }
        case 117: {
          Perimeter = input.ReadFloat();
          break;
        }
        case 133: {
          RockTemperature = input.ReadFloat();
          break;
        }
        case 141: {
          ThermalConductivity = input.ReadFloat();
          break;
        }
        case 149: {
          ThermalDefusivity = input.ReadFloat();
          break;
        }
        case 152: {
          Type = input.ReadInt32();
          break;
        }
        case 165: {
          OverrideResistance = input.ReadFloat();
          break;
        }
      }
    }
  }

}

public sealed partial class VRNVentFire : pb::IMessage<VRNVentFire> {
  private static readonly pb::MessageParser<VRNVentFire> _parser = new pb::MessageParser<VRNVentFire>(() => new VRNVentFire());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<VRNVentFire> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::VRMineNetReflection.Descriptor.MessageTypes[61]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNVentFire() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNVentFire(VRNVentFire other) : this() {
    fireID_ = other.fireID_;
    mFireID_ = other.mFireID_;
    airwayID_ = other.airwayID_;
    worldPosition_ = other.worldPosition_ != null ? other.worldPosition_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNVentFire Clone() {
    return new VRNVentFire(this);
  }

  /// <summary>Field number for the "FireID" field.</summary>
  public const int FireIDFieldNumber = 1;
  private int fireID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int FireID {
    get { return fireID_; }
    set {
      fireID_ = value;
    }
  }

  /// <summary>Field number for the "MFireID" field.</summary>
  public const int MFireIDFieldNumber = 2;
  private int mFireID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int MFireID {
    get { return mFireID_; }
    set {
      mFireID_ = value;
    }
  }

  /// <summary>Field number for the "AirwayID" field.</summary>
  public const int AirwayIDFieldNumber = 3;
  private int airwayID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int AirwayID {
    get { return airwayID_; }
    set {
      airwayID_ = value;
    }
  }

  /// <summary>Field number for the "WorldPosition" field.</summary>
  public const int WorldPositionFieldNumber = 4;
  private global::VRNVector3 worldPosition_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::VRNVector3 WorldPosition {
    get { return worldPosition_; }
    set {
      worldPosition_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as VRNVentFire);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(VRNVentFire other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (FireID != other.FireID) return false;
    if (MFireID != other.MFireID) return false;
    if (AirwayID != other.AirwayID) return false;
    if (!object.Equals(WorldPosition, other.WorldPosition)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (FireID != 0) hash ^= FireID.GetHashCode();
    if (MFireID != 0) hash ^= MFireID.GetHashCode();
    if (AirwayID != 0) hash ^= AirwayID.GetHashCode();
    if (worldPosition_ != null) hash ^= WorldPosition.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (FireID != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(FireID);
    }
    if (MFireID != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(MFireID);
    }
    if (AirwayID != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(AirwayID);
    }
    if (worldPosition_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(WorldPosition);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (FireID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(FireID);
    }
    if (MFireID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(MFireID);
    }
    if (AirwayID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(AirwayID);
    }
    if (worldPosition_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(WorldPosition);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(VRNVentFire other) {
    if (other == null) {
      return;
    }
    if (other.FireID != 0) {
      FireID = other.FireID;
    }
    if (other.MFireID != 0) {
      MFireID = other.MFireID;
    }
    if (other.AirwayID != 0) {
      AirwayID = other.AirwayID;
    }
    if (other.worldPosition_ != null) {
      if (worldPosition_ == null) {
        WorldPosition = new global::VRNVector3();
      }
      WorldPosition.MergeFrom(other.WorldPosition);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          FireID = input.ReadInt32();
          break;
        }
        case 16: {
          MFireID = input.ReadInt32();
          break;
        }
        case 24: {
          AirwayID = input.ReadInt32();
          break;
        }
        case 34: {
          if (worldPosition_ == null) {
            WorldPosition = new global::VRNVector3();
          }
          input.ReadMessage(WorldPosition);
          break;
        }
      }
    }
  }

}

public sealed partial class VRNFireStatus : pb::IMessage<VRNFireStatus> {
  private static readonly pb::MessageParser<VRNFireStatus> _parser = new pb::MessageParser<VRNFireStatus>(() => new VRNFireStatus());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<VRNFireStatus> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::VRMineNetReflection.Descriptor.MessageTypes[62]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNFireStatus() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNFireStatus(VRNFireStatus other) : this() {
    fireHealth_ = other.fireHealth_;
    playerID_ = other.playerID_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNFireStatus Clone() {
    return new VRNFireStatus(this);
  }

  /// <summary>Field number for the "FireHealth" field.</summary>
  public const int FireHealthFieldNumber = 1;
  private float fireHealth_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float FireHealth {
    get { return fireHealth_; }
    set {
      fireHealth_ = value;
    }
  }

  /// <summary>Field number for the "playerID" field.</summary>
  public const int PlayerIDFieldNumber = 2;
  private int playerID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int PlayerID {
    get { return playerID_; }
    set {
      playerID_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as VRNFireStatus);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(VRNFireStatus other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FireHealth, other.FireHealth)) return false;
    if (PlayerID != other.PlayerID) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (FireHealth != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FireHealth);
    if (PlayerID != 0) hash ^= PlayerID.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (FireHealth != 0F) {
      output.WriteRawTag(13);
      output.WriteFloat(FireHealth);
    }
    if (PlayerID != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(PlayerID);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (FireHealth != 0F) {
      size += 1 + 4;
    }
    if (PlayerID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerID);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(VRNFireStatus other) {
    if (other == null) {
      return;
    }
    if (other.FireHealth != 0F) {
      FireHealth = other.FireHealth;
    }
    if (other.PlayerID != 0) {
      PlayerID = other.PlayerID;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 13: {
          FireHealth = input.ReadFloat();
          break;
        }
        case 16: {
          PlayerID = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class VRNFireExtinguisherStatus : pb::IMessage<VRNFireExtinguisherStatus> {
  private static readonly pb::MessageParser<VRNFireExtinguisherStatus> _parser = new pb::MessageParser<VRNFireExtinguisherStatus>(() => new VRNFireExtinguisherStatus());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<VRNFireExtinguisherStatus> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::VRMineNetReflection.Descriptor.MessageTypes[63]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNFireExtinguisherStatus() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNFireExtinguisherStatus(VRNFireExtinguisherStatus other) : this() {
    percentFull_ = other.percentFull_;
    isActive_ = other.isActive_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNFireExtinguisherStatus Clone() {
    return new VRNFireExtinguisherStatus(this);
  }

  /// <summary>Field number for the "PercentFull" field.</summary>
  public const int PercentFullFieldNumber = 1;
  private float percentFull_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float PercentFull {
    get { return percentFull_; }
    set {
      percentFull_ = value;
    }
  }

  /// <summary>Field number for the "IsActive" field.</summary>
  public const int IsActiveFieldNumber = 2;
  private bool isActive_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsActive {
    get { return isActive_; }
    set {
      isActive_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as VRNFireExtinguisherStatus);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(VRNFireExtinguisherStatus other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PercentFull, other.PercentFull)) return false;
    if (IsActive != other.IsActive) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PercentFull != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PercentFull);
    if (IsActive != false) hash ^= IsActive.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PercentFull != 0F) {
      output.WriteRawTag(13);
      output.WriteFloat(PercentFull);
    }
    if (IsActive != false) {
      output.WriteRawTag(16);
      output.WriteBool(IsActive);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PercentFull != 0F) {
      size += 1 + 4;
    }
    if (IsActive != false) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(VRNFireExtinguisherStatus other) {
    if (other == null) {
      return;
    }
    if (other.PercentFull != 0F) {
      PercentFull = other.PercentFull;
    }
    if (other.IsActive != false) {
      IsActive = other.IsActive;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 13: {
          PercentFull = input.ReadFloat();
          break;
        }
        case 16: {
          IsActive = input.ReadBool();
          break;
        }
      }
    }
  }

}

public sealed partial class VRNBatteryStatus : pb::IMessage<VRNBatteryStatus> {
  private static readonly pb::MessageParser<VRNBatteryStatus> _parser = new pb::MessageParser<VRNBatteryStatus>(() => new VRNBatteryStatus());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<VRNBatteryStatus> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::VRMineNetReflection.Descriptor.MessageTypes[64]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNBatteryStatus() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNBatteryStatus(VRNBatteryStatus other) : this() {
    clientID_ = other.clientID_;
    statusMessage_ = other.statusMessage_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNBatteryStatus Clone() {
    return new VRNBatteryStatus(this);
  }

  /// <summary>Field number for the "clientID" field.</summary>
  public const int ClientIDFieldNumber = 1;
  private int clientID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ClientID {
    get { return clientID_; }
    set {
      clientID_ = value;
    }
  }

  /// <summary>Field number for the "statusMessage" field.</summary>
  public const int StatusMessageFieldNumber = 10;
  private string statusMessage_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string StatusMessage {
    get { return statusMessage_; }
    set {
      statusMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as VRNBatteryStatus);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(VRNBatteryStatus other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ClientID != other.ClientID) return false;
    if (StatusMessage != other.StatusMessage) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (ClientID != 0) hash ^= ClientID.GetHashCode();
    if (StatusMessage.Length != 0) hash ^= StatusMessage.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (ClientID != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(ClientID);
    }
    if (StatusMessage.Length != 0) {
      output.WriteRawTag(82);
      output.WriteString(StatusMessage);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (ClientID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ClientID);
    }
    if (StatusMessage.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(StatusMessage);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(VRNBatteryStatus other) {
    if (other == null) {
      return;
    }
    if (other.ClientID != 0) {
      ClientID = other.ClientID;
    }
    if (other.StatusMessage.Length != 0) {
      StatusMessage = other.StatusMessage;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          ClientID = input.ReadInt32();
          break;
        }
        case 82: {
          StatusMessage = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class VRNSystemStatus : pb::IMessage<VRNSystemStatus> {
  private static readonly pb::MessageParser<VRNSystemStatus> _parser = new pb::MessageParser<VRNSystemStatus>(() => new VRNSystemStatus());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<VRNSystemStatus> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::VRMineNetReflection.Descriptor.MessageTypes[65]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNSystemStatus() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNSystemStatus(VRNSystemStatus other) : this() {
    clientID_ = other.clientID_;
    frameRate_ = other.frameRate_;
    appFocused_ = other.appFocused_;
    appPaused_ = other.appPaused_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNSystemStatus Clone() {
    return new VRNSystemStatus(this);
  }

  /// <summary>Field number for the "clientID" field.</summary>
  public const int ClientIDFieldNumber = 1;
  private int clientID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ClientID {
    get { return clientID_; }
    set {
      clientID_ = value;
    }
  }

  /// <summary>Field number for the "frameRate" field.</summary>
  public const int FrameRateFieldNumber = 10;
  private float frameRate_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float FrameRate {
    get { return frameRate_; }
    set {
      frameRate_ = value;
    }
  }

  /// <summary>Field number for the "appFocused" field.</summary>
  public const int AppFocusedFieldNumber = 11;
  private bool appFocused_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool AppFocused {
    get { return appFocused_; }
    set {
      appFocused_ = value;
    }
  }

  /// <summary>Field number for the "appPaused" field.</summary>
  public const int AppPausedFieldNumber = 12;
  private bool appPaused_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool AppPaused {
    get { return appPaused_; }
    set {
      appPaused_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as VRNSystemStatus);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(VRNSystemStatus other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ClientID != other.ClientID) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FrameRate, other.FrameRate)) return false;
    if (AppFocused != other.AppFocused) return false;
    if (AppPaused != other.AppPaused) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (ClientID != 0) hash ^= ClientID.GetHashCode();
    if (FrameRate != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FrameRate);
    if (AppFocused != false) hash ^= AppFocused.GetHashCode();
    if (AppPaused != false) hash ^= AppPaused.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (ClientID != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(ClientID);
    }
    if (FrameRate != 0F) {
      output.WriteRawTag(85);
      output.WriteFloat(FrameRate);
    }
    if (AppFocused != false) {
      output.WriteRawTag(88);
      output.WriteBool(AppFocused);
    }
    if (AppPaused != false) {
      output.WriteRawTag(96);
      output.WriteBool(AppPaused);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (ClientID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ClientID);
    }
    if (FrameRate != 0F) {
      size += 1 + 4;
    }
    if (AppFocused != false) {
      size += 1 + 1;
    }
    if (AppPaused != false) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(VRNSystemStatus other) {
    if (other == null) {
      return;
    }
    if (other.ClientID != 0) {
      ClientID = other.ClientID;
    }
    if (other.FrameRate != 0F) {
      FrameRate = other.FrameRate;
    }
    if (other.AppFocused != false) {
      AppFocused = other.AppFocused;
    }
    if (other.AppPaused != false) {
      AppPaused = other.AppPaused;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          ClientID = input.ReadInt32();
          break;
        }
        case 85: {
          FrameRate = input.ReadFloat();
          break;
        }
        case 88: {
          AppFocused = input.ReadBool();
          break;
        }
        case 96: {
          AppPaused = input.ReadBool();
          break;
        }
      }
    }
  }

}

public sealed partial class VRNLogHeader : pb::IMessage<VRNLogHeader> {
  private static readonly pb::MessageParser<VRNLogHeader> _parser = new pb::MessageParser<VRNLogHeader>(() => new VRNLogHeader());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<VRNLogHeader> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::VRMineNetReflection.Descriptor.MessageTypes[66]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNLogHeader() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNLogHeader(VRNLogHeader other) : this() {
    activeScene_ = other.activeScene_;
    teleportTarget_ = other.teleportTarget_;
    sessionName_ = other.sessionName_;
    logStartTime_ = other.logStartTime_ != null ? other.logStartTime_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNLogHeader Clone() {
    return new VRNLogHeader(this);
  }

  /// <summary>Field number for the "activeScene" field.</summary>
  public const int ActiveSceneFieldNumber = 1;
  private string activeScene_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string ActiveScene {
    get { return activeScene_; }
    set {
      activeScene_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "teleportTarget" field.</summary>
  public const int TeleportTargetFieldNumber = 2;
  private string teleportTarget_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string TeleportTarget {
    get { return teleportTarget_; }
    set {
      teleportTarget_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "sessionName" field.</summary>
  public const int SessionNameFieldNumber = 3;
  private string sessionName_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string SessionName {
    get { return sessionName_; }
    set {
      sessionName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "logStartTime" field.</summary>
  public const int LogStartTimeFieldNumber = 4;
  private global::Google.Protobuf.WellKnownTypes.Timestamp logStartTime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Google.Protobuf.WellKnownTypes.Timestamp LogStartTime {
    get { return logStartTime_; }
    set {
      logStartTime_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as VRNLogHeader);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(VRNLogHeader other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ActiveScene != other.ActiveScene) return false;
    if (TeleportTarget != other.TeleportTarget) return false;
    if (SessionName != other.SessionName) return false;
    if (!object.Equals(LogStartTime, other.LogStartTime)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (ActiveScene.Length != 0) hash ^= ActiveScene.GetHashCode();
    if (TeleportTarget.Length != 0) hash ^= TeleportTarget.GetHashCode();
    if (SessionName.Length != 0) hash ^= SessionName.GetHashCode();
    if (logStartTime_ != null) hash ^= LogStartTime.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (ActiveScene.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(ActiveScene);
    }
    if (TeleportTarget.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(TeleportTarget);
    }
    if (SessionName.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(SessionName);
    }
    if (logStartTime_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(LogStartTime);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (ActiveScene.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ActiveScene);
    }
    if (TeleportTarget.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(TeleportTarget);
    }
    if (SessionName.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(SessionName);
    }
    if (logStartTime_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(LogStartTime);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(VRNLogHeader other) {
    if (other == null) {
      return;
    }
    if (other.ActiveScene.Length != 0) {
      ActiveScene = other.ActiveScene;
    }
    if (other.TeleportTarget.Length != 0) {
      TeleportTarget = other.TeleportTarget;
    }
    if (other.SessionName.Length != 0) {
      SessionName = other.SessionName;
    }
    if (other.logStartTime_ != null) {
      if (logStartTime_ == null) {
        LogStartTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
      }
      LogStartTime.MergeFrom(other.LogStartTime);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          ActiveScene = input.ReadString();
          break;
        }
        case 18: {
          TeleportTarget = input.ReadString();
          break;
        }
        case 26: {
          SessionName = input.ReadString();
          break;
        }
        case 34: {
          if (logStartTime_ == null) {
            LogStartTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
          }
          input.ReadMessage(LogStartTime);
          break;
        }
      }
    }
  }

}

public sealed partial class VRNLogFooter : pb::IMessage<VRNLogFooter> {
  private static readonly pb::MessageParser<VRNLogFooter> _parser = new pb::MessageParser<VRNLogFooter>(() => new VRNLogFooter());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<VRNLogFooter> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::VRMineNetReflection.Descriptor.MessageTypes[67]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNLogFooter() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNLogFooter(VRNLogFooter other) : this() {
    numMessages_ = other.numMessages_;
    sessionDuration_ = other.sessionDuration_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNLogFooter Clone() {
    return new VRNLogFooter(this);
  }

  /// <summary>Field number for the "numMessages" field.</summary>
  public const int NumMessagesFieldNumber = 1;
  private int numMessages_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int NumMessages {
    get { return numMessages_; }
    set {
      numMessages_ = value;
    }
  }

  /// <summary>Field number for the "sessionDuration" field.</summary>
  public const int SessionDurationFieldNumber = 2;
  private float sessionDuration_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float SessionDuration {
    get { return sessionDuration_; }
    set {
      sessionDuration_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as VRNLogFooter);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(VRNLogFooter other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (NumMessages != other.NumMessages) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SessionDuration, other.SessionDuration)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (NumMessages != 0) hash ^= NumMessages.GetHashCode();
    if (SessionDuration != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SessionDuration);
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (NumMessages != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(NumMessages);
    }
    if (SessionDuration != 0F) {
      output.WriteRawTag(21);
      output.WriteFloat(SessionDuration);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (NumMessages != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumMessages);
    }
    if (SessionDuration != 0F) {
      size += 1 + 4;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(VRNLogFooter other) {
    if (other == null) {
      return;
    }
    if (other.NumMessages != 0) {
      NumMessages = other.NumMessages;
    }
    if (other.SessionDuration != 0F) {
      SessionDuration = other.SessionDuration;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          NumMessages = input.ReadInt32();
          break;
        }
        case 21: {
          SessionDuration = input.ReadFloat();
          break;
        }
      }
    }
  }

}

public sealed partial class VRNLogEvent : pb::IMessage<VRNLogEvent> {
  private static readonly pb::MessageParser<VRNLogEvent> _parser = new pb::MessageParser<VRNLogEvent>(() => new VRNLogEvent());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<VRNLogEvent> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::VRMineNetReflection.Descriptor.MessageTypes[68]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNLogEvent() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNLogEvent(VRNLogEvent other) : this() {
    eventID_ = other.eventID_;
    eventType_ = other.eventType_;
    timestamp_ = other.timestamp_;
    position_ = other.position_ != null ? other.position_.Clone() : null;
    rotation_ = other.rotation_ != null ? other.rotation_.Clone() : null;
    positionMetadata_ = other.positionMetadata_;
    objectType_ = other.objectType_;
    objID_ = other.objID_;
    objectName_ = other.objectName_;
    sourcePlayerID_ = other.sourcePlayerID_;
    targetPlayerID_ = other.targetPlayerID_;
    message_ = other.message_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNLogEvent Clone() {
    return new VRNLogEvent(this);
  }

  /// <summary>Field number for the "eventID" field.</summary>
  public const int EventIDFieldNumber = 1;
  private int eventID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int EventID {
    get { return eventID_; }
    set {
      eventID_ = value;
    }
  }

  /// <summary>Field number for the "eventType" field.</summary>
  public const int EventTypeFieldNumber = 2;
  private global::VRNLogEventType eventType_ = global::VRNLogEventType.Message;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::VRNLogEventType EventType {
    get { return eventType_; }
    set {
      eventType_ = value;
    }
  }

  /// <summary>Field number for the "timestamp" field.</summary>
  public const int TimestampFieldNumber = 3;
  private float timestamp_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Timestamp {
    get { return timestamp_; }
    set {
      timestamp_ = value;
    }
  }

  /// <summary>Field number for the "position" field.</summary>
  public const int PositionFieldNumber = 4;
  private global::VRNVector3 position_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::VRNVector3 Position {
    get { return position_; }
    set {
      position_ = value;
    }
  }

  /// <summary>Field number for the "rotation" field.</summary>
  public const int RotationFieldNumber = 5;
  private global::VRNQuaternion rotation_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::VRNQuaternion Rotation {
    get { return rotation_; }
    set {
      rotation_ = value;
    }
  }

  /// <summary>Field number for the "positionMetadata" field.</summary>
  public const int PositionMetadataFieldNumber = 6;
  private string positionMetadata_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string PositionMetadata {
    get { return positionMetadata_; }
    set {
      positionMetadata_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "objectType" field.</summary>
  public const int ObjectTypeFieldNumber = 10;
  private global::VRNLogObjectType objectType_ = global::VRNLogObjectType.Unknown;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::VRNLogObjectType ObjectType {
    get { return objectType_; }
    set {
      objectType_ = value;
    }
  }

  /// <summary>Field number for the "objID" field.</summary>
  public const int ObjIDFieldNumber = 11;
  private pb::ByteString objID_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString ObjID {
    get { return objID_; }
    set {
      objID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "objectName" field.</summary>
  public const int ObjectNameFieldNumber = 12;
  private string objectName_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string ObjectName {
    get { return objectName_; }
    set {
      objectName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "sourcePlayerID" field.</summary>
  public const int SourcePlayerIDFieldNumber = 20;
  private int sourcePlayerID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int SourcePlayerID {
    get { return sourcePlayerID_; }
    set {
      sourcePlayerID_ = value;
    }
  }

  /// <summary>Field number for the "targetPlayerID" field.</summary>
  public const int TargetPlayerIDFieldNumber = 21;
  private int targetPlayerID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TargetPlayerID {
    get { return targetPlayerID_; }
    set {
      targetPlayerID_ = value;
    }
  }

  /// <summary>Field number for the "message" field.</summary>
  public const int MessageFieldNumber = 100;
  private string message_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Message {
    get { return message_; }
    set {
      message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as VRNLogEvent);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(VRNLogEvent other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (EventID != other.EventID) return false;
    if (EventType != other.EventType) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Timestamp, other.Timestamp)) return false;
    if (!object.Equals(Position, other.Position)) return false;
    if (!object.Equals(Rotation, other.Rotation)) return false;
    if (PositionMetadata != other.PositionMetadata) return false;
    if (ObjectType != other.ObjectType) return false;
    if (ObjID != other.ObjID) return false;
    if (ObjectName != other.ObjectName) return false;
    if (SourcePlayerID != other.SourcePlayerID) return false;
    if (TargetPlayerID != other.TargetPlayerID) return false;
    if (Message != other.Message) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (EventID != 0) hash ^= EventID.GetHashCode();
    if (EventType != global::VRNLogEventType.Message) hash ^= EventType.GetHashCode();
    if (Timestamp != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Timestamp);
    if (position_ != null) hash ^= Position.GetHashCode();
    if (rotation_ != null) hash ^= Rotation.GetHashCode();
    if (PositionMetadata.Length != 0) hash ^= PositionMetadata.GetHashCode();
    if (ObjectType != global::VRNLogObjectType.Unknown) hash ^= ObjectType.GetHashCode();
    if (ObjID.Length != 0) hash ^= ObjID.GetHashCode();
    if (ObjectName.Length != 0) hash ^= ObjectName.GetHashCode();
    if (SourcePlayerID != 0) hash ^= SourcePlayerID.GetHashCode();
    if (TargetPlayerID != 0) hash ^= TargetPlayerID.GetHashCode();
    if (Message.Length != 0) hash ^= Message.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (EventID != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(EventID);
    }
    if (EventType != global::VRNLogEventType.Message) {
      output.WriteRawTag(16);
      output.WriteEnum((int) EventType);
    }
    if (Timestamp != 0F) {
      output.WriteRawTag(29);
      output.WriteFloat(Timestamp);
    }
    if (position_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(Position);
    }
    if (rotation_ != null) {
      output.WriteRawTag(42);
      output.WriteMessage(Rotation);
    }
    if (PositionMetadata.Length != 0) {
      output.WriteRawTag(50);
      output.WriteString(PositionMetadata);
    }
    if (ObjectType != global::VRNLogObjectType.Unknown) {
      output.WriteRawTag(80);
      output.WriteEnum((int) ObjectType);
    }
    if (ObjID.Length != 0) {
      output.WriteRawTag(90);
      output.WriteBytes(ObjID);
    }
    if (ObjectName.Length != 0) {
      output.WriteRawTag(98);
      output.WriteString(ObjectName);
    }
    if (SourcePlayerID != 0) {
      output.WriteRawTag(160, 1);
      output.WriteInt32(SourcePlayerID);
    }
    if (TargetPlayerID != 0) {
      output.WriteRawTag(168, 1);
      output.WriteInt32(TargetPlayerID);
    }
    if (Message.Length != 0) {
      output.WriteRawTag(162, 6);
      output.WriteString(Message);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (EventID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(EventID);
    }
    if (EventType != global::VRNLogEventType.Message) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) EventType);
    }
    if (Timestamp != 0F) {
      size += 1 + 4;
    }
    if (position_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
    }
    if (rotation_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rotation);
    }
    if (PositionMetadata.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(PositionMetadata);
    }
    if (ObjectType != global::VRNLogObjectType.Unknown) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ObjectType);
    }
    if (ObjID.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(ObjID);
    }
    if (ObjectName.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ObjectName);
    }
    if (SourcePlayerID != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(SourcePlayerID);
    }
    if (TargetPlayerID != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(TargetPlayerID);
    }
    if (Message.Length != 0) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(VRNLogEvent other) {
    if (other == null) {
      return;
    }
    if (other.EventID != 0) {
      EventID = other.EventID;
    }
    if (other.EventType != global::VRNLogEventType.Message) {
      EventType = other.EventType;
    }
    if (other.Timestamp != 0F) {
      Timestamp = other.Timestamp;
    }
    if (other.position_ != null) {
      if (position_ == null) {
        Position = new global::VRNVector3();
      }
      Position.MergeFrom(other.Position);
    }
    if (other.rotation_ != null) {
      if (rotation_ == null) {
        Rotation = new global::VRNQuaternion();
      }
      Rotation.MergeFrom(other.Rotation);
    }
    if (other.PositionMetadata.Length != 0) {
      PositionMetadata = other.PositionMetadata;
    }
    if (other.ObjectType != global::VRNLogObjectType.Unknown) {
      ObjectType = other.ObjectType;
    }
    if (other.ObjID.Length != 0) {
      ObjID = other.ObjID;
    }
    if (other.ObjectName.Length != 0) {
      ObjectName = other.ObjectName;
    }
    if (other.SourcePlayerID != 0) {
      SourcePlayerID = other.SourcePlayerID;
    }
    if (other.TargetPlayerID != 0) {
      TargetPlayerID = other.TargetPlayerID;
    }
    if (other.Message.Length != 0) {
      Message = other.Message;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          EventID = input.ReadInt32();
          break;
        }
        case 16: {
          EventType = (global::VRNLogEventType) input.ReadEnum();
          break;
        }
        case 29: {
          Timestamp = input.ReadFloat();
          break;
        }
        case 34: {
          if (position_ == null) {
            Position = new global::VRNVector3();
          }
          input.ReadMessage(Position);
          break;
        }
        case 42: {
          if (rotation_ == null) {
            Rotation = new global::VRNQuaternion();
          }
          input.ReadMessage(Rotation);
          break;
        }
        case 50: {
          PositionMetadata = input.ReadString();
          break;
        }
        case 80: {
          ObjectType = (global::VRNLogObjectType) input.ReadEnum();
          break;
        }
        case 90: {
          ObjID = input.ReadBytes();
          break;
        }
        case 98: {
          ObjectName = input.ReadString();
          break;
        }
        case 160: {
          SourcePlayerID = input.ReadInt32();
          break;
        }
        case 168: {
          TargetPlayerID = input.ReadInt32();
          break;
        }
        case 802: {
          Message = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class VRNSocketData : pb::IMessage<VRNSocketData> {
  private static readonly pb::MessageParser<VRNSocketData> _parser = new pb::MessageParser<VRNSocketData>(() => new VRNSocketData());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<VRNSocketData> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::VRMineNetReflection.Descriptor.MessageTypes[69]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNSocketData() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNSocketData(VRNSocketData other) : this() {
    socketID_ = other.socketID_;
    objectID_ = other.objectID_;
    objectIDString_ = other.objectIDString_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNSocketData Clone() {
    return new VRNSocketData(this);
  }

  /// <summary>Field number for the "socketID" field.</summary>
  public const int SocketIDFieldNumber = 1;
  private string socketID_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string SocketID {
    get { return socketID_; }
    set {
      socketID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "objectID" field.</summary>
  public const int ObjectIDFieldNumber = 4;
  private pb::ByteString objectID_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString ObjectID {
    get { return objectID_; }
    set {
      objectID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "objectIDString" field.</summary>
  public const int ObjectIDStringFieldNumber = 2;
  private string objectIDString_ = "";
  /// <summary>
  ///int32 socketMessageType = 3;
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string ObjectIDString {
    get { return objectIDString_; }
    set {
      objectIDString_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as VRNSocketData);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(VRNSocketData other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SocketID != other.SocketID) return false;
    if (ObjectID != other.ObjectID) return false;
    if (ObjectIDString != other.ObjectIDString) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (SocketID.Length != 0) hash ^= SocketID.GetHashCode();
    if (ObjectID.Length != 0) hash ^= ObjectID.GetHashCode();
    if (ObjectIDString.Length != 0) hash ^= ObjectIDString.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (SocketID.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(SocketID);
    }
    if (ObjectIDString.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(ObjectIDString);
    }
    if (ObjectID.Length != 0) {
      output.WriteRawTag(34);
      output.WriteBytes(ObjectID);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (SocketID.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(SocketID);
    }
    if (ObjectID.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(ObjectID);
    }
    if (ObjectIDString.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ObjectIDString);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(VRNSocketData other) {
    if (other == null) {
      return;
    }
    if (other.SocketID.Length != 0) {
      SocketID = other.SocketID;
    }
    if (other.ObjectID.Length != 0) {
      ObjectID = other.ObjectID;
    }
    if (other.ObjectIDString.Length != 0) {
      ObjectIDString = other.ObjectIDString;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          SocketID = input.ReadString();
          break;
        }
        case 18: {
          ObjectIDString = input.ReadString();
          break;
        }
        case 34: {
          ObjectID = input.ReadBytes();
          break;
        }
      }
    }
  }

}

public sealed partial class VRNObjectHeldState : pb::IMessage<VRNObjectHeldState> {
  private static readonly pb::MessageParser<VRNObjectHeldState> _parser = new pb::MessageParser<VRNObjectHeldState>(() => new VRNObjectHeldState());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<VRNObjectHeldState> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::VRMineNetReflection.Descriptor.MessageTypes[70]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNObjectHeldState() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNObjectHeldState(VRNObjectHeldState other) : this() {
    objectID_ = other.objectID_;
    objectHeld_ = other.objectHeld_;
    heldByClientID_ = other.heldByClientID_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNObjectHeldState Clone() {
    return new VRNObjectHeldState(this);
  }

  /// <summary>Field number for the "objectID" field.</summary>
  public const int ObjectIDFieldNumber = 1;
  private pb::ByteString objectID_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString ObjectID {
    get { return objectID_; }
    set {
      objectID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "objectHeld" field.</summary>
  public const int ObjectHeldFieldNumber = 2;
  private bool objectHeld_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool ObjectHeld {
    get { return objectHeld_; }
    set {
      objectHeld_ = value;
    }
  }

  /// <summary>Field number for the "heldByClientID" field.</summary>
  public const int HeldByClientIDFieldNumber = 3;
  private int heldByClientID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int HeldByClientID {
    get { return heldByClientID_; }
    set {
      heldByClientID_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as VRNObjectHeldState);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(VRNObjectHeldState other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ObjectID != other.ObjectID) return false;
    if (ObjectHeld != other.ObjectHeld) return false;
    if (HeldByClientID != other.HeldByClientID) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (ObjectID.Length != 0) hash ^= ObjectID.GetHashCode();
    if (ObjectHeld != false) hash ^= ObjectHeld.GetHashCode();
    if (HeldByClientID != 0) hash ^= HeldByClientID.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (ObjectID.Length != 0) {
      output.WriteRawTag(10);
      output.WriteBytes(ObjectID);
    }
    if (ObjectHeld != false) {
      output.WriteRawTag(16);
      output.WriteBool(ObjectHeld);
    }
    if (HeldByClientID != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(HeldByClientID);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (ObjectID.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(ObjectID);
    }
    if (ObjectHeld != false) {
      size += 1 + 1;
    }
    if (HeldByClientID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(HeldByClientID);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(VRNObjectHeldState other) {
    if (other == null) {
      return;
    }
    if (other.ObjectID.Length != 0) {
      ObjectID = other.ObjectID;
    }
    if (other.ObjectHeld != false) {
      ObjectHeld = other.ObjectHeld;
    }
    if (other.HeldByClientID != 0) {
      HeldByClientID = other.HeldByClientID;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          ObjectID = input.ReadBytes();
          break;
        }
        case 16: {
          ObjectHeld = input.ReadBool();
          break;
        }
        case 24: {
          HeldByClientID = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class VRNNPCData : pb::IMessage<VRNNPCData> {
  private static readonly pb::MessageParser<VRNNPCData> _parser = new pb::MessageParser<VRNNPCData>(() => new VRNNPCData());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<VRNNPCData> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::VRMineNetReflection.Descriptor.MessageTypes[71]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNNPCData() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNNPCData(VRNNPCData other) : this() {
    targetPlayerID_ = other.targetPlayerID_;
    isStanding_ = other.isStanding_;
    isFollowing_ = other.isFollowing_;
    npcPosition_ = other.npcPosition_ != null ? other.npcPosition_.Clone() : null;
    npcRotation_ = other.npcRotation_ != null ? other.npcRotation_.Clone() : null;
    navDestination_ = other.navDestination_ != null ? other.navDestination_.Clone() : null;
    animatorState_ = other.animatorState_;
    animTime_ = other.animTime_;
    walking_ = other.walking_;
    atDestination_ = other.atDestination_;
    running_ = other.running_;
    crouching_ = other.crouching_;
    equipmentFlags_ = other.equipmentFlags_;
    forwardVelocity_ = other.forwardVelocity_;
    lateralVelocity_ = other.lateralVelocity_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNNPCData Clone() {
    return new VRNNPCData(this);
  }

  /// <summary>Field number for the "targetPlayerID" field.</summary>
  public const int TargetPlayerIDFieldNumber = 1;
  private int targetPlayerID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TargetPlayerID {
    get { return targetPlayerID_; }
    set {
      targetPlayerID_ = value;
    }
  }

  /// <summary>Field number for the "isStanding" field.</summary>
  public const int IsStandingFieldNumber = 2;
  private bool isStanding_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsStanding {
    get { return isStanding_; }
    set {
      isStanding_ = value;
    }
  }

  /// <summary>Field number for the "isFollowing" field.</summary>
  public const int IsFollowingFieldNumber = 3;
  private bool isFollowing_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsFollowing {
    get { return isFollowing_; }
    set {
      isFollowing_ = value;
    }
  }

  /// <summary>Field number for the "npcPosition" field.</summary>
  public const int NpcPositionFieldNumber = 4;
  private global::VRNVector3 npcPosition_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::VRNVector3 NpcPosition {
    get { return npcPosition_; }
    set {
      npcPosition_ = value;
    }
  }

  /// <summary>Field number for the "npcRotation" field.</summary>
  public const int NpcRotationFieldNumber = 14;
  private global::VRNQuaternion npcRotation_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::VRNQuaternion NpcRotation {
    get { return npcRotation_; }
    set {
      npcRotation_ = value;
    }
  }

  /// <summary>Field number for the "navDestination" field.</summary>
  public const int NavDestinationFieldNumber = 13;
  private global::VRNVector3 navDestination_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::VRNVector3 NavDestination {
    get { return navDestination_; }
    set {
      navDestination_ = value;
    }
  }

  /// <summary>Field number for the "animatorState" field.</summary>
  public const int AnimatorStateFieldNumber = 5;
  private int animatorState_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int AnimatorState {
    get { return animatorState_; }
    set {
      animatorState_ = value;
    }
  }

  /// <summary>Field number for the "animTime" field.</summary>
  public const int AnimTimeFieldNumber = 6;
  private float animTime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float AnimTime {
    get { return animTime_; }
    set {
      animTime_ = value;
    }
  }

  /// <summary>Field number for the "walking" field.</summary>
  public const int WalkingFieldNumber = 7;
  private bool walking_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Walking {
    get { return walking_; }
    set {
      walking_ = value;
    }
  }

  /// <summary>Field number for the "atDestination" field.</summary>
  public const int AtDestinationFieldNumber = 8;
  private bool atDestination_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool AtDestination {
    get { return atDestination_; }
    set {
      atDestination_ = value;
    }
  }

  /// <summary>Field number for the "running" field.</summary>
  public const int RunningFieldNumber = 9;
  private bool running_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Running {
    get { return running_; }
    set {
      running_ = value;
    }
  }

  /// <summary>Field number for the "crouching" field.</summary>
  public const int CrouchingFieldNumber = 10;
  private bool crouching_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Crouching {
    get { return crouching_; }
    set {
      crouching_ = value;
    }
  }

  /// <summary>Field number for the "equipmentFlags" field.</summary>
  public const int EquipmentFlagsFieldNumber = 15;
  private uint equipmentFlags_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint EquipmentFlags {
    get { return equipmentFlags_; }
    set {
      equipmentFlags_ = value;
    }
  }

  /// <summary>Field number for the "ForwardVelocity" field.</summary>
  public const int ForwardVelocityFieldNumber = 11;
  private float forwardVelocity_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float ForwardVelocity {
    get { return forwardVelocity_; }
    set {
      forwardVelocity_ = value;
    }
  }

  /// <summary>Field number for the "LateralVelocity" field.</summary>
  public const int LateralVelocityFieldNumber = 12;
  private float lateralVelocity_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float LateralVelocity {
    get { return lateralVelocity_; }
    set {
      lateralVelocity_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as VRNNPCData);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(VRNNPCData other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (TargetPlayerID != other.TargetPlayerID) return false;
    if (IsStanding != other.IsStanding) return false;
    if (IsFollowing != other.IsFollowing) return false;
    if (!object.Equals(NpcPosition, other.NpcPosition)) return false;
    if (!object.Equals(NpcRotation, other.NpcRotation)) return false;
    if (!object.Equals(NavDestination, other.NavDestination)) return false;
    if (AnimatorState != other.AnimatorState) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AnimTime, other.AnimTime)) return false;
    if (Walking != other.Walking) return false;
    if (AtDestination != other.AtDestination) return false;
    if (Running != other.Running) return false;
    if (Crouching != other.Crouching) return false;
    if (EquipmentFlags != other.EquipmentFlags) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ForwardVelocity, other.ForwardVelocity)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(LateralVelocity, other.LateralVelocity)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (TargetPlayerID != 0) hash ^= TargetPlayerID.GetHashCode();
    if (IsStanding != false) hash ^= IsStanding.GetHashCode();
    if (IsFollowing != false) hash ^= IsFollowing.GetHashCode();
    if (npcPosition_ != null) hash ^= NpcPosition.GetHashCode();
    if (npcRotation_ != null) hash ^= NpcRotation.GetHashCode();
    if (navDestination_ != null) hash ^= NavDestination.GetHashCode();
    if (AnimatorState != 0) hash ^= AnimatorState.GetHashCode();
    if (AnimTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AnimTime);
    if (Walking != false) hash ^= Walking.GetHashCode();
    if (AtDestination != false) hash ^= AtDestination.GetHashCode();
    if (Running != false) hash ^= Running.GetHashCode();
    if (Crouching != false) hash ^= Crouching.GetHashCode();
    if (EquipmentFlags != 0) hash ^= EquipmentFlags.GetHashCode();
    if (ForwardVelocity != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ForwardVelocity);
    if (LateralVelocity != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(LateralVelocity);
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (TargetPlayerID != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(TargetPlayerID);
    }
    if (IsStanding != false) {
      output.WriteRawTag(16);
      output.WriteBool(IsStanding);
    }
    if (IsFollowing != false) {
      output.WriteRawTag(24);
      output.WriteBool(IsFollowing);
    }
    if (npcPosition_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(NpcPosition);
    }
    if (AnimatorState != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(AnimatorState);
    }
    if (AnimTime != 0F) {
      output.WriteRawTag(53);
      output.WriteFloat(AnimTime);
    }
    if (Walking != false) {
      output.WriteRawTag(56);
      output.WriteBool(Walking);
    }
    if (AtDestination != false) {
      output.WriteRawTag(64);
      output.WriteBool(AtDestination);
    }
    if (Running != false) {
      output.WriteRawTag(72);
      output.WriteBool(Running);
    }
    if (Crouching != false) {
      output.WriteRawTag(80);
      output.WriteBool(Crouching);
    }
    if (ForwardVelocity != 0F) {
      output.WriteRawTag(93);
      output.WriteFloat(ForwardVelocity);
    }
    if (LateralVelocity != 0F) {
      output.WriteRawTag(101);
      output.WriteFloat(LateralVelocity);
    }
    if (navDestination_ != null) {
      output.WriteRawTag(106);
      output.WriteMessage(NavDestination);
    }
    if (npcRotation_ != null) {
      output.WriteRawTag(114);
      output.WriteMessage(NpcRotation);
    }
    if (EquipmentFlags != 0) {
      output.WriteRawTag(120);
      output.WriteUInt32(EquipmentFlags);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (TargetPlayerID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetPlayerID);
    }
    if (IsStanding != false) {
      size += 1 + 1;
    }
    if (IsFollowing != false) {
      size += 1 + 1;
    }
    if (npcPosition_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(NpcPosition);
    }
    if (npcRotation_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(NpcRotation);
    }
    if (navDestination_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(NavDestination);
    }
    if (AnimatorState != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(AnimatorState);
    }
    if (AnimTime != 0F) {
      size += 1 + 4;
    }
    if (Walking != false) {
      size += 1 + 1;
    }
    if (AtDestination != false) {
      size += 1 + 1;
    }
    if (Running != false) {
      size += 1 + 1;
    }
    if (Crouching != false) {
      size += 1 + 1;
    }
    if (EquipmentFlags != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EquipmentFlags);
    }
    if (ForwardVelocity != 0F) {
      size += 1 + 4;
    }
    if (LateralVelocity != 0F) {
      size += 1 + 4;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(VRNNPCData other) {
    if (other == null) {
      return;
    }
    if (other.TargetPlayerID != 0) {
      TargetPlayerID = other.TargetPlayerID;
    }
    if (other.IsStanding != false) {
      IsStanding = other.IsStanding;
    }
    if (other.IsFollowing != false) {
      IsFollowing = other.IsFollowing;
    }
    if (other.npcPosition_ != null) {
      if (npcPosition_ == null) {
        NpcPosition = new global::VRNVector3();
      }
      NpcPosition.MergeFrom(other.NpcPosition);
    }
    if (other.npcRotation_ != null) {
      if (npcRotation_ == null) {
        NpcRotation = new global::VRNQuaternion();
      }
      NpcRotation.MergeFrom(other.NpcRotation);
    }
    if (other.navDestination_ != null) {
      if (navDestination_ == null) {
        NavDestination = new global::VRNVector3();
      }
      NavDestination.MergeFrom(other.NavDestination);
    }
    if (other.AnimatorState != 0) {
      AnimatorState = other.AnimatorState;
    }
    if (other.AnimTime != 0F) {
      AnimTime = other.AnimTime;
    }
    if (other.Walking != false) {
      Walking = other.Walking;
    }
    if (other.AtDestination != false) {
      AtDestination = other.AtDestination;
    }
    if (other.Running != false) {
      Running = other.Running;
    }
    if (other.Crouching != false) {
      Crouching = other.Crouching;
    }
    if (other.EquipmentFlags != 0) {
      EquipmentFlags = other.EquipmentFlags;
    }
    if (other.ForwardVelocity != 0F) {
      ForwardVelocity = other.ForwardVelocity;
    }
    if (other.LateralVelocity != 0F) {
      LateralVelocity = other.LateralVelocity;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          TargetPlayerID = input.ReadInt32();
          break;
        }
        case 16: {
          IsStanding = input.ReadBool();
          break;
        }
        case 24: {
          IsFollowing = input.ReadBool();
          break;
        }
        case 34: {
          if (npcPosition_ == null) {
            NpcPosition = new global::VRNVector3();
          }
          input.ReadMessage(NpcPosition);
          break;
        }
        case 40: {
          AnimatorState = input.ReadInt32();
          break;
        }
        case 53: {
          AnimTime = input.ReadFloat();
          break;
        }
        case 56: {
          Walking = input.ReadBool();
          break;
        }
        case 64: {
          AtDestination = input.ReadBool();
          break;
        }
        case 72: {
          Running = input.ReadBool();
          break;
        }
        case 80: {
          Crouching = input.ReadBool();
          break;
        }
        case 93: {
          ForwardVelocity = input.ReadFloat();
          break;
        }
        case 101: {
          LateralVelocity = input.ReadFloat();
          break;
        }
        case 106: {
          if (navDestination_ == null) {
            NavDestination = new global::VRNVector3();
          }
          input.ReadMessage(NavDestination);
          break;
        }
        case 114: {
          if (npcRotation_ == null) {
            NpcRotation = new global::VRNQuaternion();
          }
          input.ReadMessage(NpcRotation);
          break;
        }
        case 120: {
          EquipmentFlags = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class VRNAudioCollisionData : pb::IMessage<VRNAudioCollisionData> {
  private static readonly pb::MessageParser<VRNAudioCollisionData> _parser = new pb::MessageParser<VRNAudioCollisionData>(() => new VRNAudioCollisionData());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<VRNAudioCollisionData> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::VRMineNetReflection.Descriptor.MessageTypes[72]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNAudioCollisionData() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNAudioCollisionData(VRNAudioCollisionData other) : this() {
    position_ = other.position_ != null ? other.position_.Clone() : null;
    audioName_ = other.audioName_;
    clipIndex_ = other.clipIndex_;
    audioType_ = other.audioType_;
    volume_ = other.volume_;
    pitch_ = other.pitch_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNAudioCollisionData Clone() {
    return new VRNAudioCollisionData(this);
  }

  /// <summary>Field number for the "position" field.</summary>
  public const int PositionFieldNumber = 1;
  private global::VRNVector3 position_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::VRNVector3 Position {
    get { return position_; }
    set {
      position_ = value;
    }
  }

  /// <summary>Field number for the "audioName" field.</summary>
  public const int AudioNameFieldNumber = 2;
  private string audioName_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string AudioName {
    get { return audioName_; }
    set {
      audioName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "clipIndex" field.</summary>
  public const int ClipIndexFieldNumber = 3;
  private int clipIndex_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ClipIndex {
    get { return clipIndex_; }
    set {
      clipIndex_ = value;
    }
  }

  /// <summary>Field number for the "audioType" field.</summary>
  public const int AudioTypeFieldNumber = 4;
  private int audioType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int AudioType {
    get { return audioType_; }
    set {
      audioType_ = value;
    }
  }

  /// <summary>Field number for the "volume" field.</summary>
  public const int VolumeFieldNumber = 5;
  private float volume_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Volume {
    get { return volume_; }
    set {
      volume_ = value;
    }
  }

  /// <summary>Field number for the "pitch" field.</summary>
  public const int PitchFieldNumber = 6;
  private float pitch_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Pitch {
    get { return pitch_; }
    set {
      pitch_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as VRNAudioCollisionData);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(VRNAudioCollisionData other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Position, other.Position)) return false;
    if (AudioName != other.AudioName) return false;
    if (ClipIndex != other.ClipIndex) return false;
    if (AudioType != other.AudioType) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Volume, other.Volume)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Pitch, other.Pitch)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (position_ != null) hash ^= Position.GetHashCode();
    if (AudioName.Length != 0) hash ^= AudioName.GetHashCode();
    if (ClipIndex != 0) hash ^= ClipIndex.GetHashCode();
    if (AudioType != 0) hash ^= AudioType.GetHashCode();
    if (Volume != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Volume);
    if (Pitch != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Pitch);
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (position_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Position);
    }
    if (AudioName.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(AudioName);
    }
    if (ClipIndex != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(ClipIndex);
    }
    if (AudioType != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(AudioType);
    }
    if (Volume != 0F) {
      output.WriteRawTag(45);
      output.WriteFloat(Volume);
    }
    if (Pitch != 0F) {
      output.WriteRawTag(53);
      output.WriteFloat(Pitch);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (position_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
    }
    if (AudioName.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(AudioName);
    }
    if (ClipIndex != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ClipIndex);
    }
    if (AudioType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(AudioType);
    }
    if (Volume != 0F) {
      size += 1 + 4;
    }
    if (Pitch != 0F) {
      size += 1 + 4;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(VRNAudioCollisionData other) {
    if (other == null) {
      return;
    }
    if (other.position_ != null) {
      if (position_ == null) {
        Position = new global::VRNVector3();
      }
      Position.MergeFrom(other.Position);
    }
    if (other.AudioName.Length != 0) {
      AudioName = other.AudioName;
    }
    if (other.ClipIndex != 0) {
      ClipIndex = other.ClipIndex;
    }
    if (other.AudioType != 0) {
      AudioType = other.AudioType;
    }
    if (other.Volume != 0F) {
      Volume = other.Volume;
    }
    if (other.Pitch != 0F) {
      Pitch = other.Pitch;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (position_ == null) {
            Position = new global::VRNVector3();
          }
          input.ReadMessage(Position);
          break;
        }
        case 18: {
          AudioName = input.ReadString();
          break;
        }
        case 24: {
          ClipIndex = input.ReadInt32();
          break;
        }
        case 32: {
          AudioType = input.ReadInt32();
          break;
        }
        case 45: {
          Volume = input.ReadFloat();
          break;
        }
        case 53: {
          Pitch = input.ReadFloat();
          break;
        }
      }
    }
  }

}

public sealed partial class VRNRandomSeedData : pb::IMessage<VRNRandomSeedData> {
  private static readonly pb::MessageParser<VRNRandomSeedData> _parser = new pb::MessageParser<VRNRandomSeedData>(() => new VRNRandomSeedData());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<VRNRandomSeedData> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::VRMineNetReflection.Descriptor.MessageTypes[73]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNRandomSeedData() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNRandomSeedData(VRNRandomSeedData other) : this() {
    seed_ = other.seed_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNRandomSeedData Clone() {
    return new VRNRandomSeedData(this);
  }

  /// <summary>Field number for the "seed" field.</summary>
  public const int SeedFieldNumber = 1;
  private int seed_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Seed {
    get { return seed_; }
    set {
      seed_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as VRNRandomSeedData);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(VRNRandomSeedData other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Seed != other.Seed) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Seed != 0) hash ^= Seed.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Seed != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Seed);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Seed != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Seed);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(VRNRandomSeedData other) {
    if (other == null) {
      return;
    }
    if (other.Seed != 0) {
      Seed = other.Seed;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Seed = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class VRNHalfCurtainData : pb::IMessage<VRNHalfCurtainData> {
  private static readonly pb::MessageParser<VRNHalfCurtainData> _parser = new pb::MessageParser<VRNHalfCurtainData>(() => new VRNHalfCurtainData());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<VRNHalfCurtainData> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::VRMineNetReflection.Descriptor.MessageTypes[74]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNHalfCurtainData() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNHalfCurtainData(VRNHalfCurtainData other) : this() {
    grabbed_ = other.grabbed_;
    hangPosition_ = other.hangPosition_ != null ? other.hangPosition_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNHalfCurtainData Clone() {
    return new VRNHalfCurtainData(this);
  }

  /// <summary>Field number for the "grabbed" field.</summary>
  public const int GrabbedFieldNumber = 1;
  private bool grabbed_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Grabbed {
    get { return grabbed_; }
    set {
      grabbed_ = value;
    }
  }

  /// <summary>Field number for the "hangPosition" field.</summary>
  public const int HangPositionFieldNumber = 2;
  private global::VRNVector3 hangPosition_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::VRNVector3 HangPosition {
    get { return hangPosition_; }
    set {
      hangPosition_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as VRNHalfCurtainData);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(VRNHalfCurtainData other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Grabbed != other.Grabbed) return false;
    if (!object.Equals(HangPosition, other.HangPosition)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Grabbed != false) hash ^= Grabbed.GetHashCode();
    if (hangPosition_ != null) hash ^= HangPosition.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Grabbed != false) {
      output.WriteRawTag(8);
      output.WriteBool(Grabbed);
    }
    if (hangPosition_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(HangPosition);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Grabbed != false) {
      size += 1 + 1;
    }
    if (hangPosition_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(HangPosition);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(VRNHalfCurtainData other) {
    if (other == null) {
      return;
    }
    if (other.Grabbed != false) {
      Grabbed = other.Grabbed;
    }
    if (other.hangPosition_ != null) {
      if (hangPosition_ == null) {
        HangPosition = new global::VRNVector3();
      }
      HangPosition.MergeFrom(other.HangPosition);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Grabbed = input.ReadBool();
          break;
        }
        case 18: {
          if (hangPosition_ == null) {
            HangPosition = new global::VRNVector3();
          }
          input.ReadMessage(HangPosition);
          break;
        }
      }
    }
  }

}

public sealed partial class VRNStretcherData : pb::IMessage<VRNStretcherData> {
  private static readonly pb::MessageParser<VRNStretcherData> _parser = new pb::MessageParser<VRNStretcherData>(() => new VRNStretcherData());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<VRNStretcherData> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::VRMineNetReflection.Descriptor.MessageTypes[75]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNStretcherData() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNStretcherData(VRNStretcherData other) : this() {
    npcActive_ = other.npcActive_;
    bg4Active_ = other.bg4Active_;
    npcAlive_ = other.npcAlive_;
    npcName_ = other.npcName_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VRNStretcherData Clone() {
    return new VRNStretcherData(this);
  }

  /// <summary>Field number for the "npcActive" field.</summary>
  public const int NpcActiveFieldNumber = 1;
  private bool npcActive_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool NpcActive {
    get { return npcActive_; }
    set {
      npcActive_ = value;
    }
  }

  /// <summary>Field number for the "bg4Active" field.</summary>
  public const int Bg4ActiveFieldNumber = 2;
  private bool bg4Active_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Bg4Active {
    get { return bg4Active_; }
    set {
      bg4Active_ = value;
    }
  }

  /// <summary>Field number for the "npcAlive" field.</summary>
  public const int NpcAliveFieldNumber = 3;
  private bool npcAlive_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool NpcAlive {
    get { return npcAlive_; }
    set {
      npcAlive_ = value;
    }
  }

  /// <summary>Field number for the "npcName" field.</summary>
  public const int NpcNameFieldNumber = 4;
  private string npcName_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string NpcName {
    get { return npcName_; }
    set {
      npcName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as VRNStretcherData);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(VRNStretcherData other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (NpcActive != other.NpcActive) return false;
    if (Bg4Active != other.Bg4Active) return false;
    if (NpcAlive != other.NpcAlive) return false;
    if (NpcName != other.NpcName) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (NpcActive != false) hash ^= NpcActive.GetHashCode();
    if (Bg4Active != false) hash ^= Bg4Active.GetHashCode();
    if (NpcAlive != false) hash ^= NpcAlive.GetHashCode();
    if (NpcName.Length != 0) hash ^= NpcName.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (NpcActive != false) {
      output.WriteRawTag(8);
      output.WriteBool(NpcActive);
    }
    if (Bg4Active != false) {
      output.WriteRawTag(16);
      output.WriteBool(Bg4Active);
    }
    if (NpcAlive != false) {
      output.WriteRawTag(24);
      output.WriteBool(NpcAlive);
    }
    if (NpcName.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(NpcName);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (NpcActive != false) {
      size += 1 + 1;
    }
    if (Bg4Active != false) {
      size += 1 + 1;
    }
    if (NpcAlive != false) {
      size += 1 + 1;
    }
    if (NpcName.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(NpcName);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(VRNStretcherData other) {
    if (other == null) {
      return;
    }
    if (other.NpcActive != false) {
      NpcActive = other.NpcActive;
    }
    if (other.Bg4Active != false) {
      Bg4Active = other.Bg4Active;
    }
    if (other.NpcAlive != false) {
      NpcAlive = other.NpcAlive;
    }
    if (other.NpcName.Length != 0) {
      NpcName = other.NpcName;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          NpcActive = input.ReadBool();
          break;
        }
        case 16: {
          Bg4Active = input.ReadBool();
          break;
        }
        case 24: {
          NpcAlive = input.ReadBool();
          break;
        }
        case 34: {
          NpcName = input.ReadString();
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
