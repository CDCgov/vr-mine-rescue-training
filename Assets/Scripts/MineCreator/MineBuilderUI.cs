using UnityEngine;
using UnityEngine.UI;
using System.Collections;
using System.Collections.Generic;
using NIOSH_EditorLayers;

namespace NIOSH_MineCreation
{
    public class MineBuilderUI : MonoBehaviour
    {
        public LoadableAssetManager LoadableAssetManager;
        public GameObject loadingIcon;
        public MineSettings.TileSet tileSet;
        public LoadableAssetCollection autoGeneratedAssets;
        public Transform AssetCollection;
        public SliderField RockDust_SliderField;
        public SliderField NumEntries_SliderField;
        public SliderField NumCrosscuts_SliderField;
        public SliderField SeamHeight_SliderField;
        public SliderField PillarWidth_SliderField;
        public SliderField PillarLength_SliderField;
        public SliderField EntryWidth_SliderField;
        public SliderField BoltSpacing_SliderField;
        public SliderField BoltRibOffset_SliderField;
        public Button ResetValues_Button;
        public Button Create_Button;
        public Button Return_Button;
        public ToggleSwitch unitToggle;
        public ToggleSwitch BoltsToggle;
        public TMPro.TMP_Dropdown TilesetDropdown;
        //public MaterialsList _rockDustMaterialList;
        public ScenarioEditorCamera EditorCamera;
        public ScenarioEditorViewportController EditorViewportController;
        public AssetLibrary AssetLibrary;
        //public HierarchyContainer HierarchyContainer;
        public LayerManager LayerManager;
        public ScenarioEditorCanvasSwapper EditorCanvasSwapper;
        public CanvasGroup AssetPlacementCanvasGroup;
        public SceneLoader SceneLoader;
        public SystemManager SystemManager;

        private float _rockDustLvl;
        private int _numEntries;
        private int _numCrosscuts;
        private float _seamHeight;
        private float _pillarWidth;
        private float _pillarLength;
        private float _entryWidth;
        private float _boltSpacing;
        private float _boltRibOffset;
        private float _minPillarSizeAllowed;
        private bool _generationEnabled = false;
        private bool _enableCornerCurtains = false;
        //private float _unitMultiplier = 3.28084f;
        private float _unitMultiplier = 1;
        private MineBuilder _builder;
        private List<float> _rockDustBackups = new List<float>();

        const float METERS_TO_FEET = 3.28084f;

        public MineBuilderToEditorTransition mineBuilderToEditorTransition;

        private void Start()
        {
            SystemManager = SystemManager.GetDefault();

            loadingIcon.SetActive(false);
            if(!ScenarioInitializer.Instance.GenerateMineOnStart)
            {
                SkipMineGeneration();
            }
            else
            {
                if (LoadableAssetManager == null)
                    LoadableAssetManager = LoadableAssetManager.GetDefault(gameObject);

                 _builder = new MineBuilder();
                if (TilesetDropdown != null)
                {
                    TilesetDropdown.ClearOptions();
                    List<string> options = new List<string>();
                    foreach (var opt in System.Enum.GetValues(typeof(MineSettings.TileSet)))
                    {
                        options.Add(opt.ToString());
                    }
                    TilesetDropdown.AddOptions(options);
                }
                //value events
                RockDust_SliderField.onSubmitValue.AddListener(SetRockDust);
                NumEntries_SliderField.onSubmitValue.AddListener(SetNumEntries);
                NumCrosscuts_SliderField.onSubmitValue.AddListener(SetNumCrosscuts);
                SeamHeight_SliderField.onSubmitValue.AddListener(SetSeamHeight);
                PillarLength_SliderField.onSubmitValue.AddListener(SetPillarLength);
                PillarWidth_SliderField.onSubmitValue.AddListener(SetPillarWidth);
                EntryWidth_SliderField.onSubmitValue.AddListener(SetEntryWidth);
                BoltSpacing_SliderField.onSubmitValue.AddListener(SetBoltSpacing);
                BoltRibOffset_SliderField.onSubmitValue.AddListener(SetBoltRibOffset);
                if(TilesetDropdown != null)
                    TilesetDropdown.onValueChanged.AddListener(SetTileset);

                 //reset value events
                ResetValues_Button.onClick.AddListener(RockDust_SliderField.ResetValues);
                ResetValues_Button.onClick.AddListener(NumEntries_SliderField.ResetValues);
                ResetValues_Button.onClick.AddListener(NumCrosscuts_SliderField.ResetValues);
                ResetValues_Button.onClick.AddListener(SeamHeight_SliderField.ResetValues);
                ResetValues_Button.onClick.AddListener(PillarWidth_SliderField.ResetValues);
                ResetValues_Button.onClick.AddListener(PillarLength_SliderField.ResetValues);
                ResetValues_Button.onClick.AddListener(EntryWidth_SliderField.ResetValues);
                ResetValues_Button.onClick.AddListener(BoltSpacing_SliderField.ResetValues);
                ResetValues_Button.onClick.AddListener(BoltRibOffset_SliderField.ResetValues);

                //unit of measure events
                unitToggle.onToggleComplete.AddListener(SeamHeight_SliderField.ChangeUnitOfMeasure);
                unitToggle.onToggleComplete.AddListener(PillarLength_SliderField.ChangeUnitOfMeasure);
                unitToggle.onToggleComplete.AddListener(PillarWidth_SliderField.ChangeUnitOfMeasure);
                unitToggle.onToggleComplete.AddListener(EntryWidth_SliderField.ChangeUnitOfMeasure);
                unitToggle.onToggleComplete.AddListener(BoltSpacing_SliderField.ChangeUnitOfMeasure);
                unitToggle.onToggleComplete.AddListener(BoltRibOffset_SliderField.ChangeUnitOfMeasure);
                unitToggle.onToggleComplete.AddListener(ChangeUOMMultiplier);
                unitToggle.ToggleInstantly(SystemManager.SystemConfig.DisplayUnits == MeasurementUnits.Metric);

                //Bolt enable event listener
                Create_Button.onClick.AddListener(FinalizeMine);
                Return_Button.onClick.AddListener(ReturnToMainMenu);

                //Bolt enable event listener
                BoltsToggle.onToggleComplete.AddListener(BoltEnableDisable);
                _builder.onBuildComplete += OnBuildComplete;

                //InitializeRockDustMaterial();
                InitializeMine();
            }
        }

        public void SkipMineGeneration()
        {
            mineBuilderToEditorTransition.InitializeScenarioEditorUI();
        }

        private void SetTileset(int index)
        {
            tileSet = (MineSettings.TileSet)index;

            if (tileSet == MineSettings.TileSet.Stone)
            {
                BoltsToggle.gameObject.SetActive(true);
                BoltsToggle.ToggleWithoutNotify(false);
                BoltSpacing_SliderField.SetInteractableUI(false);
                BoltRibOffset_SliderField.SetInteractableUI(false);
                RockDust_SliderField.SetInteractableUI(false);
            }
            else
            {
                BoltsToggle.ToggleWithoutNotify(true);
                _boltSpacing = BoltSpacing_SliderField.startValue;
                _boltRibOffset = BoltRibOffset_SliderField.startValue;

                //MineLayerTile.Settings.BoltSpacing = _boltSpacing / unitMultiplier;
                ScenarioSaveLoad.Settings.MineSettings.BoltSpacing = _boltSpacing / _unitMultiplier;
                ScenarioSaveLoad.Settings.MineSettings.BoltRibOffset = _boltRibOffset / _unitMultiplier;

                BoltsToggle.gameObject.SetActive(false);
                BoltSpacing_SliderField.SetInteractableUI(true);
                BoltRibOffset_SliderField.SetInteractableUI(true);
                RockDust_SliderField.SetInteractableUI(true);
            }

            var mineTileSet = LoadableAssetManager.GetMineTileset(tileSet);
            if (mineTileSet == null)
                return;

            float convert = 1;

            if(mineTileSet.UnitScale == UnitsEditor.Imperial)
            {
                convert = METERS_TO_FEET;
            }

            //Change values on the sliders here
            RockDust_SliderField.SetSliderValues(mineTileSet.RockDustMinValue, mineTileSet.RockDustMaxValue, mineTileSet.RockDustStartValue);
            NumEntries_SliderField.SetSliderValues(mineTileSet.EntriesMinValue, mineTileSet.EntriesMaxValue, mineTileSet.EntriesStartValue);
            NumCrosscuts_SliderField.SetSliderValues(mineTileSet.CrosscutsMinValue, mineTileSet.CrosscutsMaxValue, mineTileSet.CrosscutsStartValue);
            PillarWidth_SliderField.SetSliderValues(mineTileSet.PillarWidthMinValue / convert, mineTileSet.PillarWidthMaxValue / convert, mineTileSet.PillarWidthStartValue / convert);
            PillarLength_SliderField.SetSliderValues(mineTileSet.PillarLengthMinValue / convert, mineTileSet.PillarLengthMaxValue / convert, mineTileSet.PillarLengthStartValue / convert);
            
            if (mineTileSet.GetTilesetType() == MineSettings.TileSet.Stone)
            {
                SeamHeight_SliderField.SetHashIncrement(5);
            }
            else
            {
                SeamHeight_SliderField.SetHashIncrement(1);
            }

            SeamHeight_SliderField.SetSliderValues(mineTileSet.SeamHeightMinValue / convert, mineTileSet.SeamHeightMaxValue / convert, mineTileSet.SeamHeightStartValue / convert);
            EntryWidth_SliderField.SetSliderValues(mineTileSet.EntryWidthMinValue / convert, mineTileSet.EntryWidthMaxValue / convert, mineTileSet.EntryWidthStartValue / convert);
            BoltSpacing_SliderField.SetSliderValues(mineTileSet.BoltSpacingMinValue / convert, mineTileSet.BoltSpacingMaxValue / convert, mineTileSet.BoltSpacingStartValue / convert);

            _rockDustLvl = mineTileSet.RockDustStartValue;
            _numEntries = mineTileSet.EntriesStartValue;
            _numCrosscuts = mineTileSet.CrosscutsStartValue;
            _pillarWidth = mineTileSet.PillarWidthStartValue / convert;
            _pillarLength = mineTileSet.PillarLengthStartValue / convert;
            _seamHeight = mineTileSet.SeamHeightStartValue / convert;
            _entryWidth = mineTileSet.EntryWidthStartValue / convert;
            _boltSpacing = mineTileSet.BoltSpacingStartValue / convert;
            _boltRibOffset = 1.067f * _unitMultiplier;

            if (!mineTileSet.UseBolts)
            {
                _boltSpacing = 0;
            }
            //MineLayerTile.Settings.BoltSpacing = _boltSpacing / unitMultiplier;
            ScenarioSaveLoad.Settings.MineSettings.BoltSpacing = _boltSpacing / _unitMultiplier;
            ScenarioSaveLoad.Settings.RockDustLevel = _rockDustLvl / 100;
            ScenarioSaveLoad.Settings.MineSettings.BoltRibOffset = _boltRibOffset / _unitMultiplier;
            ScenarioSaveLoad.Settings.MineSettings.EnableCornerCurtains = _enableCornerCurtains;

            //Do settings updates here
            GenerateMine();
        }

        private void BoltEnableDisable(bool value)
        {
            if (value)
            {
                _boltSpacing = BoltSpacing_SliderField.startValue;
                _boltRibOffset = BoltRibOffset_SliderField.startValue;
                BoltSpacing_SliderField.SetInteractableUI(true);
                BoltRibOffset_SliderField.SetInteractableUI(true);
            }
            else
            {
                _boltSpacing = 0;
                BoltSpacing_SliderField.SetInteractableUI(false);
                BoltRibOffset_SliderField.SetInteractableUI(false);
            }

            ScenarioSaveLoad.Settings.MineSettings.BoltSpacing = _boltSpacing / _unitMultiplier;
            ScenarioSaveLoad.Settings.MineSettings.BoltRibOffset = _boltRibOffset / _unitMultiplier;
            GenerateMine();
        }

        private void OnDestroy()
        {
            Create_Button.onClick.RemoveListener(FinalizeMine);
            Return_Button.onClick.RemoveListener(ReturnToMainMenu);

            //unsubscribe from value events
            RockDust_SliderField.onSubmitValue.RemoveListener(SetRockDust);
            NumEntries_SliderField.onSubmitValue.RemoveListener(SetNumEntries);
            NumCrosscuts_SliderField.onSubmitValue.RemoveListener(SetNumCrosscuts);
            SeamHeight_SliderField.onSubmitValue.RemoveListener(SetSeamHeight);
            PillarLength_SliderField.onSubmitValue.RemoveListener(SetPillarLength);
            PillarWidth_SliderField.onSubmitValue.RemoveListener(SetPillarWidth);
            EntryWidth_SliderField.onSubmitValue.RemoveListener(SetEntryWidth);
            BoltSpacing_SliderField.onSubmitValue.RemoveListener(SetBoltSpacing);
            TilesetDropdown.onValueChanged.RemoveListener(SetTileset);

            //unsubscribe from reset value events
            ResetValues_Button.onClick.RemoveListener(RockDust_SliderField.ResetValues);
            ResetValues_Button.onClick.RemoveListener(NumEntries_SliderField.ResetValues);
            ResetValues_Button.onClick.RemoveListener(NumCrosscuts_SliderField.ResetValues);
            ResetValues_Button.onClick.RemoveListener(SeamHeight_SliderField.ResetValues);
            ResetValues_Button.onClick.RemoveListener(PillarWidth_SliderField.ResetValues);
            ResetValues_Button.onClick.RemoveListener(PillarLength_SliderField.ResetValues);
            ResetValues_Button.onClick.RemoveListener(EntryWidth_SliderField.ResetValues);
            ResetValues_Button.onClick.RemoveListener(BoltSpacing_SliderField.ResetValues);

            //unsubscribe from unit of measure events
            unitToggle.onToggleComplete.RemoveListener(SeamHeight_SliderField.ChangeUnitOfMeasure);
            unitToggle.onToggleComplete.RemoveListener(PillarLength_SliderField.ChangeUnitOfMeasure);
            unitToggle.onToggleComplete.RemoveListener(PillarWidth_SliderField.ChangeUnitOfMeasure);
            unitToggle.onToggleComplete.RemoveListener(EntryWidth_SliderField.ChangeUnitOfMeasure);
            unitToggle.onToggleComplete.RemoveListener(BoltSpacing_SliderField.ChangeUnitOfMeasure);
            unitToggle.onToggleComplete.RemoveListener(ChangeUOMMultiplier);

            BoltsToggle.onToggleComplete.RemoveListener(BoltEnableDisable);

            if (_builder != null)
                _builder.onBuildComplete -= OnBuildComplete;

            //RevertMaterialValues();
        }

        /// <summary>
        ///  initialize slider values here before generating mine 
        /// </summary>
        private void InitializeMine()
        {
            _rockDustLvl = (int)RockDust_SliderField.startValue;
            _numEntries = (int)NumEntries_SliderField.startValue;
            _numCrosscuts = (int)NumCrosscuts_SliderField.startValue;
            _seamHeight = SeamHeight_SliderField.startValue;
            _pillarLength = PillarLength_SliderField.startValue;
            _pillarWidth = PillarWidth_SliderField.startValue;
            _entryWidth = EntryWidth_SliderField.startValue;
            _minPillarSizeAllowed = _entryWidth;
            _boltSpacing = BoltSpacing_SliderField.startValue;
            _boltRibOffset = BoltRibOffset_SliderField.startValue;

            if(SystemManager.SystemConfig.DisplayUnits == MeasurementUnits.Metric && !unitToggle.GetToggleButtonState())
            {
                unitToggle.Toggle(true);
                unitToggle.ToggleWithoutNotify(true);
            }
            if(SystemManager.SystemConfig.DisplayUnits == MeasurementUnits.Imperial && unitToggle.GetToggleButtonState())
            {
                unitToggle.Toggle(false);
                unitToggle.ToggleWithoutNotify(false);
            }

            SetRockDust((float)_rockDustLvl);
        }

        /// <summary>
        /// Setup material lists for changing properties and storing default values to revert to
        /// </summary>
        void InitializeRockDustMaterial()
        {
            // clear backups to insure parallel indexing with rock dust materials
            _rockDustBackups.Clear();

            //Save backups of shared materials to revert later
            foreach (Material m in LoadableAssetManager.RockDustMaterials.GetAllMaterials())
            {
                float rockDustValue = m.GetFloat("_Rockdust");
                _rockDustBackups.Add(rockDustValue);
            }
        }

        /// <summary>
        /// copy values from saved rockdust index
        /// </summary>
        void RevertMaterialValues()
        {
            List<Material> rockdustMats = LoadableAssetManager.RockDustMaterials.GetAllMaterials();
            for (int i = 0; i < _rockDustBackups.Count; i++)
            {
                rockdustMats[i].SetFloat("_Rockdust", _rockDustBackups[i]);
                Debug.Log($"Updating rockdust: {rockdustMats[i].name} to {_rockDustBackups[i]}");
            }
            _rockDustBackups.Clear();
        }

        private void ChangeUOMMultiplier(bool state)
        {
            //if (state)
            //{
            //    _unitMultiplier = 1.0f;
            //}
            //else
            //{
            //    _unitMultiplier = 3.28084f;

            //}
            _unitMultiplier = 1;
            GenerateMine();
        }

        public void GenerateMine(bool enableGeneration = false)
        {
            if (!enableGeneration && !_generationEnabled)
            {
                return;
            }

            _generationEnabled = true;
            //!!!!!!!STOPPING ALL COROUTINES HERE!!!!!!!!
            //maybe TODO: find a way to target the build mine coroutine somehow so we dont stop all coroutines if we need to run more in this script
            Create_Button.interactable = false;
            StopAllCoroutines();
            loadingIcon.SetActive(true);
            MineSettings newSettings = new MineSettings(tileSet, 0, _numEntries, _numCrosscuts,
                                                        _seamHeight / _unitMultiplier,
                                                        _pillarWidth / _unitMultiplier,
                                                        _pillarLength / _unitMultiplier,
                                                        _entryWidth / _unitMultiplier,
                                                        _boltSpacing / _unitMultiplier,
                                                        _boltRibOffset / _unitMultiplier,
                                                        _enableCornerCurtains);

            StartCoroutine(_builder.BuildMine(LoadableAssetManager.GetMineTileset(tileSet), autoGeneratedAssets, newSettings, AssetCollection));

        }

        public void GenerateMine(MineSettings settings)
        {
            //if (!enableGeneration && !_generationEnabled)
            //{
            //    return;
            //}

            _generationEnabled = true;
            //!!!!!!!STOPPING ALL COROUTINES HERE!!!!!!!!
            //maybe TODO: find a way to target the build mine coroutine somehow so we dont stop all coroutines if we need to run more in this script
            Create_Button.interactable = false;
            StopAllCoroutines();
            loadingIcon.SetActive(true);
            //MineSettings newSettings = new MineSettings(tileSet, 0, _numEntries, _numCrosscuts,
            //                                            _seamHeight / _unitMultiplier,
            //                                            _pillarWidth / _unitMultiplier,
            //                                            _pillarLength / _unitMultiplier,
            //                                            _entryWidth / _unitMultiplier,
            //                                            _boltSpacing / _unitMultiplier,
            //                                            _boltRibOffset / _unitMultiplier);

            StartCoroutine(_builder.BuildMine(LoadableAssetManager.GetMineTileset(tileSet), autoGeneratedAssets, settings, AssetCollection));

        }
        void OnBuildComplete()
        {
            //Debug.Log("Build Complete");
            loadingIcon.SetActive(false);
            StartCoroutine(DelayBolts());
            //foreach (var item in builder.SpawnedRoofBoltGenerators)
            //{
            //    item.GenerateBolts();
            //}
            Create_Button.interactable = true;
        }

        private IEnumerator DelayBolts()
        {
            yield return null;
            foreach (var item in _builder.SpawnedRoofBoltGenerators)
            {
                item.RoofBoltSpacing = _boltSpacing / _unitMultiplier;
                item.BoltRibOffset = _boltRibOffset / _unitMultiplier;
                item.GenerateBolts();
            }
        }
        public void CancelBuild()
        {
            //Debug.Log("Build Cancelled Due to Play Mode Return");
            _generationEnabled = false;
            loadingIcon.SetActive(false);

            //Create_Button.onClick.Invoke();
            mineBuilderToEditorTransition.InitializeScenarioEditorUI();

        }

        public float GetRockDustLevel()
        {
            return _rockDustLvl;
        }

        //public void SetRockDustLevel(float level)
        //{
        //    _rockDustLvl = level;
        //}

        
        #region SliderField Event listeners
        private void SetRockDust(float value, bool generate = false)
        {
            _rockDustLvl = (int)value;
            //ScenarioSaveLoad.Instance.Settings.RockDustLevel = value / 100.0f;
            ScenarioSaveLoad.Instance.SetRockDustLevel(value / 100.0f);
            
            //LoadableAssetManager.RockDustMaterials.SetRockdust(value / 100.0f);

            //foreach (Material m in LoadableAssetManager.RockDustMaterials.GetAllMaterials())
            //{
            //    m.SetFloat("_Rockdust", value / 100);
            //    Debug.Log($"Set rockust: {m.name} to {value / 100}");
            //}
        }

        void SetNumEntries(float value, bool generate)
        {
            //Debug.Log("Set Num Entries");
            _numEntries = (int)value;
            if (generate) GenerateMine();
        }
        void SetNumCrosscuts(float value, bool generate)
        {
            //Debug.Log("Set Num Crosscuts");
            _numCrosscuts = (int)value;
            if (generate) GenerateMine();
        }
        void SetSeamHeight(float value, bool generate)
        {
            //Debug.Log("Set Seam Height");
            _seamHeight = value;
            if (generate) GenerateMine();
        }
        void SetPillarWidth(float value, bool generate)
        {
            //Debug.Log("Set Pillar Width");
            _pillarWidth = value;
            if (generate) GenerateMine();
        }
        void SetPillarLength(float value, bool generate)
        {
            //Debug.Log("Set Num Pillar Length");
            _pillarLength = value;
            if (generate) GenerateMine();
        }
        void SetEntryWidth(float value, bool generate)
        {
            //Debug.Log("Set Num Entry Width");
            _entryWidth = value;
            if (generate) GenerateMine();

            _minPillarSizeAllowed = _entryWidth;
            PillarLength_SliderField.SetNewMinValue(_minPillarSizeAllowed);
            PillarWidth_SliderField.SetNewMinValue(_minPillarSizeAllowed);
        }

        void SetBoltSpacing(float value, bool generate)
        {
            _boltSpacing = value;
            //MineLayerTile.Settings.BoltSpacing = _boltSpacing / unitMultiplier;
            ScenarioSaveLoad.Settings.MineSettings.BoltSpacing = _boltSpacing / _unitMultiplier;
            //if (generate)
            //{
            //    GenerateMine();
            //}

            GenerateMine();


        }

        void SetBoltRibOffset(float value, bool generate)
        {
            _boltRibOffset = value;
            ScenarioSaveLoad.Settings.MineSettings.BoltRibOffset = _boltRibOffset / _unitMultiplier;

            GenerateMine();
        }

        #endregion

        private void FinalizeMine()
        {
            EditorCanvasSwapper.MoveToNewCanvasGroup(AssetPlacementCanvasGroup);
            EditorCamera.ChangeCameraSettings("PlacementLayer");
            EditorViewportController.Initialize();
            AssetLibrary.Initialize();
            //HierarchyContainer.Initialize();
            LayerManager.ChangeLayerFromInt(0);
        }

        private void ReturnToMainMenu()
        {
            SceneLoader.LoadScene("BAH_VRMineLaunch");
        }

        public int GetNumEntries()
        {
            return _numEntries;
        }

        public int GetNumCrosscuts()
        {
            return _numCrosscuts;
        }

        public float GetSeamHeight()
        {
            return _seamHeight;
        }

        public float GetPillarWidth()
        {
            return _pillarWidth;
        }

        public float GetPillarLength()
        {
            return _pillarLength;
        }

        public float GetEntryWidth()
        {
            return _entryWidth;
        }

        public float GetBoltSpacing()
        {
            return _boltSpacing;
        }

        public float GetRibOffset()
        {
            return _boltRibOffset;
        }

        public float GetUnitMultiplier()
        {
            return _unitMultiplier;
        }
    }
}

